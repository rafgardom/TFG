{"question_comments": [" If it is missing the , it is per default no url. \u2013 nfechner  Apr 19 '11 at 13:29 ", " @nfechner that is to say that if it doesn't specify a protocol and use the colon character (preferably with two forward slashes next) then it is not a URL? \u2013 jcolebrand  Apr 19 '11 at 13:30 ", " As you can read in the URL RFC , the only part actually neccessary to make a String a valid URL is the colon. Valid URLs look like: \u2013 nfechner  Apr 19 '11 at 13:34 ", " see stackoverflow.com/a/3975573/572180 \u2013 nguy\u00ean  May 29 '13 at 1:30 ", " How you test whether something is a URL is highly context-dependent and too vague without further qualification. Does it matter to you whether it conforms to the URL RFC spec, works when making an OS system call to open the URL , parses as an in an anchor element, works when calling , points to something that really exists, works in the browser location bar, or a combination of the above? You'll get very different answers depending on which of these you care about. \u2013 Roy Tinker  Apr 18 at 18:59  "], "question_title": "Check if a Javascript string is a url", "answers": [{"answer_votes": "44", "answer_comments": [" @Bruno: it's very likely that they are internally saved with separate titles and URLs, like { title: \"Stackoverflow\", uri: \"http://stackoverflow.com\" }  Update: indeed, see code.google.com/chrome/extensions/bookmarks.html \u2013 Marcel Korpel  Apr 19 '11 at 13:55  ", " trying to use your example. But i am getting an error on firebug which saying invalid quantifier . Any idea? \u2013 Sisir  Jul 10 '12 at 18:49  ", " Function returns: SyntaxError: Invalid regular expression: /^(https?://)?((([a-zd]([a-zd-]*[a-zd])*).)+[a-z]{2,}|((d{1,3}.){3}d{1,3}))(:d+)?(/[-a-zd%_.~+]*)*(?[;&a-zd%_.~+=-]*)?(#[-a-zd_]*)?$/: Invalid group Google Chrome (Version 30.0.1599.101) (Mac OS X: 10.8.5) \u2013 dr.dimitru  Oct 19 '13 at 13:37 ", " Be aware that if you use a string as a parameter for the RegExp you have to double escape the backslashes - otherwise you get errors like invalid group . \u2013 Kjell  Jun 5 '15 at 16:13 ", " I get invalid group for google.com \u2013 Daniel Apt  Oct 18 '16 at 10:15 "], "answer_body": " A related question with an answer:  Javascript regex URL matching  Or this Regexp from Devshed :  function ValidURL(str) {\n  var pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol\n    '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|'+ // domain name\n    '((\\d{1,3}\\.){3}\\d{1,3}))'+ // OR ip (v4) address\n    '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // port and path\n    '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string\n    '(\\#[-a-z\\d_]*)?$','i'); // fragment locater\n  if(!pattern.test(str)) {\n    alert(\"Please enter a valid URL.\");\n    return false;\n  } else {\n    return true;\n  }\n} ", "question_id": 5717093}, {"answer_votes": "145", "answer_comments": [" returns false for http://en.wikipedia.org/wiki/Procter_&_Gamble \u2013 Sorter  Dec 14 '13 at 19:48  ", " fails for google search image links : http://www.google.com/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&docid=nIv5rk2GyP3hXM&tbnid=isiOkMe3nCtexM:&ved=0CAUQjRw&url=http%3A%2F%2Fanimalcrossing.wikia.com%2Fwiki%2FLion&ei=ygZXU_2fGKbMsQTf4YLgAQ&bvm=bv.65177938,d.aWc&psig=AFQjCNEpBfKnal9kU7Zu4n7RnEt2nerN4g&ust=1398298682009707 \u2013 bill davis  Apr 23 '14 at 0:23  ", " this is unusable slow \u2013 Hern\u00e1n Eche  Jan 28 '15 at 3:00 ", " @Hern\u00e1nEche What so you mean by slow ? start = new Date(); isURL(\"http://michalstefanow.com\"); end = new Date(); diff = end - start; console.log(diff) I put a kettle on, went to a toilet, called my mum and the thing was done in no time... \u2013 Michal Stefanow  May 2 '16 at 13:59 ", " It returns true for aaa . \u2013 alex naumov  Dec 1 '16 at 9:13 "], "answer_body": " function isURL(str) {\n  var pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\n  '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|'+ // domain name\n  '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\n  '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\n  '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\n  '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\n  return pattern.test(str);\n} ", "question_id": 5717093}, {"answer_votes": "52", "answer_comments": [" This isn't the case (in Chrome 48 at least). If the url passed to a.href is invalid, parser.host returns the hostname of the page you're currently on, not the expected false . \u2013 Sam Beckham  Feb 25 '16 at 15:37  ", " Gah! that's weird. I swear I tested this!   I think it's fair to say that this wont really ever have to be used ON the current page, so the conditional can just be changed. I'll edit the post. \u2013 LukeP  Feb 25 '16 at 22:48 ", " it is not a very typical use case, but this technique does not work in the context of Firefox browser window (important for addon development) \u2013 chrmod  May 15 '16 at 16:01 ", " @SamBeckham This is definitely a concern when using this method, but I just want to point out that this isn't a special behavior. If you have a link on your page that's invalid, like <a href=\"invalidurl\"> , it does go to your domain. It gets added to the end of the current url. So Chrome is doing the correct thing by giving you the current hostname from the \"parser\" element. \u2013 yts  Dec 14 '17 at 18:54  ", " function isValidURL(str) : so much better than using regex! Thank you! \u2013 Rodrigo  Apr 13 at 15:55 "], "answer_body": " Rather than using a regular expression, I would recommend making use of an anchor element.  when you set the href property of an anchor , various other properties are set.  var parser = document.createElement('a');\nparser.href = \"http://example.com:3000/pathname/?search=test#hash\";\n\nparser.protocol; // => \"http:\"\nparser.hostname; // => \"example.com\"\nparser.port;     // => \"3000\"\nparser.pathname; // => \"/pathname/\"\nparser.search;   // => \"?search=test\"\nparser.hash;     // => \"#hash\"\nparser.host;     // => \"example.com:3000\"  source  However, if the value href is bound to is not a valid url, then the value of those auxiliary properties will be the empty string.  Edit: as pointed out in the comments: if an invalid url is used, the properties of the current URL may be substituted.  So, as long as you're not passing in the URL of the current page, you can do something like:  function isValidURL(str) {\n   var a  = document.createElement('a');\n   a.href = str;\n   return (a.host && a.host != window.location.host);\n} ", "question_id": 5717093}, {"answer_votes": "20", "answer_comments": [" Several parts of the regex could vastly be reduced: a) (http|https) to (?:https?) ; b) :{0,1} to :? ; c) [0-9] to \\d \u2013 Dmitry Parzhitsky  Mar 28 '17 at 14:52 "], "answer_body": " To Validate Url using javascript is shown below  function ValidURL(str) {\n  var regex = /(http|https):\\/\\/(\\w+:{0,1}\\w*)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%!\\-\\/]))?/;\n  if(!regex .test(str)) {\n    alert(\"Please enter valid URL.\");\n    return false;\n  } else {\n    return true;\n  }\n} ", "question_id": 5717093}, {"answer_votes": "12", "answer_comments": [" This should be the accepted answer. Thanks! \u2013 Arian Acosta  Mar 7 at 17:03 ", " No it shouldn't be the accepted answer. Like some of the others it hangs on a mere 33 character string: isURL('123456789012345678901234567890123') and fails many edge case tests: foo.com/blah_blah_(wikipedia)_(again) //incorrectly returns false. \u2013 aamarks  Apr 16 at 16:23 "], "answer_body": " Improvement on the accepted answer...   Has double escaping for backslashes (\\\\)  Ensures that domains have a dot and an extension (.com .io .xyz)  Allows full colon (:) in the path e.g. http://thingiverse.com/download:1894343  Allows ampersand (&) in path e.g http://en.wikipedia.org/wiki/Procter_&_Gamble  Allows @ symbol in path e.g. https://medium.com/@techytimo  isURL(str) {\n  var pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\n  '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name and extension\n  '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\n  '(\\\\:\\\\d+)?'+ // port\n  '(\\\\/[-a-z\\\\d%@_.~+&:]*)*'+ // path\n  '(\\\\?[;&a-z\\\\d%@_.,~+&:=-]*)?'+ // query string\n  '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\n  return pattern.test(str);\n}  ", "question_id": 5717093}, {"answer_votes": "11", "answer_comments": null, "answer_body": " Rely on a library: https://www.npmjs.com/package/valid-url  import { isWebUri } from 'valid-url';\n// ...\nif (!isWebUri(url)) {\n    return \"Not a valid url.\";\n} ", "question_id": 5717093}, {"answer_votes": "9", "answer_comments": [" This throws an exception for a string such as www.google.com indicating that this is not a valid URL, when it is a valid URL \u2013 AshD  Apr 21 '17 at 1:04  ", " @AshD no, it's not; e.g. you can't use as href attribute for <a> . Valid URL must begin with a scheme name , e.g. https:// . \u2013 Pavlo  Apr 21 '17 at 8:26  ", " Looks good, hopefully soon leave the experimental stage. \u2013 gmo  Jun 9 '17 at 10:50 ", " new URL('javascript:alert(23)') \u2013 user3560988  Oct 2 '17 at 15:47 ", " @Pavlo this returns true isValidUrl(\"javascript:void(0)\") \u2013 Praveena  Nov 2 '17 at 3:55 "], "answer_body": " You can try to use URL constructor : if it doesn't throw, the string is a valid URL:  const isValidUrl = (string) => {\n  try {\n    new URL(string);\n    return true;\n  } catch (_) {\n    return false;  \n  }\n} ", "question_id": 5717093}, {"answer_votes": "4", "answer_comments": [" This worked for me but I needed to backslash the backslashes. var pattern = new RegExp('(https?:\\\\/\\\\/)?((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*(\\\\?[;&a-z\\\\d%_.~+=-]*)?(\\\\#[-a-z\\\\d_]*)?$', 'i'); \u2013 Fernando Chavez Herrera  Jun 20 '16 at 21:29 "], "answer_body": " I can't comment on the post that is the closest #5717133 , but below is the way I figured out how to get @tom-gullen regex working.  /^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*(\\?[;&a-z\\d%_.~+=-]*)?(\\#[-a-z\\d_]*)?$/i ", "question_id": 5717093}, {"answer_votes": "2", "answer_comments": null, "answer_body": " (I don't have reps to comment on ValidURL example; hence post this as an answer.)  While use of protocol relative URLs is not encouraged ( The Protocol-relative URL ), they do get employed sometimes. To validate such an URL with a regular expression the protocol part could be optional, e.g.:  function isValidURL(str) {\n    var pattern = new RegExp('^((https?:)?\\\\/\\\\/)?'+ // protocol\n        '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\n        '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\n        '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\n        '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\n        '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locater\n    if (!pattern.test(str)) {\n        return false;\n    } else {\n        return true;\n    }\n}  As others noted, regular expression does not seem to be the best suited approach for validating URLs, though. ", "question_id": 5717093}, {"answer_votes": "2", "answer_comments": null, "answer_body": " One function that I have been using to validate a URL \"string\" is:  var matcher = /^(?:\\w+:)?\\/\\/([^\\s\\.]+\\.\\S{2}|localhost[\\:?\\d]*)\\S*$/;\n\nfunction isUrl(string){\n  return matcher.test(string);\n}  This function will return a boolean whether the string is a URL. ", "question_id": 5717093}, {"answer_votes": "2", "answer_comments": [" I checked your answer. Your answer is failing for sdfasdp.ppppppppppp i.e. returning true but expected is false \u2013 VicJordan  Apr 17 at 8:26 ", " I think that's a valid URL, structurally. Not an expert on the standard but I don't think there's a limit on the length of the .com portion (I know .online is legit). \u2013 aamarks  Apr 17 at 22:12 "], "answer_body": " As has been noted the perfect regex is elusive but still seems to be a reasonable approach (alternatives are server side tests or the new experimental URL API ). However the high ranking answers are often returning false for common URLs but even worse will freeze your app/page for minutes on even as simple a string as isURL('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') . It's been pointed out in some of the comments, but most probably haven't entered a bad value to see it. Hanging like that makes that code unusable in any serious application. I think it's due to the repeated case insensitive sets in code like ((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.?)+[a-z]{2,}|' ... . Take out the 'i' and it doesn't hang but will of course not work as desired. But even with the ignore case flag those tests reject high unicode values that are allowed.  The best already mentioned is:  function isURL(str) {\n  return /^(?:\\w+:)?\\/\\/([^\\s\\.]+\\.\\S{2}|localhost[\\:?\\d]*)\\S*$/.test(str); \n}  That comes from Github segmentio/is-url . The good thing about a code repository is you can see the testing and any issues and also the test strings run through it. There's a branch that would allow strings missing protocol like google.com .  There is one other repository I've seen that is even better for isURL at dperini/regex-weburl.js , but it is highly complex. It has a bigger test list of valid and invalid URLs. The simple one above still passes all the positives and only fails to block a few odd negatives like http://a.b--c.de/ as well as the special ips.  Whichever you choose, run it through this function which I've adapted from the tests on dperini/regex-weburl.js, while using your browser's Developer Tools inpector.  function testIsURL() {\n//should match\nconsole.assert(isURL(\"http://foo.com/blah_blah\"));\nconsole.assert(isURL(\"http://foo.com/blah_blah/\"));\nconsole.assert(isURL(\"http://foo.com/blah_blah_(wikipedia)\"));\nconsole.assert(isURL(\"http://foo.com/blah_blah_(wikipedia)_(again)\"));\nconsole.assert(isURL(\"http://www.example.com/wpstyle/?p=364\"));\nconsole.assert(isURL(\"https://www.example.com/foo/?bar=baz&inga=42&quux\"));\nconsole.assert(isURL(\"http://\u272adf.ws/123\"));\nconsole.assert(isURL(\"http://userid:password@example.com:8080\"));\nconsole.assert(isURL(\"http://userid:password@example.com:8080/\"));\nconsole.assert(isURL(\"http://userid@example.com\"));\nconsole.assert(isURL(\"http://userid@example.com/\"));\nconsole.assert(isURL(\"http://userid@example.com:8080\"));\nconsole.assert(isURL(\"http://userid@example.com:8080/\"));\nconsole.assert(isURL(\"http://userid:password@example.com\"));\nconsole.assert(isURL(\"http://userid:password@example.com/\"));\nconsole.assert(isURL(\"http://142.42.1.1/\"));\nconsole.assert(isURL(\"http://142.42.1.1:8080/\"));\nconsole.assert(isURL(\"http://\u27a1.ws/\u4a39\"));\nconsole.assert(isURL(\"http://\u2318.ws\"));\nconsole.assert(isURL(\"http://\u2318.ws/\"));\nconsole.assert(isURL(\"http://foo.com/blah_(wikipedia)#cite-1\"));\nconsole.assert(isURL(\"http://foo.com/blah_(wikipedia)_blah#cite-1\"));\nconsole.assert(isURL(\"http://foo.com/unicode_(\u272a)_in_parens\"));\nconsole.assert(isURL(\"http://foo.com/(something)?after=parens\"));\nconsole.assert(isURL(\"http://\u263a.damowmow.com/\"));\nconsole.assert(isURL(\"http://code.google.com/events/#&product=browser\"));\nconsole.assert(isURL(\"http://j.mp\"));\nconsole.assert(isURL(\"ftp://foo.bar/baz\"));\nconsole.assert(isURL(\"http://foo.bar/?q=Test%20URL-encoded%20stuff\"));\nconsole.assert(isURL(\"http://\u0645\u062b\u0627\u0644.\u0625\u062e\u062a\u0628\u0627\u0631\"));\nconsole.assert(isURL(\"http://\u4f8b\u5b50.\u6d4b\u8bd5\"));\nconsole.assert(isURL(\"http://\u0909\u0926\u093e\u0939\u0930\u0923.\u092a\u0930\u0940\u0915\u094d\u0937\u093e\"));\nconsole.assert(isURL(\"http://-.~_!$&'()*+,;=:%40:80%2f::::::@example.com\"));\nconsole.assert(isURL(\"http://1337.net\"));\nconsole.assert(isURL(\"http://a.b-c.de\"));\nconsole.assert(isURL(\"http://223.255.255.254\"));\nconsole.assert(isURL(\"postgres://u:p@example.com:5702/db\"));\nconsole.assert(isURL(\"https://d1f4470da51b49289906b3d6cbd65074@app.getsentry.com/13176\"));\n\n//SHOULD NOT MATCH:\nconsole.assert(!isURL(\"http://\"));\nconsole.assert(!isURL(\"http://.\"));\nconsole.assert(!isURL(\"http://..\"));\nconsole.assert(!isURL(\"http://../\"));\nconsole.assert(!isURL(\"http://?\"));\nconsole.assert(!isURL(\"http://??\"));\nconsole.assert(!isURL(\"http://??/\"));\nconsole.assert(!isURL(\"http://#\"));\nconsole.assert(!isURL(\"http://##\"));\nconsole.assert(!isURL(\"http://##/\"));\nconsole.assert(!isURL(\"http://foo.bar?q=Spaces should be encoded\"));\nconsole.assert(!isURL(\"//\"));\nconsole.assert(!isURL(\"//a\"));\nconsole.assert(!isURL(\"///a\"));\nconsole.assert(!isURL(\"///\"));\nconsole.assert(!isURL(\"http:///a\"));\nconsole.assert(!isURL(\"foo.com\"));\nconsole.assert(!isURL(\"rdar://1234\"));\nconsole.assert(!isURL(\"h://test\"));\nconsole.assert(!isURL(\"http:// shouldfail.com\"));\nconsole.assert(!isURL(\":// should fail\"));\nconsole.assert(!isURL(\"http://foo.bar/foo(bar)baz quux\"));\nconsole.assert(!isURL(\"ftps://foo.bar/\"));\nconsole.assert(!isURL(\"http://-error-.invalid/\"));\nconsole.assert(!isURL(\"http://a.b--c.de/\"));\nconsole.assert(!isURL(\"http://-a.b.co\"));\nconsole.assert(!isURL(\"http://a.b-.co\"));\nconsole.assert(!isURL(\"http://0.0.0.0\"));\nconsole.assert(!isURL(\"http://10.1.1.0\"));\nconsole.assert(!isURL(\"http://10.1.1.255\"));\nconsole.assert(!isURL(\"http://224.1.1.1\"));\nconsole.assert(!isURL(\"http://1.1.1.1.1\"));\nconsole.assert(!isURL(\"http://123.123.123\"));\nconsole.assert(!isURL(\"http://3628126748\"));\nconsole.assert(!isURL(\"http://.www.foo.bar/\"));\nconsole.assert(!isURL(\"http://www.foo.bar./\"));\nconsole.assert(!isURL(\"http://.www.foo.bar./\"));\nconsole.assert(!isURL(\"http://10.1.1.1\"));}  And then test that string of 'a's. ", "question_id": 5717093}, {"answer_votes": "2", "answer_comments": [" Seems a nice solution! Could you add some tests showing it works in some corner cases (see for example these comments )? \u2013 Basj  Apr 16 at 7:36  ", " @Basj added test cases. Please check \u2013 VicJordan  Apr 16 at 8:00 ", " Not bad, fails to pass http://\u2318.ws or 142.42.1.1 and it allows http://.www.foo.bar./ but it doesn't hang like some of the other regex including the top rated answers. \u2013 aamarks  Apr 16 at 15:58 ", " @aamarks then it deserve an upvote ;) \u2013 VicJordan  Apr 17 at 2:22 ", " @aamarks I checked your answer. Your answer is failing for https://sdfasdp.ppppppppppp i.e. returning true but mine returns false which is expected I think. \u2013 VicJordan  Apr 17 at 2:23 "], "answer_body": " I am using below function to validate URL with or without http/https :    function isValidURL(string) {\r\n  var res = string.match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g);\r\n  if (res == null)\r\n    return false;\r\n  else\r\n    return true;\r\n};\r\n\r\nvar testCase1 = \"http://en.wikipedia.org/wiki/Procter_&_Gamble\";\r\nconsole.log(isValidURL(testCase1)); // return true\r\n\r\nvar testCase2 = \"http://www.google.com/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&docid=nIv5rk2GyP3hXM&tbnid=isiOkMe3nCtexM:&ved=0CAUQjRw&url=http%3A%2F%2Fanimalcrossing.wikia.com%2Fwiki%2FLion&ei=ygZXU_2fGKbMsQTf4YLgAQ&bvm=bv.65177938,d.aWc&psig=AFQjCNEpBfKnal9kU7Zu4n7RnEt2nerN4g&ust=1398298682009707\";\r\nconsole.log(isValidURL(testCase2)); // return true\r\n\r\nvar testCase3 = \"https://sdfasd\";\r\nconsole.log(isValidURL(testCase3)); // return false\r\n\r\nvar testCase4 = \"dfdsfdsfdfdsfsdfs\";\r\nconsole.log(isValidURL(testCase4)); // return false\r\n\r\nvar testCase5 = \"magnet:?xt=urn:btih:123\";\r\nconsole.log(isValidURL(testCase5)); // return false\r\n\r\nvar testCase6 = \"https://stackoverflow.com/\";\r\nconsole.log(isValidURL(testCase6)); // return true\r\n\r\nvar testCase7 = \"https://w\";\r\nconsole.log(isValidURL(testCase7)); // return false\r\n\r\nvar testCase8 = \"https://sdfasdp.ppppppppppp\";\r\nconsole.log(isValidURL(testCase8)); // return false    ", "question_id": 5717093}, {"answer_votes": "0", "answer_comments": [" isUrl('https://w') returns true \u2013 Basj  Apr 16 at 7:38 ", " Looks very similar to the answer provided by @pavlo, only variable names changed ;) \u2013 Munim Munna  Apr 16 at 21:28 "], "answer_body": " You can use the URL native API :  const isUrl = string => {\n      try { return Boolean(new URL(string)); }\n      catch(e){ return false; }\n  } ", "question_id": 5717093}, {"answer_votes": "0", "answer_comments": null, "answer_body": " Here is yet another method.    var elm;\r\nfunction isValidURL(u){\r\n  if(!elm){\r\n    elm = document.createElement('input');\r\n    elm.setAttribute('type', 'url');\r\n  }\r\n  elm.value = u;\r\n  return elm.validity.valid;\r\n}\r\n\r\nconsole.log(isValidURL('http://www.google.com/'));\r\nconsole.log(isValidURL('//google.com'));\r\nconsole.log(isValidURL('google.com'));\r\nconsole.log(isValidURL('localhost:8000'));    ", "question_id": 5717093}, {"answer_votes": "0", "answer_comments": null, "answer_body": " The question asks a validation method for an url such as stackoverflow , without the protocol or any dot in the hostname. So, it's not a matter of validating url sintax, but checking if it's a valid url, by actually calling it.  I tried several methods for knowing if the url true exists and is callable from within the browser, but did not find any way to test with javascript the response header of the call:   adding an anchor element is fine for firing the click() method.  making ajax call to the challenging url with 'GET' is fine, but has it's various limitations due to CORS policies and it is not the case of using ajax , for as the url maybe any outside my server's domain.  using the fetch API has a workaround similar to ajax.  other problem is that I have my server under https protocol and throws an exception when calling non secure urls.   So, the best solution I can think of is getting some tool to perform CURL using javascript trying something like curl -I <url> . Unfortunately I did not find any and in appereance it's not possible. I will appreciate any comments on this.  But, in the end, I have a server running PHP and as I use Ajax for almost all my requests, I wrote a function on the server side to perform the curl request there and return to the browser.  Regarding the single word url on the question 'stackoverflow' it will lead me to https://daniserver.com.ar/stackoverflow , where daniserver.com.ar is my own domain. ", "question_id": 5717093}, {"answer_votes": "-1", "answer_comments": null, "answer_body": " I think using the native URL API is better than a complex regex patterns as @pavlo suggested. It has some drawbacks though which we can fix by some extra code. This approach fails for the following valid url.  //cdn.google.com/script.js  We can add the missing protocol beforehand to avoid that. It also fails to detect following invalid url.  http://w\nhttp://..  So why check the whole url? we can just check the domain. I borrowed the regex to verify domain from here .  function isValidUrl(string) {\n    if (string && string.length > 1 && string.slice(0, 2) == '//') {\n        string = 'http:' + string; //dummy protocol so that URL works\n    }\n    try {\n        var url = new URL(string);\n        return url.hostname && url.hostname.match(/^([a-z0-9])(([a-z0-9-]{1,61})?[a-z0-9]{1})?(\\.[a-z0-9](([a-z0-9-]{1,61})?[a-z0-9]{1})?)?(\\.[a-zA-Z]{2,4})+$/) ? true : false;\n    } catch (_) {\n        return false;\n    }\n}  The hostname attribute is empty string for javascript:void(0) , so it works for that too, and you can also add IP address verifier too. I'd like to stick to native API's most, and hope it starts to support everything in near future. ", "question_id": 5717093}], "question_body": " Is there a way in javascript to check if a string is a url?  RegExes are excluded because the url is most likely written like ; that is to say that it might not have a .com, www or http ", "question_code": ["stackoverflow"], "question_id": 5717093}