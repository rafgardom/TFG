{"question_comments": null, "question_title": "What is the correct JSON content type?", "answers": [{"answer_votes": "8973", "answer_comments": [" Complete list of MIME types \u2013 Eugen Mihailescu  Apr 4 '17 at 5:08  ", " Can I send file together Json text? \u2013 OPV  Jul 23 '17 at 19:42 ", " does it really matter what mime type it has? it's text that gets parsed into an object. wouldn't it be more natural to pass it as text/plain if you want it to be openable in browser without force download, and application/octet-stream if you want it to be automatically downloaded(useful if you're generating it on a webpage intended to be saved locally). Is there really that many people that will need to know the mime type so the downloader can view it with a special json viewer? What am I missing that warrants it a special mime type? \u2013 Dmitry  Aug 23 '17 at 12:00  ", " Using \"text/plain\" is a bad practice in general. There are, for instance, attacks in the web platform that would allow cross-origin data theft if you fail to send an appropriate MIME type value. \u2013 EricLaw  Nov 21 '17 at 21:27 "], "answer_body": " For JSON text:   The MIME media type for JSON text is application/json . The default encoding is UTF-8. (Source: RFC 4627 ).   For JSONP with callback:   application/javascript   Here are some blog posts that were mentioned in the comments that are relevant.   Why you shouldn't use text/html for JSON  Internet\u00a0Explorer sometimes has issues with application/json  A rather complete list of Mimetypes and what to use them for  ", "question_id": 477816}, {"answer_votes": "1436", "answer_comments": [" A lot of stuff got put into the text/* section in the early days that would probably be put into the application/* section these days. \u2013 TRiG  Jul 5 '11 at 20:47 ", " And that's a big mistake imho. JSON is text. Can be read/written by any text editor. That is valuable to know, but cannot be derived from application/json . I think it would have been great to have everything that can be opened with a text editor under text , specific XML doctypes under text/xml/xhtml etc... It would really have helped in organizing. \u2013 Stijn de Witt  Apr 10 '17 at 7:29 ", " I can open a .jpg in my text editor. \u2013 Rohmer  Dec 5 '17 at 17:12 ", " @Rohmer - You \"can\" open anything in a text editor, but a binary format like JPEG or a Windows .exe or a .zip will contain non-printable characters which can actually break many text editors or cause undesired behavior. Try running cat file.jpg for example. Whereas any xml or json file is 100% printable. So I think Stijn de Witt's point is a valid one, despite the fact that yes, it's too late to change now. \u2013 XP84  Jan 16 at 20:59 ", " @XP84 You can open any binary with a text editor in HEX form. And all the different characters (the 16 of them) are 100% printable. So, by that logic... are all binaries text?  Json is not text. Json is (warning: informal loose definition ahead) a text representation of an object (or array of objects) \u2013 xDaizu  Apr 5 at 11:55  "], "answer_body": " IANA has registered the official MIME Type for JSON as application/json .  When asked about why not text/json , Crockford seems to have said JSON is not really JavaScript nor text and also IANA was more likely to hand out application/* than text/* .  More resources:   Media Types  Request for Comments 4627  bluesmoon: JSON has a type  ", "question_id": 477816}, {"answer_votes": "767", "answer_comments": [" JSONP is not really JSON though, it's a technique for passing a JavaScript object literal \u2013 Benjamin Gruenbaum  Sep 8 '13 at 6:44  "], "answer_body": " For JSON:  Content-Type: application/json  For JSON-P :  Content-Type: application/javascript ", "question_id": 477816}, {"answer_votes": "570", "answer_comments": [" server response must go as text/html. This is true for the ExtJS variant as well. \u2013 gbegley  Oct 30 '12 at 21:10 "], "answer_body": " Of course, the correct MIME media type for JSON is application/json , but it's necessary to realize what type of data is expected in your application.  For example, I use Ext GWT and the server response must go as text/html but contains JSON data.  Client side, Ext GWT form listener  uploadForm.getForm().addListener(new FormListenerAdapter()\n{\n    @Override\n    public void onActionFailed(Form form, int httpStatus, String responseText) \n    {\n        MessageBox.alert(\"Error\");\n    }\n\n    @Override\n    public void onActionComplete(Form form, int httpStatus, String responseText) \n    {\n        MessageBox.alert(\"Success\");\n    }\n});  In case of using application/json response type, the browser suggests me to save the file.  Server side source code snippet using Spring MVC  return new AbstractUrlBasedView() \n{\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void renderMergedOutputModel(Map model, HttpServletRequest request,\n                                           HttpServletResponse response) throws Exception \n    {\n        response.setContentType(\"text/html\");\n        response.getWriter().write(json);\n    }\n}; ", "question_id": 477816}, {"answer_votes": "423", "answer_comments": [" How does this have less votes than the above answer, it's more complete and contains definitions.. \u2013 Daniel Waters  Jun 12 '13 at 11:02 ", " @DanielWaters The definition of JSON is wrong. It does not need to be dynamically generated or respect query parameters. You can serve a static JSON file. Also, the most upvoted answer has a link to the RFC. \u2013 styfle  Jan 29 '14 at 1:37 ", " Also JSONP can be json data assigned to a var. \u2013 Jimmy Kane  Jan 30 '14 at 13:16 "], "answer_body": " JSON:  Response is dynamically generated data, according to the query parameters passed in the URL.  Example:  { \"Name\": \"Foo\", \"Id\": 1234, \"Rank\": 7 }  Content-Type:  application/json   JSON-P:  JSON with padding.\nResponse is JSON data, with a function call wrapped around it.  Example:  functionCall({\"Name\": \"Foo\", \"Id\": 1234, \"Rank\": 7});  Content-Type:  application/javascript ", "question_id": 477816}, {"answer_votes": "367", "answer_comments": [" usually a reload is enough (faster than restart). Also, note that you can now do \"sudo service apache2 reload\". \u2013 noamtm  Jan 19 '11 at 17:37 ", " Ubuntu 12.04 has this by default \u2013 Prizoff  May 25 '12 at 17:52 "], "answer_body": " If you are using Ubuntu or Debian and you serve .json files through Apache, you might want to serve the files with the correct content type. I am doing this primarily because I want to use the Firefox extension JSONView  The Apache module mod_mime will help to do this easily. However, with Ubuntu you need to edit the file /etc/mime.types and add the line  application/json json  Then restart Apache:  sudo service apache2 restart ", "question_id": 477816}, {"answer_votes": "354", "answer_comments": [" jQuery seems to work with at least  'application/json' and 'text/plain'... I haven't tried all the others though. \u2013 Nathan  Mar 18 '10 at 19:30 ", " jQuery is capable of working with content-Type: text/plain , content-Type: application/json , content-Type: application/json; charset=UTF-8 , contentType: \"application/x-www-form-urlencoded; charset=UTF-8\" \u2013 Ashraf.Shk786  Jul 27 '17 at 11:13 "], "answer_body": " If you're calling ASP.NET Web Services from the client-side you have to use application/json for it to work. I believe this is the same for the jQuery and Ext frameworks. ", "question_id": 477816}, {"answer_votes": "283", "answer_comments": null, "answer_body": " The right content type for JSON is application/json UNLESS you're using JSONP , also known as JSON with Padding, which is actually JavaScript and so the right content type would be application/javascript . ", "question_id": 477816}, {"answer_votes": "271", "answer_comments": [" \"So I personally recommending to use application/x-javascript\" is where this answer becomes misleading. GoDaddy does allow compression of application/json , I leverage it on my shared hosting and I wouldn't suggest using a different content type to enable compression anyway, it's simply wrong. It can be done, but it will still be wrong. Using different content types for browser support is one thing, using different content types for server-side compression is another. \u2013 Jhawins  Dec 11 '14 at 16:20  "], "answer_body": " There is no doubt that application/json is the best MIME type for a JSON response.  But I had some experience where I had to use application/x-javascript because of some compression issues. My hosting environment is shared hosting with GoDaddy . They do not allow me to change server configurations. I had added the following code to my web.config file for compressing responses.  <httpCompression>\n    <scheme name=\"gzip\" dll=\"%Windir%\\system32\\inetsrv\\gzip.dll\"/>\n    <dynamicTypes>\n        <add mimeType=\"text/*\" enabled=\"true\"/>\n        <add mimeType=\"message/*\" enabled=\"true\"/>\n        <add mimeType=\"application/javascript\" enabled=\"true\"/>\n        <add mimeType=\"*/*\" enabled=\"false\"/>\n    </dynamicTypes>\n    <staticTypes>\n        <add mimeType=\"text/*\" enabled=\"true\"/>\n        <add mimeType=\"message/*\" enabled=\"true\"/>\n        <add mimeType=\"application/javascript\" enabled=\"true\"/>\n        <add mimeType=\"*/*\" enabled=\"false\"/>\n    </staticTypes>\n</httpCompression>\n<urlCompression doStaticCompression=\"true\" doDynamicCompression=\"true\"/>  By using this, the .aspx pages was compressed with g-zip but JSON responses were not. I added  <add mimeType=\"application/json\" enabled=\"true\"/>  in the static and dynamic types sections. But this does not compress JSON responses at all.  After that I removed this newly added type and added  <add mimeType=\"application/x-javascript\" enabled=\"true\"/>  in both the static and dynamic types sections, and changed the response type in  .ashx (asynchronous handler) to  application/x-javascript  And now I found that my JSON responses were compressed with g-zip. So I personally recommend to use  application/x-javascript  only if you want to compress your JSON responses on a shared hosting environment . Because in shared hosting, they do not allow you to change IIS configurations. ", "question_id": 477816}, {"answer_votes": "249", "answer_comments": null, "answer_body": " Only when using application/json as the MIME type I have the following (as of November 2011 with the most recent versions of Chrome, Firefox with Firebug ):   No more warnings from Chrome when the JSON is loaded from the server.  Firebug will add a tab to the response showing you the JSON data\nformatted. If the MIME type is different, it will just show up as\n'Response content'.  ", "question_id": 477816}, {"answer_votes": "225", "answer_comments": [" Tools that don't adhere to standards should be avoided whenever possible; use application/json per spec. \u2013 one.beat.consumer  Feb 16 '12 at 2:05 ", " @one.beat.consumer while that is true, it's not specific to ExtJs per se. It's a browser limitation (or rather, perhaps, a \"security measure\"). \u2013 Hendy Irawan  Feb 24 '12 at 15:54 ", " Surely it would be better to use text/plain so it doesn't apply any HTML semantics to non-HTML content? Or don't browsers let you extract a frame's content if it's got no DOM? \u2013 Synchro  Aug 10 '12 at 12:34 ", " To add further confusion: I'm just debugging a similar case on Samsung Galaxy Beam (Android 2.3) with default browser, and the iframe seems to fire load event for application/javascript , application/x-javascript , text/javascript , text/plain , but NOT firing it for application/json nor text/html . As of today, Android <=2.3 is About 50% of the Android market share. \u2013 jakub.g  Jul 5 '13 at 12:41  "], "answer_body": " Not everything works for content type application/json .  If you are using Ext\u00a0JS form submit to upload file, be aware that the server response is parsed by the browser to create the document for the <iframe> .  If the server is using JSON to send the return object, then the Content-Type header must be set to text/html in order to tell the browser to insert the text unchanged into the document body.  See the Ext JS 3.4.0 API documentation . ", "question_id": 477816}, {"answer_votes": "211", "answer_comments": null, "answer_body": " JSON is a domain-specific language (DSL) and a data format independent of JavaScript, and as such has its own MIME type, application/json . Respect for MIME types is of course client driven, so text/plain may do for transfer of bytes, but then you would be pushing up interpretation to the vendor application domain unnecessarily - application/json . Would you transfer XML via text/plain ?  But honestly, your choice of MIME type is advice to the client as to how to interpret the data- text/plain or text/HTML (when it's not HTML) is like type erasure- it's as uninformative as making all your objects of type Object in a typed language.  No browser runtime I know of will take a JSON document and automatically make it available to the runtime as a JavaScript accessible object without intervention, but if you are working with a crippled client, that's an entirely different matter. But that's not the whole story- RESTful JSON services often don't have JavaScript runtimes, but it doesn't stop them using JSON as a viable data interchange format. If clients are that crippled... then I would consider perhaps HTML injection via an Ajax templating service instead.  Application/JSON! ", "question_id": 477816}, {"answer_votes": "195", "answer_comments": null, "answer_body": " If you're in a client-side environment, investigating about the cross-browser support is mandatory for a well supported web application.  The right HTTP Content-Type would be application/json , as others already highlighted too, but some clients do not handle it very well, that's why jQuery recommends the default text/html . ", "question_id": 477816}, {"answer_votes": "152", "answer_comments": null, "answer_body": " The correct answer is:  Content-Type: application/json ", "question_id": 477816}, {"answer_votes": "151", "answer_comments": [" When did text/javascript become obsolete? I'm still filling up HTML documents with <script type=\"text/javascript\" ... tags. \u2013 Oli  Apr 2 '13 at 12:23 ", " It makes no difference for browsers, really. It's just obsolete for RFC standards: rfc-editor.org/rfc/rfc4329.txt \u2013 fcm  Apr 2 '13 at 12:34 ", " @Oli you can safely drop type=\"text/javascript\" and just do <script>...</script> at least according to HTML5. \u2013 TCB13  Jun 27 '13 at 21:41 "], "answer_body": " As many others have mentioned, application/json is the correct answer.  But what haven't been explained yet is what the other options you proposed mean.   application/x-javascript : Experimental MIME type for JavaScript before application/javascript was made standard.  text/javascript : Now obsolete. You should use application/javascript when using javascript.  text/x-javascript : Experimental MIME type for the above situation.  text/x-json : Experimental MIME type for JSON before application/json got officially registered.   All in all, whenever you have any doubts about content types, you should check this link  ", "question_id": 477816}, {"answer_votes": "135", "answer_comments": null, "answer_body": " In JSP , you can use this in page directive:  <%@ page language=\"java\" contentType=\"application/json; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>  The correct MIME media type for JSON is application/json .  JSP will use it for sending a response to the client. ", "question_id": 477816}, {"answer_votes": "103", "answer_comments": null, "answer_body": " \u201c application/json \u201d is the correct JSON content type.  def ajaxFindSystems = {\n  def result = Systems.list()\n  render(contentType:'application/json') {\n    results {\n      result.each{sys->\n        system(id:sys.id, name:sys.name)\n      }\n    }\n    resultset (rows:result.size())\n  }\n} ", "question_id": 477816}, {"answer_votes": "93", "answer_comments": null, "answer_body": " The IANA registration for application/json says   Applications that use this media type:  JSON has been used to\n     exchange data between applications written in all of these\n     programming languages: ActionScript, C, C#, Clojure, ColdFusion,\n     Common Lisp, E, Erlang, Go, Java, JavaScript, Lua, Objective CAML,\n     Perl, PHP, Python, Rebol, Ruby, Scala, and Scheme.   You'll notice that IANA.org doesn't list any of these other media types , in fact even application/javascript is now obsolete. So application/json is really the only possible correct answer.  Browser support is another thing.  The most widely supported non-standard media types are text/json or text/javascript . But some big names even use text/plain .  Even more strange is the Content-Type header sent by Flickr, who returns JSON as text/xml . Google uses text/javascript for some of it's ajax apis.  Examples:  curl -I \"https://ajax.googleapis.com/ajax/services/search/video?v=1.0&q=jsonexample\"  Output: Content-Type: text/javascript  curl -I \"https://www.flickr.com/services/rest/?method=flickr.test.echo&format=json&api_key=f82254c1491d894f1204d8408f645a93\"  Output: Content-Type: text/xml ", "question_id": 477816}, {"answer_votes": "79", "answer_comments": [" Example of such a situation? \u2013 Mark Amery  Jun 4 '14 at 19:29 "], "answer_body": " The right MIME type is application/json  BUT  I experienced many situations where the browser type or the framework user needed:  text/html\n\napplication/javascript ", "question_id": 477816}, {"answer_votes": "67", "answer_comments": null, "answer_body": " I use the below  contentType: 'application/json',\ndata: JSON.stringify(SendData), ", "question_id": 477816}, {"answer_votes": "60", "answer_comments": null, "answer_body": " The Content-Type header should be set to ' application/json ' when posting. Server listening for the request should include \" Accept=application/json \".\nIn Spring MVC you can do it like this:  @RequestMapping(value=\"location\", method = RequestMethod.POST, headers = \"Accept=application/json\")  Add headers to the response:  HttpHeaders headers = new HttpHeaders();\nheaders.add(\"Content-Type\", \"application/json\"); ", "question_id": 477816}, {"answer_votes": "53", "answer_comments": [" That's Java EE too :: javax.ws.rs.core.MediaType \u2013 Eddie B  Feb 28 '14 at 3:01 "], "answer_body": " In Spring you have a defined type: MediaType.APPLICATION_JSON_VALUE which is equivalent to application/json . ", "question_id": 477816}, {"answer_votes": "49", "answer_comments": null, "answer_body": "  The application/json works great in PHP to store an array or object\n  data.   I use this code to put data in JSON on Google Cloud Storage (GCS) which is set publically viewable :  $context = stream_context_create([\n    'gs' => [\n        'acl'=>'public-read', \n        'Content-Type' => 'application/json',\n    ]\n]);\n\nfile_put_contents(\n    \"gs://BUCKETNAME/FILENAME.json\", \n    json_encode((object) $array), \n    false, \n    $context\n);  To get back the data is straight forward:  $data = json_decode(file_get_contents(\"gs://BUCKETNAME/FILENAME.json\")); ", "question_id": 477816}, {"answer_votes": "45", "answer_comments": [" The first part of your answer is wrong. \"application/jsonp\" is not a valid MIME type. The response body of a JSONP is just JavaScript, so one of the MIME-types for JavaScript has to be used. \u2013 Rob W  Aug 30 '13 at 16:14 "], "answer_body": " If the JSON is with padding then it will be application/jsonp . If the JSON is without padding then it will be application/json .  To deal with both, it is a good practice to use: 'application/javascript' without bothering whether it is with padding or without padding. ", "question_id": 477816}, {"answer_votes": "44", "answer_comments": null, "answer_body": " For JSON, I am using:  Content-Type: application/json  This is described in the IETF's JSON Data Interchange Format 7158 proposal, Section 1.2: Specifications of JSON . ", "question_id": 477816}, {"answer_votes": "38", "answer_comments": null, "answer_body": " PHP developers use this:  <?php\n    header(\"Content-type: application/json\");\n\n    // Do something here...\n?> ", "question_id": 477816}, {"answer_votes": "37", "answer_comments": null, "answer_body": " If you get data from REST API in JSON so you have to use content-type  For JSON data: Content-Type:application/json\nFor HTML data: Content-Type:text/html,\nFor XHTML data: Content-Type:application/xhtml+xml,\nFor XML data: Content-Type:text/xml, application/xml ", "question_id": 477816}, {"answer_votes": "37", "answer_comments": [" application/vnd.api+json seems to be specifically for apis using json:api , a very narrow specification with its own expectations and format, I don't understand it to be for any API that returns json. Please correct me if I'm wrong \u2013 Hilikus  Jul 25 '16 at 22:49  ", " @Hilikus: You are certainly right. I'll fix the answer to reflect this. \u2013 jgomo3  Jul 27 '16 at 0:53 "], "answer_body": " Extending the accepted responses, when you are using JSON in a REST context...  There is a strong argument about using application/x-resource+json and application/x-collection+json when you are representing REST resources and collections.  And if you decide to follow the jsonapi specification, you should use of application/vnd.api+json , as it is documented.  Altough there is not an universal standard, it is clear that the added semantic to the resources being transfered justify a more explicit Content-Type than just application/json .  Following this reasoning, other contexts could justify a more specific Content-Type . ", "question_id": 477816}, {"answer_votes": "22", "answer_comments": null, "answer_body": " JSON (JavaScript Object Notation) and JSONP (\"JSON with padding\") formats seems to be very similar and therefor it might be very confusing which MIME type they should be using. Even though the formats seems to be very similar, there are some subtle differences between them.  So whenever in any doubts, I have very simple approach (which works perfectly find in most cases), namely, go and check corresponding RFC document.  JSON  RFC 4627 (The application/json Media Type for JavaScript Object Notation (JSON)) is a specifications of JSON format. It says in section 6, that the MIME media type for JSON text is  application/json.  JSONP JSONP (\"JSON with padding\") is handled different way than JSON, in a browser. JSONP is treated as a regular JavaScript script and therefor it should use application/javascript, the current official MIME type for JavaScript. In many cases, however, text/javascript MIME type will work fine too.  Note that text/javascript has been marked as obsolete by RFC 4329 (Scripting Media Types) document and it is recommended to use application/javascript type instead. However, due to legacy reasons, text/javascript is still widely used and it has cross-browser support (which is not always a case with application/javascript MIME type, especially with older browsers). ", "question_id": 477816}, {"answer_votes": "11", "answer_comments": null, "answer_body": " Content-type: application/json - json Content-Type: application/javascript - json-P Content-type: application/x-javascript - javascript Content-type: text/javascript - javascript BUT obsolete, older IE versions used to use as html attribute. Content-type: text/x-javascript - JavaScript Media Types BUT obsolete Content-type: text/x-json - json before application/json got officially registered. ", "question_id": 477816}, {"answer_votes": "5", "answer_comments": null, "answer_body": " For specifying the interesting JSON result, you add \"application/json\" in your request header like below:  \"Accept:application/json\" is a desired response format.  \"Content-Type:application/json\" specifies the content format of your request, but sometimes you specify both application/json and application/xml , but the quality of these might be different. Which server will send back the different response formats, look at the example:  Accept:application/json;q=0.4,application/xml;q=8  This will return XML, because XML has higher quality. ", "question_id": 477816}, {"answer_votes": "4", "answer_comments": null, "answer_body": " The proper current standard is application/json . While the default encoding is UTF-8, it is worth mentioning that it could also be UTF-16 or utf-32. When JSON is\nwritten in UTF-16 or UTF-32, binary content-transfer-encoding must be used.  There is more information about json here: https://tools.ietf.org/html/rfc4627  more information on binary transfer encoding here: https://www.w3.org/Protocols/rfc1341/5_Content-Transfer-Encoding.html  ", "question_id": 477816}, {"answer_votes": "2", "answer_comments": null, "answer_body": " To complement the rest of the answers, the MIME type for JSON linked data (JSON-LD) according to W3C is:   application/ld+json  Type name: application  Subtype name: ld+json   Additionally, from the same source:   File extension(s) :  .jsonld  ", "question_id": 477816}, {"answer_votes": "1", "answer_comments": null, "answer_body": " JSON (JavaScript Object Notation) is a lightweight format that is used for data interchanging. It is based on a subset of JavaScript language (the way objects are built in JavaScript). As stated in the MDN, some JavaScript is not JSON, and some JSON is not JavaScript.  {\"employees\":[\n    { \"firstName\":\"John\", \"lastName\":\"Doe\" },\n    { \"firstName\":\"Anna\", \"lastName\":\"Smith\" },\n    { \"firstName\":\"Peter\", \"lastName\":\"Jones\" }\n]} ", "question_id": 477816}], "question_body": " I've been messing around with JSON for some time, just pushing it out as text and it hasn't hurt anybody (that I know of), but I'd like to start doing things properly.  I have seen so many purported \"standards\" for the JSON content type:   But which is correct, or best? I gather that there are security and browser support issues varying between them.  I know there's a similar question, What MIME type if JSON is being returned by a REST API? , but I'd like a slightly more targeted answer. ", "question_code": ["application/json\napplication/x-javascript\ntext/javascript\ntext/x-javascript\ntext/x-json\n"], "question_id": 477816}