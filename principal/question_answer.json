{"question_comments": [" Underscore has a plugin called underscore.string that includes this and a bunch of other great tools. \u2013 Aaron  Apr 15 '13 at 19:16  ", " what about: \u2013 Muhammad Umer  Nov 21 '14 at 19:25 ", " Simpler: \u2013 dr.dimitru  Nov 25 '15 at 4:00 ", " 3 pages of answers on making one letter capitalized \u2013 Andrew  Feb 4 at 3:10 ", " please someone say me why this question is so popular!!! is there anything i don't understand? 4K vote for answer this ? just why? \u2013 Nozar Safari  Feb 14 at 13:19  "], "question_title": "How do I make the first letter of a string uppercase in JavaScript?", "answers": [{"answer_votes": "4460", "answer_comments": [" substring is understood in more browsers than substr \u2013 mplungjan  Jul 6 '11 at 13:07 ", " to add to karim79 - its probably overkill to make it a function as javascript will do the same thing to the variable without the function wrapping.  I suppose it would be more clear using a function, but its native otherwise, why complicate it with a function wrapper? \u2013 Ross  Oct 24 '12 at 23:36 ", " Nevermind... \"\"[0].toUpperCase() fails \u2013 Crisfole  Jan 4 '13 at 19:42 ", " Shouldn't we also toLowerCase the slice(1) ? \u2013 hasen  Jan 30 '14 at 17:58 ", " No, because the OP gave this example: the Eiffel Tower -> The Eiffel Tower . Plus, the function is called capitaliseFirstLetter not capitaliseFirstLetterAndLowerCaseAllTheOthers . \u2013 ban-geoengineering  Aug 2 '14 at 10:24 "], "answer_body": " function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}  Some other answers modify String.prototype (this answer used to as well), but I would advise against this now due to maintainability (hard to find out where the function is being added to the prototype and could cause conflicts if other code uses the same name / a browser adds a native function with that same name in future). ", "question_id": 1026069}, {"answer_votes": "1167", "answer_comments": [" I like this solution cause it's like Ruby, and Ruby is sweet! :) I lower case all the other letters of the string so that it works exactly like Ruby: return this.charAt(0).toUpperCase() + this.substring(1).toLowerCase(); \u2013 ma11hew28  Mar 8 '11 at 18:21 ", " In this post-Prototype.js world, it is not suggested to change or extend the native objects. \u2013 rxgx  Jul 25 '11 at 22:24 ", " @rxgx - The \"don't extend\" boogeyman is now starting to die off (thank god), and people are pulling their heads out of the jSand and realizing it is just a language feature. Just because Prototype.js extended Object itself for a brief time, doesn't mean extending Natives is bad. You shouldn't do it if you're writing code for an unknown consumer (like an analytics script that goes on random sites), but other than that it's fine. \u2013 csuwldcat  May 19 '12 at 20:47 ", " @csuwldcat What if another library that you are using adds its own capitalize without you knowing it? Extending prototypes is bad form regardless if Prototype.js did it or not. With ES6, intrinsics will allow you to have your cake and eat it too. I think you might confusing the \"boogeyman\" dying off for people creating shims that comply with the ECMASCRIPT spec. These shims are perfectly fine because another library that added a shim would implement it in the same way.  However, adding your own non-spec intrinsics should be avoided. \u2013 Justin Meyer  Sep 17 '14 at 20:37 ", " Extending natives is EXTREMELY bad practice. Even if you say \"oh I'm never going to use this code with anything else\", you (or someone else) probably will. Then they will spend three days trying to figure out some weird math bug because someone extended Number.money() to deal with currency slightly different than your other library did. Seriously, I've seen this happen at a big company and it's not worth anyone's time debugging to figure out a library dev messed with the natives prototypes. \u2013 phreakhead  Dec 30 '14 at 1:03 "], "answer_body": " A more object-oriented approach:  String.prototype.capitalize = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n}  And then:  \"hello world\".capitalize();  =>  \"Hello world\" ", "question_id": 1026069}, {"answer_votes": "381", "answer_comments": [" OP is asking for a JS solution. \u2013 Antonio Max  Sep 23 '13 at 15:23 ", " $('#mystring_id').text(string).css('text-transform','capitalize'); \u2013 DonMB  Sep 24 '15 at 17:34 ", " Additionally, this only affects the display of the string - not the actual value. If it's in a form, e.g., the value will still be submitted as-is. \u2013 dmansfield  Jun 7 '16 at 13:26 ", " This is not the answer to the question !!! This is a CSS solution to a JS question.  Downvote. SO is about accurate answers, just because you found \"a solution\" doesn't make it \"the right solution\", and this is waaaay off the mark. \u2013 dudewad  Feb 23 '17 at 18:49  ", " This won't work in javascript contexts that don't have a DOM/CSS rendering (like Node.js). It really answers the question \"how do I present the first letter as if it were uppercase in a web browser while leaving the original javascript string unaltered?\" \u2013 jinglesthula  Feb 2 at 20:33  "], "answer_body": " In CSS:  p:first-letter {\n    text-transform:capitalize;\n} ", "question_id": 1026069}, {"answer_votes": "226", "answer_comments": [" This won\u2019t work in IE < 8, as those browsers don\u2019t support string indexing. IE8 itself supports it, but only for string literals \u2014 not for string objects. \u2013 Mathias Bynens  Feb 14 '12 at 11:33 ", " Figures IE would cry... \u2013 joelvh  Jul 13 '12 at 7:47 ", " who cares, IE7 market is less than 5%! and those are probably your gremma's and grempa's old machine. I say short code FTW! \u2013 vsync  Dec 3 '12 at 6:20 ", " @vsync your gremma and grempa may have a lot of money they are willing to spend on my site... \u2013 joshuahedlund  Mar 12 '14 at 14:40 ", " @vsync I just meant that depending on your user demographics, sometimes (though gratefully less and less as we pass 2014 and beyond) it is profitable to support old browsers like IE7... \u2013 joshuahedlund  Mar 14 '14 at 17:47 "], "answer_body": " Here is a shortened version of the popular answer that gets the first letter by treating the string as an array:  function capitalize(s)\n{\n    return s[0].toUpperCase() + s.slice(1);\n}  Update:  According to the comments below this doesn't work in IE 7 or below.  Update 2:  To avoid undefined for empty strings (see @njzk2's comment below ), you can check for an empty string:  function capitalize(s)\n{\n    return s && s[0].toUpperCase() + s.slice(1);\n} ", "question_id": 1026069}, {"answer_votes": "125", "answer_comments": [" It seems the initialization code doesn't make the difference either: jsperf.com/capitalize-first-letter-of-string/2 \u2013 user420667  Mar 22 '16 at 17:59  ", " One more reason not to extend the prototype. \u2013 cchamberlain  Jun 21 '16 at 18:47 ", " O_o... Why so bad with the prototype? \u2013 mvlabat  Aug 30 '17 at 11:24 ", " Note as well, that replacing .slice(1) with .substr(1) would enhance performance even further. \u2013 Przemek  Sep 23 '17 at 19:37 "], "answer_body": " If you're interested in the performance of a few different methods posted:  Here are the fastest methods based on this jsperf test (ordered from fastest to slowest).  As you can see, the first two methods are essentially comparable in terms of performance, whereas altering the String.prototype is by far the slowest in terms of performance.  // 10,889,187 operations/sec\nfunction capitalizeFirstLetter(string) {\n    return string[0].toUpperCase() + string.slice(1);\n}\n\n// 10,875,535 operations/sec\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n// 4,632,536 operations/sec\nfunction capitalizeFirstLetter(string) {\n    return string.replace(/^./, string[0].toUpperCase());\n}\n\n// 1,977,828 operations/sec\nString.prototype.capitalizeFirstLetter = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n}  ", "question_id": 1026069}, {"answer_votes": "117", "answer_comments": [" \"...but not change the case of any of the other letters\". This is not a correct answer to the question the OP asked. \u2013 Carlos Mu\u00f1oz  Jul 1 '14 at 19:31 ", " @CarlosMu\u00f1oz if you read the opening sentence he says this is for a different case. \u2013 Tom Hart  Sep 5 '14 at 8:25 ", " @TomHart That's exactly why it's not a solution for the question. It should be a comment or another question and answer \u2013 Carlos Mu\u00f1oz  Sep 5 '14 at 13:38  ", " I do agree with you on that, but I can see a lot of people ending up here looking to do what this answer does. \u2013 Tom Hart  Sep 5 '14 at 13:43 "], "answer_body": " For another case I need it to capitalize the first letter and lowercase the rest. The following cases made me change this function:  //es5\nfunction capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\ncapitalise(\"alfredo\")  // => \"Alfredo\"\ncapitalise(\"Alejandro\")// => \"Alejandro\ncapitalise(\"ALBERTO\")  // => \"Alberto\"\ncapitalise(\"ArMaNdO\")  // => \"Armando\"\n\n// es6 using destructuring \nconst capitalize = ([first,...rest]) => first.toUpperCase() + rest.join('').toLowerCase(); ", "question_id": 1026069}, {"answer_votes": "97", "answer_comments": [" I found string.replace(string[0], string[0].toUpperCase()); to be a lot easier \u2013 Gcap  Mar 20 '17 at 17:46 ", " Just a heads up - with the CSS solution the capitalised character cannot be visually selected in Chrome on Ubuntu (probably other browsers too) while selecting the text. It still gets selected and text is copied if you press Ctrl+C though. \u2013 Andris  Jul 25 '17 at 10:13 ", " The second solution, as you wrote it, makes the rest of the string lower case. Removing that would be closer to the original request. (\"the Eiffel Tower\" keeps the capitalization on the E and T) \u2013 Ward D.S.  Sep 1 '17 at 7:52 ", " 1) Use two colon notation of ::first-letter as this variant is in line with CSS3 philosophy when it comes to those colons, 2) use .substring(\u2026) rather than .slice(\u2026) as it has better performance, 3) OP didn't wanted to lowercase all other characters, 4) Don't modify prototype of objects you don't own \u2013 Przemek  Oct 11 '17 at 16:50  "], "answer_body": " Here are the best solutions:  First Solution In CSS:  p {\n  text-transform: capitalize;\n}  Second solution :  function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}  You could also add it to the String.prototype so you could chain it with other methods:  String.prototype.capitalizeFirstLetter = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1).toLowerCase();\n}  and use it like this:  'string'.capitalizeFirstLetter() // String  Third Solution :  function ucFirstAllWords( str )\n{\n    var pieces = str.split(\" \");\n    for ( var i = 0; i < pieces.length; i++ )\n    {\n        var j = pieces[i].charAt(0).toUpperCase();\n        pieces[i] = j + pieces[i].substr(1).toLowerCase();\n    }\n    return pieces.join(\" \");\n} ", "question_id": 1026069}, {"answer_votes": "60", "answer_comments": null, "answer_body": " var string = \"hello world\";\nstring = string.charAt(0).toUpperCase() + string.slice(1);\nalert(string); ", "question_id": 1026069}, {"answer_votes": "57", "answer_comments": [" Re-read question: I want to capitalize the first character of a string, but not change the case of any of the other letters. \u2013 JimmyPena  Nov 30 '11 at 19:13 ", " I know I did. I'd add one thing, in case the entire string starts capitalized: pieces[i] = j + pieces[i].substr(1).toLowerCase(); \u2013 Malovich  Dec 20 '12 at 21:16 ", " Another solution to this case:  function capitaliseFirstLetters(s) {     return s.split(\" \").map(function(w) {         return w.charAt(0).toUpperCase() + w.substr(1)     }).join(\" \") }  Can be a nice one-liner if it's not put into a function. \u2013 Luke Channings  Mar 10 '13 at 21:36  ", " Would be better to first lowercase the whole string \u2013 Magico  Jul 6 '16 at 10:36  ", " Other than this function not answering the question, it's actually also overcomplicated. s => s.split(' ').map(x => x[0].toUpperCase() + x.slice(1)).join(' ') \u2013 OverCoder  Jul 28 '17 at 18:10  "], "answer_body": " Capitalize the first letter of all words in a string:  function ucFirstAllWords( str )\n{\n    var pieces = str.split(\" \");\n    for ( var i = 0; i < pieces.length; i++ )\n    {\n        var j = pieces[i].charAt(0).toUpperCase();\n        pieces[i] = j + pieces[i].substr(1);\n    }\n    return pieces.join(\" \");\n} ", "question_id": 1026069}, {"answer_votes": "42", "answer_comments": [" There is a better way of doing this without modifying the String prototype. \u2013 Dave Kennedy  Jul 9 '13 at 20:42 ", " @davidkennedy85 Sure! But this is the simple way, not the best way... ;-) \u2013 yckart  Jul 9 '13 at 22:01  "], "answer_body": " We could get the first character with one of my favorite RegExp , looks like a cute smiley: /^./  String.prototype.capitalize = function () {\n  return this.replace(/^./, function (match) {\n    return match.toUpperCase();\n  });\n};  And for all coffee-junkies:  String::capitalize = ->\n  @replace /^./, (match) ->\n    match.toUpperCase()  ...and for all guys who think that there's a better way of doing this, without extending native prototypes:  var capitalize = function (input) {\n  return input.replace(/^./, function (match) {\n    return match.toUpperCase();\n  });\n}; ", "question_id": 1026069}, {"answer_votes": "42", "answer_comments": [" I think this is a poor solution for 2 reasons: Modifying the prototype of a primitive is a bad idea. If the spec changes and they decide to pick 'capitalize' as a new proto property name, you're breaking core language functionality. Also, The method name chosen is poor. At first glance, I would think this will capitalize the entire string. Using a more descriptive name such as PHP's ucFirst or something similar might be a better idea. \u2013 dudewad  Feb 22 '17 at 1:08 "], "answer_body": " String.prototype.capitalize = function(allWords) {\n   return (allWords) ? // if all words\n      this.split(' ').map(word => word.capitalize()).join(' ') : //break down phrase to words then  recursive calls until capitalizing all words\n      this.charAt(0).toUpperCase() + this.slice(1); // if allWords is undefined , capitalize only the first word , mean the first char of the whole string\n}  And then:  \"capitalize just the first word\".capitalize(); ==> \"Capitalize just the first word\"\n \"capitalize all words\".capitalize(true); ==> \"Capitalize All Words\"  Update Nov.2016 (ES6), just for FUN :  const capitalize = (string = '') => [...string].map(    //convert to array with each item is a char of string by using spread operator (...)\n    (char, index) => index ? char : char.toUpperCase()  // index true means not equal 0 , so (!index) is the first char which is capitalized by `toUpperCase()` method\n ).join('')                                             //return back to string  then capitalize(\"hello\") // Hello ", "question_id": 1026069}, {"answer_votes": "41", "answer_comments": [" Since, version 3.0.0 , Lo-Dash has this string method available by default. Just like described in this answer: _.capitalize(\"foo\") === \"Foo\" . \u2013 bardzusny  Apr 9 '15 at 19:09  ", " Also there are usefull underscore.js function called humanize . It converts an underscored, camelized, or dasherized string into a humanized one. Also removes beginning and ending whitespace, and removes the postfix '_id'. \u2013 Stepan Zakharov  May 7 '15 at 14:11  ", " From version 4*, Lodash also lowercase() every other letter, be careful! \u2013 Igor Loskutov  Feb 13 '16 at 8:33 "], "answer_body": " If you use underscore.js or Lo-Dash , the underscore.string library provides string extensions, including capitalize:   _.capitalize(string) Converts first letter of the string to\n  uppercase.   Example:  _.capitalize(\"foo bar\") == \"Foo bar\" ", "question_id": 1026069}, {"answer_votes": "41", "answer_comments": [" I think the preference should be for vanilla Js as most people will not download an entire framework only to capitalize a string. \u2013 GGG  Dec 6 '15 at 23:49 ", " sure, but most people probably have lodash already loaded. \u2013 chovy  Dec 7 '15 at 7:20 ", " In all my projects so far I've never used lodash. Don't forget either that most people on google will end on this page, and listing a framework as an alternative is fine, but not as a main answer. \u2013 GGG  Dec 8 '15 at 14:44  ", " Since other answers use vanilla js, its nice to have an answer like this, since a lot of us use lodash/underscore. \u2013 Zagen  Dec 7 '16 at 16:13 ", " This is not the correct answer as the OP asks for now to do it in Javascript, not a Javascript library, which imports an entire library as a dependency to your project. Don't use it. \u2013 dudewad  Feb 22 '17 at 1:06 "], "answer_body": " If you're already (or considering) using lodash , the solution is easy:  _.upperFirst('fred');\n// => 'Fred'\n\n_.upperFirst('FRED');\n// => 'FRED'\n\n_.capitalize('fred') //=> 'Fred'  See their docs: https://lodash.com/docs#capitalize  _.camelCase('Foo Bar'); //=> 'fooBar'  https://lodash.com/docs/4.15.0#camelCase  _.lowerFirst('Fred');\n// => 'fred'\n\n_.lowerFirst('FRED');\n// => 'fRED'\n\n_.snakeCase('Foo Bar');\n// => 'foo_bar'  Vanilla js for first upper case:  function upperCaseFirst(str){\n    return str.charAt(0).toUpperCase() + str.substring(1);\n} ", "question_id": 1026069}, {"answer_votes": "34", "answer_comments": [" @Simon It's not stated that the string is necessarily going to be output as part of a HTML document - CSS is only going to be of use if it is. \u2013 Adam Hepton  Jan 18 '12 at 9:32 ", " Adam, true, but I'd guess that over 95% of the Javascript out there is used with HTML & CSS.  Unfortunately, the \"capitalize\" statement actually capitalizes every word , so you'd still need JS to capitalize only the first letter of the string. \u2013 Simon East  Jan 21 '12 at 4:24 ", " Incorrect, Dinesh. He said the first character of the string . \u2013 Simon East  Jun 26 '12 at 0:02  ", " This answer, despite having a ridiculous number of upvotes, is just wrong, as it will capitalize the first letter of every word. @Ryan, you'll earn a Disciplined badge if you delete it. Please do so. \u2013 Dan Dascalescu  Nov 7 '12 at 6:06  ", " Agree with @DanDascalescu - Ryan's answer is completely wrong. \u2013 Timo  Nov 14 '12 at 13:15 "], "answer_body": " It seems to be easier in CSS:  <style type=\"text/css\">\n    p.capitalize {text-transform:capitalize;}\n</style>\n<p class=\"capitalize\">This is some text.</p>  This is from CSS text-transform Property (at W3Schools ). ", "question_id": 1026069}, {"answer_votes": "33", "answer_comments": [" Please explain the code and how it works \u2013 Ram  Jul 14 '15 at 14:47 ", " Done @Ram. Also included examples. \u2013 Fredrik A.  Jul 23 '15 at 13:14  "], "answer_body": " function capitalize(s) {\n    // returns the first letter capitalized + the string from index 1 and out aka. the rest of the string\n    return s[0].toUpperCase() + s.substr(1);\n}\n\n\n// examples\ncapitalize('this is a test');\n=> 'This is a test'\n\ncapitalize('the Eiffel Tower');\n=> 'The Eiffel Tower'\n\ncapitalize('/index.html');\n=> '/index.html' ", "question_id": 1026069}, {"answer_votes": "33", "answer_comments": [" Probably worth noting that this will also convert things like acronyms to lowercase, so maybe not the best idea in most cases \u2013 monokrome  Apr 25 '16 at 5:08 ", " Also,did GAMITG really make an edit just to remove a piece of whitespace from a non-code portion of the post? O_O \u2013 monokrome  Aug 28 '16 at 3:25 "], "answer_body": " If you are wanting to reformat all-caps text, you might want to modify the other examples as such:  function capitalize (text) {\n    return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n}  This will ensure that the following text is changed:  TEST => Test\nThis Is A TeST => This is a test ", "question_id": 1026069}, {"answer_votes": "33", "answer_comments": null, "answer_body": " var capitalized = yourstring[0].toUpperCase() + yourstring.substr(1); ", "question_id": 1026069}, {"answer_votes": "29", "answer_comments": [" text-transform: uppercase; doesn't work. \u2013 Green  Oct 3 '17 at 19:55 ", " @Green: it does , are you sure you specified selector with two colons? \u2013 Przemek  Oct 5 '17 at 16:48 ", " You actually don't want to use the plus sign (+) as a concatenation method in ES6. You'll want to use template literals: eslint.org/docs/rules/prefer-template \u2013 Noah David  Mar 19 at 15:37 "], "answer_body": " CSS only  p::first-letter {\n  text-transform: uppercase;\n}   Despite being called ::first-letter , it applies to the first character , i.e. in case of string %a , this selector would apply to % and as such a would not be capitalized.  In IE9+ or IE5.5+ it's supported in legacy notation with only one colon ( :first-letter ).   ES2015 one-liner  Since there are numerous answers, but none in ES2015 that would solve original problem efficiently, I came up with the following:  const capitalizeFirstChar = str => str.charAt(0).toUpperCase() + str.substring(1);  Remarks   parameters => function is so called arrow function .  I went with name capitalizeFirstChar instead of capitalizeFirstLetter , because OP didn't asked for code that capitalizes the first letter in the entire string, but the very first char (if it's letter, of course).  const gives us the ability to declare capitalizeFirstChar as constant, which is desired since as a programmer you should always explicitly state your intentions.  In the benchmark I performed there was no significant difference between string.charAt(0) and string[0] . Note however, that string[0] would be undefined for empty string, so it should be rewritten to string && string[0] , which is way too verbose, compared to the alternative.  string.substring(1) is faster than string.slice(1) .   Benchmark   4,956,962 ops/s \u00b13.03% for this solution,  4,577,946 ops/s \u00b11.2% for the most voted answer.  Created with JSBench.me on Google Chrome 57.   ", "question_id": 1026069}, {"answer_votes": "25", "answer_comments": [" Regular expressions are overkill for this. \u2013 Anthony Sottile  Jun 14 '12 at 2:40 ", " This answer is just wrong, as it will capitalize the first letter of every word, while the asker specifically asked for capitalizing only the first letter. @Murat, you'll earn a Disciplined badge if you delete it. Please do so. \u2013 Dan Dascalescu  Nov 7 '12 at 6:10 ", " +1, this is what I was really looking for. There is a minor bug though, it ought to be return.this.toLocaleLowerCase().replace( ... \u2013 tomdemuyt  Jan 14 '13 at 21:55  ", " +1, I found this page looking for a javascript version of phps ucfirst, which I suspect is how most people find it. \u2013 Benubird  Apr 9 '13 at 13:58 ", " @DanDascalescu I found this useful, so +1 utilitarianism, and -1 anal-retentiveness. He included an example, so its function is clear. \u2013 Travis Webb  Aug 2 '13 at 10:24  "], "answer_body": " String.prototype.capitalize = function(){\n    return this.replace( /(^|\\s)([a-z])/g , function(m,p1,p2){ return p1+p2.toUpperCase();\n    } );\n};  Usage:  capitalizedString = someString.capitalize();  This is a text string => This Is A Text String ", "question_id": 1026069}, {"answer_votes": "24", "answer_comments": null, "answer_body": " var str = \"test string\";\nstr = str.substring(0,1).toUpperCase() + str.substring(1); ", "question_id": 1026069}, {"answer_votes": "21", "answer_comments": [" Use String.substring() or String.slice() ... Don't use substr() - it's deprecated. \u2013 James  Jun 22 '09 at 11:11 ", " @999: where does it say that substr() is deprecated? It's not , even now, three years later, let alone back in 2009 when you made this comment. \u2013 Dan Dascalescu  Nov 7 '12 at 6:12 ", " substr() may not be marked as deprecated by any popular ECMAScript implementation (I doubt it's not going to disappear anytime soon), but it's not part of the ECMAScript spec. The 3rd edition of the spec mentions it in the non-normative annex in order to \"suggests uniform semantics for such properties without making the properties or their semantics part of this standard\". \u2013 Peter Rust  Nov 21 '12 at 22:05 ", " Having 3 methods that do the same thing ( substring , substr and slice ) is too many, IMO. I always use slice because it supports negative indexes, it doesn't have the confusing arg-swapping behavior and its API is similar to slice in other languages. \u2013 Peter Rust  Nov 21 '12 at 22:12 "], "answer_body": " Here is a function called ucfirst() (short for \"upper case first letter\"):  function ucfirst(str) {\n    var firstLetter = str.substr(0, 1);\n    return firstLetter.toUpperCase() + str.substr(1);\n}  You can capitalise a string by calling ucfirst(\"some string\") -- for example,  ucfirst(\"this is a test\") --> \"This is a test\"  It works by splitting the string into two pieces.  On the first line it pulls out firstLetter and then on the second line it capitalises firstLetter by calling firstLetter.toUpperCase() and joins it with the rest of the string, which is found by calling str.substr(1) .  You might think this would fail for an empty string, and indeed in a language like C you would have to cater for this. However in JavaScript, when you take a substring of an empty string, you just get an empty string back. ", "question_id": 1026069}, {"answer_votes": "19", "answer_comments": [" This should be the accepted answer. The main solution shouldn't use a framework like underscore. \u2013 Adam McArthur  Sep 26 '15 at 7:58  ", " Save some keystrokes ;) stringVal.replace(/^./, stringVal[0].toUpperCase()); \u2013 Alfredo Delgado  Oct 15 '15 at 19:30 ", " Yes, that also works. \u2013 Raju Bera  Oct 26 '15 at 20:54 ", " Regex shouldn't be used where not necessary. It's greatly inefficient and it doesn't make code any more concise either. Moreover, stringVal[0] would be undefined for empty stringVal , and as such attempt to access property .toUpperCase() would throw an error. \u2013 Przemek  Sep 23 '17 at 19:28 "], "answer_body": " Checkout this solution:  var stringVal = 'master';\nstringVal.replace(/^./, stringVal[0].toUpperCase()); // returns Master ", "question_id": 1026069}, {"answer_votes": "18", "answer_comments": [" Even though this has quite some votes, this is by far the slowest solution posted here. I've put together a little speedtest with the most popular answers from this post, here: forwebonly.com/\u2026 \u2013 Robin van Baalen  Feb 13 '13 at 13:17 ", " @RobinvanBaalen Your link is now broken.  Got an updated one? \u2013 Brad  Jan 23 '17 at 3:29 ", " Regexp is overkill for this, prefer the simpler : str.charAt(0).toUpperCase() + str.slice(1) \u2013 Simon  Jan 23 '17 at 13:36  ", " @Brad unfortunately not \u2013 Robin van Baalen  Jan 23 '17 at 18:54 ", " Often times, if you want to solve your problem with regex, you end up with two problems. \u2013 Przemek  Sep 23 '17 at 19:18 "], "answer_body": " yourString.replace(/^[a-z]/, function(m){ return m.toUpperCase() });  (You may encapsulate it in a function or even add it to the String prototype if you use it frequently.) ", "question_id": 1026069}, {"answer_votes": "16", "answer_comments": [" nice name for the function! It's name is identical to the PHP equivalent. There is actually an entire library of PHP functions written in JS; it's called PHP.js and to be found on http://phpjs.org \u2013 Hussam  Dec 8 '11 at 14:29  ", " One liner: string[0].toUpperCase() + string.substring(1) \u2013 dr.dimitru  Nov 25 '15 at 4:01 ", " @Hussam the URL changed to: locutusjs.io \u2013 pixel 67  May 5 '16 at 10:08 ", " @dr.dimitru wont work with empty string \u2013 TarranJones  May 6 '16 at 16:25 ", " @TarranJones here is bulletproof one liner: (string[0] || '').toUpperCase() + string.substring(1) \u2013 dr.dimitru  May 6 '16 at 18:20 "], "answer_body": " The ucfirst function works if you do it like this.  function ucfirst(str) {\n    var firstLetter = str.slice(0,1);\n    return firstLetter.toUpperCase() + str.substring(1);\n}  Thanks J-P for the aclaration. ", "question_id": 1026069}, {"answer_votes": "12", "answer_comments": null, "answer_body": " You can do it in one line like this  string[0].toUpperCase() + string.substring(1) ", "question_id": 1026069}, {"answer_votes": "12", "answer_comments": null, "answer_body": " This is the 2018 ES6 Solution :    const str = 'the Eiffel Tower';\r\nconst newStr = `${str[0].toUpperCase()}${str.slice(1)}`;\r\nconsole.log('Original String:', str); // the Eiffel Tower\r\nconsole.log('New String:', newStr); // The Eiffel Tower    ", "question_id": 1026069}, {"answer_votes": "11", "answer_comments": [" This is a JavaScript question. \u2013 Cobby  May 6 '14 at 0:54 ", " @Cobby - And this is a coffeescript answer. \u2013 longda  May 6 '14 at 19:29 ", " I think what Cobby is trying to say that some idiots are trying to accomplish every simple JavaScript task using stupid libraries while the very same solution in vanilla is as simple as String.prototype.capitalize = function () {    return this.substring(0,1).toUpperCase() + this.substring(1).toLowerrCase() } \u2013 Shiala  Jul 16 '14 at 17:17 ", " Coffeescript is a preprocessor language, not a library... A library for this would be silly \u2013 TaylorMac  Jul 30 '14 at 20:18  ", " Let the record state: CoffeeScript is a little language that compiles into JavaScript. Furthermore, The golden rule of CoffeeScript is: \"It's just JavaScript.\" I think if someone truly understands those two sentences, you'll understand why I included this answer.  Hopefully that cleared things up for everyone.  Source: coffeescript.org \u2013 longda  Jul 30 '14 at 23:28 "], "answer_body": " In CoffeeScript , add to the prototype for a string:  String::capitalize = ->\n  @substr(0, 1).toUpperCase() + @substr(1)  Usage would be:  \"woobie\".capitalize()  Which yields:  \"Woobie\" ", "question_id": 1026069}, {"answer_votes": "10", "answer_comments": [" There was no reference to an input field or the requirement of an event to handle this. Aside from that, field.value could be shortened with a variable for readability. \u2013 Andrew Bestic  May 17 '13 at 2:29 "], "answer_body": " // Uppercase first letter\nfunction ucfirst(field) {\n    field.value = field.value.substr(0, 1).toUpperCase() + field.value.substr(1);\n}  Usage:  <input type=\"text\" onKeyup=\"ucfirst(this)\" /> ", "question_id": 1026069}, {"answer_votes": "10", "answer_comments": null, "answer_body": " It's always better handle these kinds of stuffs using CSS first, in general, if you can solve something using CSS, go for that first, then try JavaScript to solve your problems, so in this case try using :first-letter in CSS and apply text-transform:capitalize;   So try creating class for that, so you can use it globally, for example: .first-letter-uppercase and add something like below in your CSS:  .first-letter-uppercase:first-letter {\n    text-transform:capitalize;\n}  Also the alternative option is JavaScript, so the best gonna be something like this:  function capitalizeTxt(txt) {\n  return txt.charAt(0).toUpperCase() + txt.slice(1); //or if you want lowercase the rest txt.slice(1).toLowerCase();\n}  and call it like:  capitalizeTxt('this is a test'); // return 'This is a test'\ncapitalizeTxt('the Eiffel Tower'); // return 'The Eiffel Tower'\ncapitalizeTxt('/index.html');  // return '/index.html'  If you  want to reuse it over and over, it's better attach it to javascript native String, so something like below:  String.prototype.capitalizeTxt = String.prototype.capitalizeTxt || function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n}  and call it as below:  'this is a test'.capitalizeTxt(); // return 'This is a test'\n'the Eiffel Tower'.capitalizeTxt(); // return 'The Eiffel Tower'\n'/index.html'.capitalizeTxt();  // return '/index.html' ", "question_id": 1026069}, {"answer_votes": "8", "answer_comments": [" As it is now it won't return anything. \u2013 S\u00e9bastien  Sep 25 '14 at 17:13 ", " @S\u00e9bastien I attached jsfiddle source and result link \u2013 AMIC MING  Sep 25 '14 at 17:21 "], "answer_body": " var str = \"ruby java\";\n\nalert(str.charAt(0).toUpperCase() + str.substring(1));  it will return \"Ruby java\"  http://jsfiddle.net/amitpandya/908c8e2v/  result link in jsfiddle ", "question_id": 1026069}, {"answer_votes": "8", "answer_comments": [" Man, this should be at the first page at very least \u2013 YakovL  Dec 28 '17 at 16:42 ", " I would go str = str.charAt(0).toLocaleUpperCase() + str.substr(1); , though, to make this shorter \u2013 YakovL  Dec 28 '17 at 20:31  "], "answer_body": " Posting an edit of @salim's answer to include locale letter transformation.  var str = \"test string\";\nstr = str.substring(0,1).toLocaleUpperCase() + str.substring(1); ", "question_id": 1026069}, {"answer_votes": "8", "answer_comments": [" Stupid question but how would you add this to the String prototype in coffeescript? \u2013 longda  Aug 15 '12 at 17:54 "], "answer_body": " CoffeeScript  ucfirst = (str) -> str.charAt(0).toUpperCase() + str.slice(1)  As String prototype method:  String::capitalize = -> @charAt(0).toUpperCase() + @slice(1) ", "question_id": 1026069}, {"answer_votes": "8", "answer_comments": null, "answer_body": " One possible solution:  function ConvertFirstCharacterToUpperCase(text) {\n    return text.substr(0, 1).toUpperCase() + text.substr(1);    \n}  Use this:  alert(ConvertFirstCharacterToUpperCase(\"this is string\"));  Here is working JS Fiddle ", "question_id": 1026069}, {"answer_votes": "8", "answer_comments": null, "answer_body": " Using prototypes  String.prototype.capitalize = function () {\n    return this.charAt(0) + this.slice(1).toLowerCase();\n  }  or Using functions  function capitalize(str) {\nreturn str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n} ", "question_id": 1026069}, {"answer_votes": "6", "answer_comments": [" `String.prototype.capitalize = String.prototype.capitalize || function() {     var first = this.substring(0,1);     return first.toUpperCase() + this.substring(1); }; \u2013 Dhiraj Himani  Feb 6 '17 at 7:47  "], "answer_body": " If you go with one of the regex answers, remember they will only work with ASCII characters. All your unicode letters will not be uppercased. The XRegExp library and its unicode plugins solve this problem if you want to stick with regexps. So something like this would work:  String.prototype.capitalize = function () {\n    return this.replace(XRegExp(\"^\\\\p{L}\"), function ($0) { return $0.toUpperCase(); })\n}  Considering that it still doesn't cover all possibilities (combined characters, see http://www.regular-expressions.info/unicode.html ) it seems easier to just use the .charAt(0).toUpperCase() approach. ", "question_id": 1026069}, {"answer_votes": "5", "answer_comments": null, "answer_body": " Or you could use Sugar.js  capitalize()  Example:  'hello'.capitalize()           -> 'Hello'\n'hello kitty'.capitalize()     -> 'Hello kitty'\n'hello kitty'.capitalize(true) -> 'Hello Kitty' ", "question_id": 1026069}, {"answer_votes": "5", "answer_comments": null, "answer_body": " Here's my version, I think it's easy to understand and elegant too.  var str = \"foo bar baz\";\n\n//capitalize\nstr.split(\" \").map(function(i){return i[0].toUpperCase() + i.substring(1)}).join(\" \");\n//return \"Foo Bar Baz\"\n\n//capitalize first letter\nstr.charAt(0).toUpperCase() + str.slice(1)\n//return \"Foo bar baz\" ", "question_id": 1026069}, {"answer_votes": "5", "answer_comments": null, "answer_body": " var capitalizeMe = \"string not starting with capital\"  Capitalize with substr  var capitalized = capitalizeMe.substr(0, 1).toUpperCase() + capitalizeMe.substr(1); ", "question_id": 1026069}, {"answer_votes": "5", "answer_comments": null, "answer_body": " function capitalize(string) {\n    return string.replace(/^./, capitalize.call.bind(\"\".toUpperCase));\n} ", "question_id": 1026069}, {"answer_votes": "5", "answer_comments": [" jQuery to update user's input capitalized:  $('.on-change-capitalize').change(function(){    $(this).val($(this).val().capitalize(true, true)); }); btw, it also works with utf8 chars ;) thanks! \u2013 Lukas Liesis  Apr 4 '14 at 6:51  "], "answer_body": " Here is my attempt to make a universal function that can capitalize only the first letter, or the first letter of each word, including words separated by a dash (like some first names in French).  By default, the function capitalizes only the first letter and leave the rest untouched.  Parameters :  lc : true to lowercase the rest of the word(s) all : true to capitalize each words  if (typeof String.prototype.capitalize !== 'function') {\n    String.prototype.capitalize = function(lc, all) {\n        if (all) {\n            return this.split( \" \" ).map( function(currentValue, index, array ) {\n                return currentValue.capitalize( lc );\n            }, this).join(\" \").split(\"-\").map(function(currentValue, index, array) {\n                return currentValue.capitalize(false);\n            }, this).join(\"-\");\n        }\n        else {\n            return lc ? this.charAt(0).toUpperCase() + this.slice(1 ).toLowerCase() : this.charAt(0).toUpperCase() + this.slice(1);\n        }\n    }\n} ", "question_id": 1026069}, {"answer_votes": "4", "answer_comments": null, "answer_body": " Okay, so I am new to JavaScript. I wasn't able to get the above to work for me. So I started putting it together myself. Here's my idea (about the same, different and working syntax):  String name = request.getParameter(\"name\");\nname = name.toUpperCase().charAt(0) + name.substring(1);\nout.println(name);  Here I get the variable from a form (it also works manually):  String name = \"i am a Smartypants...\";\nname = name.toUpperCase().charAt(0) + name.substring(1);\nout.println(name);  Output: \"I am a Smartypants...\"; ", "question_id": 1026069}, {"answer_votes": "4", "answer_comments": null, "answer_body": " Like it:  function capitalize(string,a) {\n    var tempstr = string.toLowerCase();\n    if (a == false || a == undefined)\n        return tempstr.replace(tempstr[0], tempstr[0].toUpperCase());\n    else {\n        return tempstr.split(\" \").map(function (i) { return i[0].toUpperCase() + i.substring(1) }).join(\" \");\n    }\n}\n\n\ncapitalize('stack overflow yeah!',true)); //Stack Overflow Yeah!\n\ncapitalize('stack stack stack stack overflow yeah!'));//Stack overflow yeah!  https://jsfiddle.net/dgmLgv7b/ ", "question_id": 1026069}, {"answer_votes": "4", "answer_comments": [" Oneliners? Sure, extremely inefficient? No, regex is not cheap. \u2013 Harry Svensson  Feb 4 '16 at 21:08 "], "answer_body": " A one-liner:    'string'.replace(/(^[a-z])/,function (p) { return p.toUpperCase(); } )    ", "question_id": 1026069}, {"answer_votes": "4", "answer_comments": null, "answer_body": " For just capitalizing the first letter and make the rest of the string lower case:  function capitalize(str) {\n     var splittedEnter = str.split(\" \");\n     var capitalized;\n     var capitalizedResult;\n     for (var i = 0 ; i < splittedEnter.length ; i++){\n         capitalized = splittedEnter[i].charAt(0).toUpperCase();\n         splittedEnter[i] = capitalized + splittedEnter[i].substr(1).toLowerCase();\n    }\n    return splittedEnter.join(\" \");\n}\n\ncapitalize(\"tHiS wiLL be alL CapiTaLiZED.\");  The result will be:   This Will Be All Capitalized.   edit: Thank Peter Mortensen for edit :) ", "question_id": 1026069}, {"answer_votes": "4", "answer_comments": [" Please edit with more information. Code-only and \"try this\" answers are discouraged, because they contain no searchable content, and don't explain why someone should \"try this\". \u2013 abarisone  Aug 30 '16 at 9:22 "], "answer_body": " A small improvement - every word in titlecase.  String.prototype.toTitleCase = function(){\n    return this.replace(/\\b(\\w+)/g, function(m,p){ return p[0].toUpperCase() + p.substr(1).toLowerCase() });\n}\n\nvar s = 'heLLo wOrLD';\nconsole.log(s.toTitleCase()); // Hello World ", "question_id": 1026069}, {"answer_votes": "3", "answer_comments": null, "answer_body": " Firstly just wanted to clear up what capitalize means in this context.\n \" T his S tring I s C apitalized\" Reliable source   You can see from the example provided this is not what the OP is looking for. What it should say is \"How do i make the first letter of a string uppercase\" ( Not capitalize string )  function ucfirst (str) {\n    return typeof str !=\"undefined\"  ? (str += '', str[0].toUpperCase() + str.substr(1)) : '' ;\n}  Explained  typeof str !=\"undefined\" // is str set\n? // true \nstr += '' // turn the string variable into a string \nstr[0].toUpperCase() //get the first character and make it upper case\n+ // add\nstr.substr(1) // string starting from the index 1 ( starts at 0) \n: // false \n''; //return empty string  This will work with any argument or no argument at all.  undefined         === \"\"\n\"\"                === \"\"\n\"my string\"       === \"My string\"\nnull              === \"Null\"\nundefined         === \"\";\nfalse             === \"False\"\n0                 === \"0\"\ntrue              === \"True\"\n[]                === \"\"\n[true,0,\"\",false] === \"True,0,,false\" ", "question_id": 1026069}, {"answer_votes": "3", "answer_comments": null, "answer_body": "   function capitalizeEachWord(str) {\r\n    return str.replace(/\\w\\S*/g, function(txt) {\r\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n    });\r\n}\r\n\r\ndocument.write(capitalizeEachWord('foo BAR God bAD'));    ", "question_id": 1026069}, {"answer_votes": "2", "answer_comments": null, "answer_body": " I have been trying to do same (that is; capitalize the first letter in a string while it is being typed) using jQuery. I searched all through the web for the answer but couldn't find it. However I was able to get a work around using the on() function in jQuery like so:  $(\"#FirstNameField\").on(\"keydown\",function(e){\n    var str = $(\"#FirstNameField\").val();\n    if(str.substring()===str.substring(0,1)){\n        $(\"#FirstNameField\").val(str.substring(0,1).toUpperCase());\n    } \n});  This function actually capitalizes the first letter while the data entrant is typing continuously. ", "question_id": 1026069}, {"answer_votes": "2", "answer_comments": [" Won't this result in \"the Eiffel Tower\" being turned into \"The eiffel tower\"? The original question involved not changing the case of the other letters. \u2013 Andrew Myers  Mar 28 '16 at 20:12 ", " Yes @AndrewMyers i made the edit which wouldn't change the case of the other letters \u2013 Irfan Syed  Mar 30 '16 at 15:10 "], "answer_body": " This does the same action:  var newStr = string.slice(0,1).toUpperCase() + string.slice(1); ", "question_id": 1026069}, {"answer_votes": "2", "answer_comments": null, "answer_body": " If there's Lodash in your project, use upperFirst . ", "question_id": 1026069}, {"answer_votes": "2", "answer_comments": null, "answer_body": " function cap(input) {\n    return input.replace(/[\\.\\r\\n\\t\\:\\;\\?\\!]\\W*(\\w)/g, function(match, capture) {\n                  // for other sentences in text\n                  return match.toUpperCase();\n                 }).replace(/^\\W*\\w/, function(match, capture) {\n                 // for first sentence in text\n                  return match.toUpperCase();\n                 });;\n}\n\nvar a = \"hi, dear user. it is a simple test. see you later!\\r\\nbye\";\nconsole.log(cap(a));\n//output: Hi, dear user. It is a simple test. See you later!\n//Bye ", "question_id": 1026069}, {"answer_votes": "2", "answer_comments": null, "answer_body": " 57 different answers for this question, some off-topic, and yet none of them raise the important issue that none of the solutions listed will work with asian characters, emoji's, and other high unicode-point-value characters in many browsers. Here is a solution that will:  const capitalizeFirstLetter = String.fromCodePoint(65536).length === 1 ?\n    function(S) {\n        \"use-strict\"; // Hooray! The browser uses UTF32!\n        return S.charAt(0).toUpperCase() + string.slice(1);\n    } : function(S) {\n        \"use-strict\";\n        // the browser is using UCS16 to store UTF16\n        return (S.codePointAt(0) > 65535 ? \n            S.slice(0,2).toUpperCase() + string.slice(2) :\n            S.codePointAt(0).toUpperCase() + string.slice(1)\n        );\n    };  However, it won't work in IE (but, it does work in edge). So, with microsoft discontinuing windows 7 soon, this shouldn't be too much of a problem. ", "question_id": 1026069}, {"answer_votes": "2", "answer_comments": null, "answer_body": " Anotehr way using RamdaJs, the functional programming way  firstCapital(str){\n    const fn= p=> R.toUpper(R.head(p))+R.tail(p);\n    return fn(str);\n  }  With multiple words in string  firstCapitalAllWords(str){\n    const fn = p=> R.toUpper(R.head(p))+R.tail(p);\n    return R.map(fn,R.split(' ',str)).join(' ');\n} ", "question_id": 1026069}, {"answer_votes": "2", "answer_comments": null, "answer_body": " This solution might be new and probably the simplest.    function firstUpperCase(input)\r\n{\r\n    return input[0].toUpperCase()+input.substr(1);\r\n}\r\n\r\nconsole.log(firstUpperCase(\"capitalize first letter\"));    ", "question_id": 1026069}, {"answer_votes": "1", "answer_comments": [" Why have such a huge solution when others are so much more elegant and much simpler? \u2013 Craicerjack  Jun 11 '15 at 12:20 "], "answer_body": " The function takes 2 arguments: \nstart -  the start index;\nlength - the length of substring to Capitalise  String.prototype.subUpper = function () {\n        var result = this.toString();\n        var start = 0;\n        var length = 1;\n        if (arguments.length > 0) {\n            start = arguments[0];\n            if (start < this.length) {\n                if (arguments.length > 1) { length = arguments[1]; }\n                if (start + length > this.length) {\n                    length = this.length - start;\n                }\n                var startRest = start + length;\n                var prefix = start > 0 ? this.substr(0, start) : String.empty;\n                var sub = this.substr(start, length);\n                var suffix = this.substr(startRest, this.length - startRest);\n                result = prefix + sub.toUpperCase() + suffix;\n            }\n        }\n        return result;\n    }; ", "question_id": 1026069}, {"answer_votes": "1", "answer_comments": [" This looks gross in my opinion - in fact I think adding a flag to any method to get it to perform different behavior is a bit daft.  Consider var s = capitalizeMe('some RANDOM string', true); - a reader of your code isn't going to know what the true means without reading the function implementation.  If you want your function to do something else, write it in another function instead of overloading the method with magic flags or parameters. \u2013 nevelis  Oct 23 '14 at 4:50 "], "answer_body": " This is what I use religiously:  function capitalizeMe(str,force){\n    str=force ? str.toLowerCase() : str;  \n    return str.replace(/(\\b)([a-zA-Z])/g,\n    function(firstLetter){\n        return firstLetter.toUpperCase();\n    });\n}\n\nvar firstName = capitalizeMe($firstName.val()); ", "question_id": 1026069}, {"answer_votes": "1", "answer_comments": [" So you need to install node and a package to capitalise a string. Bit of overkill. \u2013 Craicerjack  Jun 11 '15 at 12:21 "], "answer_body": " Use this module of NodeJS http://stringjs.com/ package to capitalize your String  var S = require('string');\nS('jon').capitalize().s; //'Jon'\nS('JP').capitalize().s; //'Jp' ", "question_id": 1026069}, {"answer_votes": "1", "answer_comments": null, "answer_body": " I use something along these lines in my dev environment esp when working with APIs like HTTP:  Suppose you have an HTTP header that you'd like to capitalize every initial letter in its name and add the hyphen between its constituent words, you may achieve something like that using this basic & simple routine:  'access control allow origin'\n    .replace(/\\b\\w/g, function (match) {\n        return match.toUpperCase();\n    })\n    .split(' ')\n    .join('-');\n\n// Output: 'Access-Control-Allow-Origin'  It is not maybe the most elegant and attractive function definition out there but it certainly gets the job done. ", "question_id": 1026069}, {"answer_votes": "1", "answer_comments": null, "answer_body": " The currently voted answer is right but doesn't trim or check the length of the string before capitalising the first character.  String.prototype.ucfirst = function(notrim) {\n    s = notrim ? this : this.replace(/(?:(?:^|\\n)\\s+|\\s+(?:$|\\n))/g,'').replace(/\\s+/g,' ');\n    return s.length > 0 ? s.charAt(0).toUpperCase() + s.slice(1) : s;\n}  Set the notrim argument to prevent trimming the string first:  'pizza'.ucfirst()         => 'Pizza'\n'   pizza'.ucfirst()      => 'Pizza'\n'   pizza'.ucfirst(true)  => '   pizza' ", "question_id": 1026069}, {"answer_votes": "1", "answer_comments": null, "answer_body": " If you want to capitalize every first letter in a string, for example hello to the world becomes Hello To The World you can use the following (repurposed from Steve Harrison):  function capitalizeEveryFirstLetter(string) {\n    var splitStr = string.split(' ')\n    var fullStr = '';\n\n    $.each(splitStr,function(index){\n        var currentSplit = splitStr[index].charAt(0).toUpperCase() + splitStr[index].slice(1);\n        fullStr += currentSplit + \" \"\n    });\n\n    return fullStr;\n}  Which you can call by using the following:  capitalizeFirstLetter(\"hello to the world\"); ", "question_id": 1026069}, {"answer_votes": "1", "answer_comments": [" it's Ei ff el with two \"f\" \u2013 Kaiido  May 3 '16 at 3:28  ", " in fact there's a weakness in my regEx, should be: +str!=+str ?  str.replace(/[a-z]/, str.match(/[a-z]/)[0].toUpperCase()) : str; for cases like: str = \"1.2   the Eiffel Tower\" \u2013 Bekim Bacaj  May 3 '16 at 3:34  ", " @BekimBacaj then fix it. \u2013 lolzery wowzery  Jul 20 '17 at 20:51 "], "answer_body": " This one will tolerate possible leading whitespaces and will not miss the target of the first letter in a string. Therefore, it might improve already good solutions available on the thread.  str = \"   the Eifel Tower\";\nstr.replace(/\\w/, str.match(/\\w/)[0].toUpperCase());\n>> \"   The Eifel Tower\";  !But, will cause a 'soft' error if executed against a blank string.\nTo avoid this possible error or unnecessary processing of a blank string or a number, a ternary conditional guarding can be used:  +str!=+str ?  str.replace(/\\w/, str.match(/\\w/)[0].toUpperCase()) : str; ", "question_id": 1026069}, {"answer_votes": "1", "answer_comments": null, "answer_body": " Try this code:  alert(\"hello\".substr(0, 1).toUpperCase() + \"hello\".substr(1));  What it's doing is taking the first character in hello capitalizing it and adding the rest of it on. ", "question_id": 1026069}, {"answer_votes": "0", "answer_comments": null, "answer_body": " For thoroughness, adding another way that I did not see mentioned. Just because you can, doesn't mean you should however. Requires ES6 as code uses array destructuring.  const capitalizeFirstLetter = s => {\n  const type = typeof s;\n  if (type !== \"string\") {\n    throw new Error(`Expected string, instead received ${type}`);\n  }\n\n  const [firstChar, ...remainingChars] = s;\n\n  return [firstChar.toUpperCase(), ...remainingChars].join(\"\");\n}; ", "question_id": 1026069}, {"answer_votes": "0", "answer_comments": [" charAt accepts an optional numeric index as an argument, not a pattern. Using RegEx here  seems unnecessarily expensive. Also the correct version of this has already been posted here . \u2013 noahnu  Jan 30 at 19:52  ", " @noahnu it working fine. tested it. \u2013 Aditya Joshi  Jan 30 at 22:09 ", " @noahnu  there was typo and there are many way to solve the same thing \u2013 Aditya Joshi  Jan 30 at 22:21 ", " reason it worked is because the charAt argument was 'sanitized'. It went from /.{1}/ -> NaN -> 0 . What I meant by \"correct\", was the version you just edited your answer to. If you follow the link I provided, another user already posted your approach in 2015, meaning your answer doesn't add anything. \u2013 noahnu  Jan 30 at 22:27  ", " @noahnu i recently got in to posting solution or alternate solution to a problem recently, earlier i used to ask mostly. Much respect from fellow programmer . \u2013 Aditya Joshi  Jan 31 at 23:24  "], "answer_body": " One liner(\"inputString can be set to any string\")  inputString.replace(/.{1}/ ,inputString.charAt(0).toUpperCase())  ", "question_id": 1026069}, {"answer_votes": "0", "answer_comments": null, "answer_body": " var a = \"this is a test\"\nconsole.log(a.replace(/^[a-z]/g, txt => txt.toUpperCase())); ", "question_id": 1026069}, {"answer_votes": "-2", "answer_comments": null, "answer_body": " You can use javascript to influence the css of the element. this will make the element Capitalize all the first letters inside the element.  function capitalize(element){\n    element.style.textTransform = \"capitalize\";\n}  when you call the function you need to put the element inside the ().\nfor example:  <button onclick=\"capitalize(this)>Click Me</button> ", "question_id": 1026069}, {"answer_votes": "-3", "answer_comments": [" While this is not wrong but actually not a new approach. At least this answer and this one do the same tasks... \u2013 Axel  Sep 8 '17 at 22:20 "], "answer_body": " Easy peasy :  // OK agreed so here is the edited version i can't go simple beyond this    function FirstUpperCase(inputString){\r\n  return inputString.replace(inputString[0],inputString[0].toUpperCase());\r\n};     input : hello student\noutput : Hello student ", "question_id": 1026069}, {"answer_votes": "-4", "answer_comments": [" The function should have no effect on an string which is already uppercase. The question specifically asked for the remaining characters to be untouched; see his example with \"the Eiffel Tower\" -> \"The Eiffel Tower\". You definitely should not lower-case everything first. \u2013 meagar \u2666  Jan 28 '11 at 20:32  ", " Nice magic regexp. good, my favorite regexp, thanks \u2013 KingRider  Apr 28 '16 at 19:43 "], "answer_body": " If I may alter the code a little. I found that if I run an all caps string through this function, nothing happens. So... here is my tid bit. Force the string to lower case first.  String.prototype.capitalize = function(){\n    return this.toLowerCase().replace( /(^|\\s)([a-z])/g , function(m, p1, p2) {\n        return p1 + p2.toUpperCase();\n    });\n} ", "question_id": 1026069}], "question_body": " How do I make the first letter of a string uppercase, but not change the case of any of the other letters?  For example:   ->  ->  ->  ", "question_code": ["\"this is a test\"", "\"This is a test\"", "\"the Eiffel Tower\"", "\"The Eiffel Tower\"", "\"/index.html\"", "\"/index.html\""], "question_id": 1026069}