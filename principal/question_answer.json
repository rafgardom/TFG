{"question_comments": null, "question_title": "Devise redirect back to the original location after sign in or sign up?", "answers": [{"answer_votes": "33", "answer_comments": [" Thanks @Billy for your response.. while using this code, it always redirect me to root_path(home page)and not in specific page which I opened before login \u2013 Rajeev  Apr 11 '13 at 9:40 ", " @rubydev, do you use Firefox and addon to disable referrer? Also use debug tool, say add <%= debug session => in template, or rails console to check what happened. \u2013 Billy Chan  Apr 11 '13 at 13:15 ", " Thanks @Billy, its working now, Only one change here is that I change after_filter to before_filter \u2013 Rajeev  Apr 12 '13 at 5:17 ", " This solution works and it's very clean, but keep in mind that it might store POST requests as long as API requests for JSON format. \u2013 N\u00edcolas Iensen  Apr 25 '15 at 13:56 ", " It didn't work for me until I turned off the remote=true option in my simple_form \u2013 Flaudre  Aug 25 '16 at 8:32  "], "answer_body": " The best resource to seek is the official repo/wiki/issues, and then SO. The answer you found is out of date.  Here is the answer: https://github.com/plataformatec/devise/wiki/How-To:-Redirect-back-to-current-page-after-sign-in,-sign-out,-sign-up,-update  Just add the following in ApplicationController  after_filter :store_location\n\ndef store_location\n  # store last url as long as it isn't a /users path\n  session[:previous_url] = request.fullpath unless request.fullpath =~ /\\/users/\nend\n\ndef after_sign_in_path_for(resource)\n  session[:previous_url] || root_path\nend ", "question_id": 15944159}, {"answer_votes": "19", "answer_comments": null, "answer_body": " You don't need all this code. Devise (as the latest versions) already saves the location for you.  Just use this:  def after_sign_in_path_for(resource)\n  request.env['omniauth.origin'] || stored_location_for(resource) || root_url\nend  This will redirect user to the latest omniauth.source, or the stored_location and is last case, the root url.  I thought I was required to create that method, but Devise already does it.  Source: https://github.com/plataformatec/devise/wiki/How-To:-redirect-to-a-specific-page-on-successful-sign-in ", "question_id": 15944159}, {"answer_votes": "3", "answer_comments": [" This solution works whether with remote: true as well as without, while the @Billy Chan's solution only works without. \u2013 Vadim  Sep 2 '17 at 16:32  "], "answer_body": " As pointed out in the official documentation, the simpler solution would be to simply add this to your application_controller.rb :  class ApplicationController < ActionController::Base\n\n\nprivate\n\n# If your model is called User\ndef after_sign_in_path_for(resource)\n  session[\"user_return_to\"] || root_path\nend  Important Note (Which I also overlooked) is that for this to work you will need to call authenticate_user! method, available by default in Devise, in your controller's before_action: . This will call store_location_for available out of the box in Devise , and the rest is handled by the above code in the application_controller.rb , thus eliminating the need to rewrite code to save requesting url. ", "question_id": 15944159}, {"answer_votes": "2", "answer_comments": null, "answer_body": " As of Devise 4 , it worked seamlessly for me:   Devise automatically redirects on sign in and sign up as long as you\n  store the location of the current page using devise's store_location_for(resource) . To do this, edit your ApplicationController in app/controllers/application_controller.rb . Add:  # saves the location before loading each page so we can return to the\n# right page. If we're on a devise page, we don't want to store that as the\n# place to return to (for example, we don't want to return to the sign in page\n# after signing in), which is what the :unless prevents\nbefore_filter :store_current_location, :unless => :devise_controller?\n\nprivate\n  # override the devise helper to store the current location so we can\n  # redirect to it after loggin in or out. This override makes signing in\n  # and signing up work automatically.\n  def store_current_location\n    store_location_for(:user, request.url)\n  end  Add the following to the ApplicationController to make sign out\n  redirect:  private\n  # override the devise method for where to go after signing out because theirs\n  # always goes to the root path. Because devise uses a session variable and\n  # the session is destroyed on log out, we need to use request.referrer\n  # root_path is there as a backup\n  def after_sign_out_path_for(resource)\n    request.referrer || root_path\n  end  ", "question_id": 15944159}, {"answer_votes": "0", "answer_comments": null, "answer_body": " I has the same doubt and found this, try it too  def after_sign_in_path_for(resource_or_scope)\n  session.fetch 'user_return_to', admin_root_path\nend ", "question_id": 15944159}, {"answer_votes": "0", "answer_comments": null, "answer_body": " Some of the other solutions here may not work if your login form has its own page, as opposed to, e.g., a login form in the header of every page. After logging in, the user needs to go back two pages, not just one.  Devise has a nice How To on Redirecting back to the current page after sign in, sign out, update , from which the code below comes.  Storing the original URL in the session is the best option. In addition to solving the above problem of going back two pages, \"Many browsers do not send [the request.referer ] header. Therefore the only robust cross-browser way to implement this functionality is by using the session.\"  When storing URLs in the session, it's important not to store the URL for any POST, PUT, or DELETE request, nor any XHR request, i.e. nothing to which the user can't actually be redirected.  Note that after signing out, the user's session is destroyed, so the stored URL is gone. In this case, the user can be sent back to request.referer . This seems acceptable since most websites have a sign out link on every page, so returning to the referrer will actually work.  class ApplicationController < ActionController::Base\n  before_action :store_user_location!, if: :storable_location?\n  before_action :authenticate_user!\n\n  private\n    def storable_location?\n      request.get? && is_navigational_format? && !devise_controller? && !request.xhr? \n    end\n\n    def store_user_location!\n      store_location_for(:user, request.fullpath)\n    end\n\n   def after_sign_in_path_for(resource_or_scope)\n     stored_location_for(resource_or_scope) || super\n   end\n\n   def after_sign_out_path_for(resource_or_scope)\n     request.referrer || super\n   end\nend ", "question_id": 15944159}, {"answer_votes": "0", "answer_comments": null, "answer_body": " gem 'devise', '~> 4.4.0'   Create sessions_controller.rb: class SessionsController < Devise::SessionsController  Add the following (modifying the regex if your login url isn't /users)  def before_login\n   session[:previous_url] = request.fullpath unless request.fullpath =~ //users/\n end  def after_login\n  session[:previous_url] || root_path\nend   Notice that this does not work if you've got /users/dashboard or other locations under /users. Might want to get more specific with the regex. ", "question_id": 15944159}], "question_body": " Here I'm using Devise Gem for authentication. If someone want to open page without login then it redirect to sign_in page and after signed in it back to the page which user try to open.\nI use Redirect loop with Devise after_sign_in_path_for link for my problem but it does not work for me.   It doesn't redirect back me to the page which I want to open.\nfor example: If I want to open \"127.0.0.1:3000/post/2/edit\", it doest not back to this page after signed in. ", "question_code": [" def after_sign_in_path_for(resource)\n   params[:next] || super \n end\n"], "question_id": 15944159}