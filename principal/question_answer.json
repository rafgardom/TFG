{"question_comments": [" Are you saying that the user places their finger down on a button, a new button slides to where the old button was and that new button receives a click when the user lifts their finger, even though it didn't receive the initial touch down? \u2013 Brian Nickel \u2666  Oct 1 '14 at 17:22 ", " Yes this is exactly what is occurring. In my situation it is on a login page, the user clicks the \"username\" input but the \"forgot password\" link below the username & password input ends up being clicked instead.   When I tested, on page load the focus is on the \"username\" input the keyboard is not present. I than tap white space on the screen and the \"keyboard\" will than appear and page will scroll to the \"username\" input.   It is on small devices like the iPhone & iPad that this becomes an issue. \u2013 Mac Mad Ill  Oct 1 '14 at 19:47  ", " This is a maddening bug.  It can really baffle users (and devs, for that matter)! \u2013 peteorpeter  Jan 10 '15 at 12:38 "], "question_title": "in iOS8 using .focus() will show virtual keyboard and scroll page after touch", "answers": [{"answer_votes": "30", "answer_comments": [" why the extra parentheses?  if (! /iPad|iPhone|iPod/.test(navigator.userAgent)) \u2013 Hai Phan  Feb 9 '15 at 21:02 ", " @HaiPhan No reason other than that I love parenthesis.  Updating. \u2013 Brian Nickel \u2666  Feb 9 '15 at 21:58 ", " <input autofocus> was the problem for me here. Very helpful! \u2013 maxhud  Nov 20 '16 at 6:48 "], "answer_body": " It looks like you're definitely hitting an iOS 8 bug.  In iOS7, Safari would (apparently) ignore or keep unfocused elements that had focus set prior to page load.  This includes both <input autofocus> and input.focus() that occur up to some point, possibly page load (I tested just with an inline script).  In iOS 8, Safari is now apparently remembering that the element was focussed but not actually focussing it until a touch down event.  It is then blindly sending a click event to whichever element received the touch up.  Both browsers behave the same for input.focus() occurring after page load.  They both zoom to the element and bring up the keyboard.  Tests:   input.focus() before page load: http://fiddle.jshell.net/qo6ctnLz/3/show/  <input autofocus> : http://fiddle.jshell.net/qo6ctnLz/4/show/  input.focus() after page load: http://fiddle.jshell.net/qo6ctnLz/6/show/   The good news is that you only need to be worried about new behavior on elements you want to prefocus.  The other good news is that while you will have to use a user-agent workaround, you can use it for all iOS versions since they were already behaving like you weren't autofocusing:  if (!/iPad|iPhone|iPod/g.test(navigator.userAgent)) {\n    element.focus();\n}  This appears to be the approach http://www.google.com uses based on some basic user-agent testing:   Mac Book Pro: autofocus before page load.  iPhone: no autofocus  iPad: no autofocus  Kit Kat (Android): focus after page load, possibly doing extra detection for presence of software keyboard.   If you haven't, you should go ahead and file a radar with Apple at https://bugreport.apple.com . ", "question_id": 26146252}, {"answer_votes": "16", "answer_comments": [" It works for me on ios9, thank you \u2013 Leon  Oct 24 '15 at 9:13 ", " webview.keyboardDisplayRequiresUserAction = false; // tested on 9.2.1 \u2013 waza123  Feb 28 '16 at 19:26 "], "answer_body": " If you are developing a Cordova project, you can fix it adding this line  <preference name=\"KeyboardDisplayRequiresUserAction\" value=\"false\" />  to your config.xml file. Tested in IOS 8.3 and IOS 8.4 ", "question_id": 26146252}, {"answer_votes": "4", "answer_comments": [" I have opened a bug report with apple about the issue. Hopefully it will be resolved in the next update. Fingers crossed! \u2013 xMythicx  Oct 13 '14 at 13:11 "], "answer_body": " It seems that in iOS 8 there has been an API change on the default handling for the javascript focus() command. If your application is a hybrid app in which you have direct control over Apple's web view facade the below is directly from apples docs.   A Boolean value indicating whether web content can programmatically\n  display the keyboard.  [myWebView setKeyboardDisplayRequiresUserAction:YES];  When this property is set to YES, the user must explicitly tap the\n  elements in the web view to display the keyboard (or other relevant\n  input view) for that element. When set to NO, a focus event on an\n  element causes the input view to be displayed and associated with that\n  element automatically.  The default value for this property is YES.   From the last paragraph it seems this method call is not strictly for the keyboard. It indicates that it is for input views across the board i.e. drop down and date picker etc.  It seems though there is a bug as this method call is not currently working for me. The current behavior I am receiving corresponds as if it defaults to NO. ", "question_id": 26146252}, {"answer_votes": "1", "answer_comments": [" I tried this (briefly) with no success - could you post some example code? \u2013 peteorpeter  Jan 10 '15 at 12:39 "], "answer_body": " I have a solution:   Disable all inputs  Enable the input you wish to focus  Set the focus to that input  Re-enable all the other inputs  ", "question_id": 26146252}, {"answer_votes": "1", "answer_comments": null, "answer_body": " Here's a conditional monkeypatch for jQuery.focus so you don't need to add the userAgent test everywhere.  JavaScript  if (/iPad|iPhone|iPod/g.test(navigator.userAgent)) {\n  (function($) {\n    return $.fn.focus = function() {\n      return arguments[0];\n    };\n  })(jQuery);\n}  CoffeeScript  if /iPad|iPhone|iPod/g.test navigator.userAgent\n  (($) ->\n    $.fn.focus = ->\n      arguments[0]\n  )(jQuery)  Note: I'm returning arguments[0] so we don't break method chaining such as $(el).focus().doSomethingElse() ", "question_id": 26146252}, {"answer_votes": "0", "answer_comments": [" any new update? \u2013 Metagrapher  Jul 14 '15 at 14:10 ", " I'm sorry, I don't have new information from Apple. \u2013 Lipata  Aug 4 '15 at 16:25 ", " All good. Thanks much! \u2013 Metagrapher  Aug 6 '15 at 20:44 ", " Any recent updates about this? \u2013 Geek  Nov 2 '15 at 10:19 "], "answer_body": " I've logged a bug about this into the Apple Bug Reporter and they closed it as duplicate, which is a sign they are working on fixing this. Unfortunately they didn't give me some more information about the duplicate item or about the problem itself. I can only see the duplicate item state, which is Open. ", "question_id": 26146252}, {"answer_votes": "0", "answer_comments": null, "answer_body": " For anyone coming to this on 2018, there is a plugin that fix it. Just install this https://github.com/onderceylan/cordova-plugin-wkwebview-inputfocusfix and input.focus() will work automatically without any additional work. ", "question_id": 26146252}], "question_body": " Prior to iOS8, using the Javascript method on an input element would appear to have no effect (the virtual keyboard would not display). After the latest iOS 8 release, running the method seemed to have no effect on page load but once a user touched anywhere on the screen the virtual keyboard would instantly appear and scroll the page to the element in focus. (This is also an issue when I use the HTML attribute \"autofocus\")  This change has caused issues with iOS8 users on my site. When a user attempts to click a button on my page the sudden scroll and keyboard appearance causes them to unintentionally click a button that was lower on the screen.  I am assuming this is a bug in iOS8 and was not intentional feature, my question is what is the most efficient solution to fixing this problem?  Do I have to check to see if the device is iOS8, every time I use the method? ", "question_code": [".focus()", ".focus()", "navigator.userAgent", ".focus()"], "question_id": 26146252}