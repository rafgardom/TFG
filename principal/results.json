{"answers": [{"answer_votes": "157", "answer_comments": [" that gives subdirectories as well? \u2013 Gordon  Mar 26 '10 at 15:09 ", " You have to do a resursion here \u2013 Josef S\u00e1bl  Nov 18 '10 at 9:31 ", " With recursion, all subdirectories: pastebin.com/qvyF1VWX \u2013 SobiborTreblinka  Apr 29 '14 at 19:36 ", " @developerbmw Note the word or . He presents two different methods of attaining the goal. \u2013 Ken Wayne VanderLinde  Jan 8 '16 at 19:20 ", " While a nice, simple approach, the accepted answer does not answer the question: getting sub-directories from the parent directory (aka siblings of current working directory).  To do so it'd need to change working directory to the parent directory. \u2013 ryanm  Nov 7 '16 at 20:12  "], "answer_body": " you can use glob() with GLOB_ONLYDIR option  or  $dirs = array_filter(glob('*'), 'is_dir');\nprint_r( $dirs); ", "question_id": 2524151}, {"answer_votes": "118", "answer_comments": [" The simplest solution \u2013 J. Chang  Jan 24 '12 at 14:57 ", " This also include the main directory. \u2013 J. Chang  Jan 24 '12 at 15:35 ", " This does not include the main directory in my case (Windows) \u2013 marcovtwout  Feb 20 '14 at 13:26 ", " This doesn't include the main directory for me on mac linux either. Maybe it has to do with the path used? \u2013 Jake  Jan 6 '17 at 12:41 "], "answer_body": " Here is how you can retrieve only directories with GLOB:  $directories = glob($somePath . '/*' , GLOB_ONLYDIR); ", "question_id": 2524151}, {"answer_votes": "30", "answer_comments": [" This helped me, Thanks \u2013 salih kallai  Mar 10 '16 at 7:32 "], "answer_body": " The Spl DirectoryIterator class provides a simple interface for viewing the contents of filesystem directories.  $dir = new DirectoryIterator($path);\nforeach ($dir as $fileinfo) {\n    if ($fileinfo->isDir() && !$fileinfo->isDot()) {\n        echo $fileinfo->getFilename().'<br>';\n    }\n} ", "question_id": 2524151}, {"answer_votes": "23", "answer_comments": [" nice thanks! one more question: how can I separate only the sub-dir name from the whole path? \u2013 Adrian M.  Mar 26 '10 at 15:36 ", " @Adrian See dirname  php.net/manual/en/function.dirname.php \u2013 Yacoby  Mar 26 '10 at 15:53 ", " @Adrian Please have a look at the API documentation I gave in your other question. getFilename() will return only the directory name. \u2013 Gordon  Mar 26 '10 at 15:56 ", " +1. This is the true future-oriented way of doing it. \u2013 Flavius  Jan 11 '13 at 10:00 ", " To get rid of the dots, I had to add RecursiveDirectoryIterator::SKIP_DOTS as a second argument to the RecursiveDirectoryIterator constructor. \u2013 colan  Dec 2 '14 at 22:06 "], "answer_body": " Almost the same as in your previous question :  $iterator = new RecursiveIteratorIterator(\n                new RecursiveDirectoryIterator($yourStartingPath), \n            RecursiveIteratorIterator::SELF_FIRST);\n\nforeach($iterator as $file) {\n    if($file->isDir()) {\n        echo strtoupper($file->getRealpath()), PHP_EOL;\n    }\n}  Replace strtoupper with your desired function. ", "question_id": 2524151}, {"answer_votes": "5", "answer_comments": null, "answer_body": " Try this code:  <?php\n$path = '/var/www/html/project/somefolder';\n\n$dirs = array();\n\n// directory handle\n$dir = dir($path);\n\nwhile (false !== ($entry = $dir->read())) {\n    if ($entry != '.' && $entry != '..') {\n       if (is_dir($path . '/' .$entry)) {\n            $dirs[] = $entry; \n       }\n    }\n}\n\necho \"<pre>\"; print_r($dirs); exit; ", "question_id": 2524151}, {"answer_votes": "3", "answer_comments": null, "answer_body": " In Array:  function expandDirectoriesMatrix($base_dir, $level = 0) {\n    $directories = array();\n    foreach(scandir($base_dir) as $file) {\n        if($file == '.' || $file == '..') continue;\n        $dir = $base_dir.DIRECTORY_SEPARATOR.$file;\n        if(is_dir($dir)) {\n            $directories[]= array(\n                    'level' => $level\n                    'name' => $file,\n                    'path' => $dir,\n                    'children' => expandDirectoriesMatrix($dir, $level +1)\n            );\n        }\n    }\n    return $directories;\n}  //access:  $dir = '/var/www/';\n$directories = expandDirectoriesMatrix($dir);\n\necho $directories[0]['level']                // 0\necho $directories[0]['name']                 // pathA\necho $directories[0]['path']                 // /var/www/pathA\necho $directories[0]['children'][0]['name']  // subPathA1\necho $directories[0]['children'][0]['level'] // 1\necho $directories[0]['children'][1]['name']  // subPathA2\necho $directories[0]['children'][1]['level'] // 1  Example to show all:  function showDirectories($list, $parent = array())\n{\n    foreach ($list as $directory){\n        $parent_name = count($parent) ? \" parent: ({$parent['name']}\" : '';\n        $prefix = str_repeat('-', $directory['level']);\n        echo \"$prefix {$directory['name']} $parent_name <br/>\";  // <-----------\n        if(count($directory['children'])){\n            // list the children directories\n            showDirectories($directory['children'], $directory);\n        }\n    }\n}\n\nshowDirectories($directories);\n\n// pathA\n// - subPathA1 (parent: pathA)\n// -- subsubPathA11 (parent: subPathA1)\n// - subPathA2 \n// pathB\n// pathC ", "question_id": 2524151}, {"answer_votes": "2", "answer_comments": [" This seems overkill when there is a flag GLOB_ONLYDIR , see php.net/manual/en/function.glob.php \u2013 Robert Pounder  Dec 5 '16 at 16:42 "], "answer_body": " Proper way  /**\n * Get all of the directories within a given directory.\n *\n * @param  string  $directory\n * @return array\n */\nfunction directories($directory)\n{\n    $glob = glob($directory . '/*');\n\n    if($glob === false)\n    {\n        return array();\n    }\n\n    return array_filter($glob, function($dir) {\n        return is_dir($dir);\n    });\n}  Inspired by Laravel ", "question_id": 2524151}, {"answer_votes": "1", "answer_comments": null, "answer_body": " <?php\n    /*this will do what you asked for, it only returns the subdirectory names in a given\n      path, and you can make hyperlinks and use them:\n    */\n\n    $yourStartingPath = \"photos\\\\\";\n    $iterator = new RecursiveIteratorIterator( \n        new RecursiveDirectoryIterator($yourStartingPath),  \n        RecursiveIteratorIterator::SELF_FIRST);\n\n    foreach($iterator as $file) { \n        if($file->isDir()) { \n            $path = strtoupper($file->getRealpath()) ; \n            $path2 = PHP_EOL;\n            $path3 = $path.$path2;\n\n            $result = end(explode('/', $path3)); \n\n            echo \"<br />\". basename($result );\n        } \n    } \n\n    /* best regards,\n        Sanaan Barzinji\n        Erbil\n    */\n?> ", "question_id": 2524151}, {"answer_votes": "1", "answer_comments": null, "answer_body": " You can try this function (PHP 7 required)  function getDirectories(string $path) : array\n{\n    $directories = [];\n    $items = scandir($path);\n    foreach ($items as $item) {\n        if($item == '..' || $item == '.')\n            continue;\n        if(is_dir($path.'/'.$item))\n            $directories[] = $item;\n    }\n    return $directories;\n} ", "question_id": 2524151}, {"answer_votes": "0", "answer_comments": null, "answer_body": " You can use the glob() function to do this.  Here is some documentation on it: http://php.net/manual/en/function.glob.php  ", "question_id": 2524151}, {"answer_votes": "0", "answer_comments": null, "answer_body": " Find all PHP files recursively. The logic should be simple enough to tweak and it aims to be fast(er) by avoiding function calls.  function get_all_php_files($directory) {\n    $directory_stack = array($directory);\n    $ignored_filename = array(\n        '.git' => true,\n        '.svn' => true,\n        '.hg' => true,\n        'index.php' => true,\n    );\n    $file_list = array();\n    while ($directory_stack) {\n        $current_directory = array_shift($directory_stack);\n        $files = scandir($current_directory);\n        foreach ($files as $filename) {\n            //  Skip all files/directories with:\n            //      - A starting '.'\n            //      - A starting '_'\n            //      - Ignore 'index.php' files\n            $pathname = $current_directory . DIRECTORY_SEPARATOR . $filename;\n            if (isset($filename[0]) && (\n                $filename[0] === '.' ||\n                $filename[0] === '_' ||\n                isset($ignored_filename[$filename])\n            )) \n            {\n                continue;\n            }\n            else if (is_dir($pathname) === TRUE) {\n                $directory_stack[] = $pathname;\n            } else if (pathinfo($pathname, PATHINFO_EXTENSION) === 'php') {\n                $file_list[] = $pathname;\n            }\n        }\n    }\n    return $file_list;\n} ", "question_id": 2524151}, {"answer_votes": "0", "answer_comments": null, "answer_body": " If you're looking for a recursive directory listing solutions. Use below code I hope it should help you.  <?php\n/**\n * Function for recursive directory file list search as an array.\n *\n * @param mixed $dir Main Directory Path.\n *\n * @return array\n */\nfunction listFolderFiles($dir)\n{\n    $fileInfo     = scandir($dir);\n    $allFileLists = [];\n\n    foreach ($fileInfo as $folder) {\n        if ($folder !== '.' && $folder !== '..') {\n            if (is_dir($dir . DIRECTORY_SEPARATOR . $folder) === true) {\n                $allFileLists[$folder . '/'] = listFolderFiles($dir . DIRECTORY_SEPARATOR . $folder);\n            } else {\n                $allFileLists[$folder] = $folder;\n            }\n        }\n    }\n\n    return $allFileLists;\n}//end listFolderFiles()\n\n\n$dir = listFolderFiles('your searching directory path ex:-F:\\xampp\\htdocs\\abc');\necho '<pre>';\nprint_r($dir);\necho '</pre>'\n\n?> ", "question_id": 2524151}, {"answer_votes": "0", "answer_comments": null, "answer_body": " I have wrote a scanner that works very well and scans directories and subdirecories in each directory and files.  function scanner($path){\n    $result = [];\n    $scan = glob($path . '/*');\n    foreach($scan as $item){\n\n\n        if(is_dir($item))\n            $result[basename($item)] = scanner($item);\n        else\n            $result[] = basename($item);\n    }\n    return $result;\n}  Example  var_dump(scanner($path));  returns:  array(6) {\n  [\"about\"]=>\n  array(2) {\n    [\"factory\"]=>\n    array(0) {\n    }\n    [\"persons\"]=>\n    array(0) {\n    }\n  }\n  [\"contact\"]=>\n  array(0) {\n  }\n  [\"home\"]=>\n  array(1) {\n    [0]=>\n    string(5) \"index.php\"\n  }\n  [\"projects\"]=>\n  array(0) {\n  }\n  [\"researches\"]=>\n  array(0) {\n  }\n  [0]=>\n  string(5) \"index.php\"\n} ", "question_id": 2524151}, {"answer_votes": "0", "answer_comments": [" I tried all codes above this and none that worked gave what the OP asked for. So I shared what I found worked with some adjustments for a more effective answer. Hope this helps somebody. \u2013 user9605523  1 hour ago "], "answer_body": " For the people who actually want folders and subfolders with no files, just like the OP said, the following code outputs both a list of folders and their subfolders, and an array of the same.  <?php\n/**\n * Function for recursive directory file list search as an                       array.\n *\n * @param mixed $dir Main Directory Path.\n *\n * @return array\n */\nfunction listFolderFiles($dir)\n{\n    $fileInfo     = scandir($dir);\n    $allFileLists = [];\n\nforeach ($fileInfo as $folder) {\n    if ($folder !== '.' && $folder !== '..') {\n        if (is_dir($dir . DIRECTORY_SEPARATOR . $folder)     === true) {\n            $allFileLists[$folder . '/'] = listFolderFiles($dir .     DIRECTORY_SEPARATOR . $folder);\necho ' '. $folder. ' ' <br>';\n            } else {\n                echo' ';\n            }\n        }\n    }\n\n    return $allFileLists;\n}//end listFolderFiles()\n\nlistFolderFiles('C:\\wamp64\\www\\code');\n$dir = listFolderFiles('C:\\wamp64\\www\\code');\necho '<pre>';\nprint_r($dir);\necho '</pre>'\n\n?> ", "question_id": 2524151}, {"answer_votes": "-1", "answer_comments": null, "answer_body": " Find all the files and folders under a specified directory.  function getAllSubdir($dir, &$fullDir = []) {\n    $currentDir = scandir($dir);\n\n    foreach ($currentDir as $key => $val) {\n        $realpath = realpath($dir . DIRECTORY_SEPARATOR . $val);\n        if (!is_dir($realpath) && $filename != \".\" && $filename != \"..\") {\n            getDirRecursive($realpath, $fullDir);\n            $fullDir[] = $realpath;\n        }\n    }\n\n    return $fullDir;\n}\n\nvar_dump(scanDirAndSubdir('C:/web2.0/'));  Sample :  array (size=4)\n  0 => string 'C:/web2.0/config/' (length=17)\n  1 => string 'C:/web2.0/js/' (length=13)\n  2 => string 'C:/web2.0/mydir/' (length=16)\n  3 => string 'C:/web2.0/myfile/' (length=17) ", "question_id": 2524151}], "K_means_clustering_result": [[[{"answer_votes": "157", "answer_comments": [" that gives subdirectories as well? \u2013 Gordon  Mar 26 '10 at 15:09 ", " You have to do a resursion here \u2013 Josef S\u00e1bl  Nov 18 '10 at 9:31 ", " With recursion, all subdirectories: pastebin.com/qvyF1VWX \u2013 SobiborTreblinka  Apr 29 '14 at 19:36 ", " @developerbmw Note the word or . He presents two different methods of attaining the goal. \u2013 Ken Wayne VanderLinde  Jan 8 '16 at 19:20 ", " While a nice, simple approach, the accepted answer does not answer the question: getting sub-directories from the parent directory (aka siblings of current working directory).  To do so it'd need to change working directory to the parent directory. \u2013 ryanm  Nov 7 '16 at 20:12  "], "answer_body": " you can use glob() with GLOB_ONLYDIR option  or  $dirs = array_filter(glob('*'), 'is_dir');\nprint_r( $dirs); ", "question_id": 2524151}, "0.2729800504166633", 0], [{"answer_votes": "118", "answer_comments": [" The simplest solution \u2013 J. Chang  Jan 24 '12 at 14:57 ", " This also include the main directory. \u2013 J. Chang  Jan 24 '12 at 15:35 ", " This does not include the main directory in my case (Windows) \u2013 marcovtwout  Feb 20 '14 at 13:26 ", " This doesn't include the main directory for me on mac linux either. Maybe it has to do with the path used? \u2013 Jake  Jan 6 '17 at 12:41 "], "answer_body": " Here is how you can retrieve only directories with GLOB:  $directories = glob($somePath . '/*' , GLOB_ONLYDIR); ", "question_id": 2524151}, "0.2729800504166633", 0], [{"answer_votes": "2", "answer_comments": [" This seems overkill when there is a flag GLOB_ONLYDIR , see php.net/manual/en/function.glob.php \u2013 Robert Pounder  Dec 5 '16 at 16:42 "], "answer_body": " Proper way  /**\n * Get all of the directories within a given directory.\n *\n * @param  string  $directory\n * @return array\n */\nfunction directories($directory)\n{\n    $glob = glob($directory . '/*');\n\n    if($glob === false)\n    {\n        return array();\n    }\n\n    return array_filter($glob, function($dir) {\n        return is_dir($dir);\n    });\n}  Inspired by Laravel ", "question_id": 2524151}, "0.2729800504166633", 0], [{"answer_votes": "0", "answer_comments": null, "answer_body": " You can use the glob() function to do this.  Here is some documentation on it: http://php.net/manual/en/function.glob.php  ", "question_id": 2524151}, "0.2729800504166633", 0], [{"answer_votes": "5", "answer_comments": null, "answer_body": " Try this code:  <?php\n$path = '/var/www/html/project/somefolder';\n\n$dirs = array();\n\n// directory handle\n$dir = dir($path);\n\nwhile (false !== ($entry = $dir->read())) {\n    if ($entry != '.' && $entry != '..') {\n       if (is_dir($path . '/' .$entry)) {\n            $dirs[] = $entry; \n       }\n    }\n}\n\necho \"<pre>\"; print_r($dirs); exit; ", "question_id": 2524151}, "0.2041140435030684", 1], [{"answer_votes": "0", "answer_comments": null, "answer_body": " If you're looking for a recursive directory listing solutions. Use below code I hope it should help you.  <?php\n/**\n * Function for recursive directory file list search as an array.\n *\n * @param mixed $dir Main Directory Path.\n *\n * @return array\n */\nfunction listFolderFiles($dir)\n{\n    $fileInfo     = scandir($dir);\n    $allFileLists = [];\n\n    foreach ($fileInfo as $folder) {\n        if ($folder !== '.' && $folder !== '..') {\n            if (is_dir($dir . DIRECTORY_SEPARATOR . $folder) === true) {\n                $allFileLists[$folder . '/'] = listFolderFiles($dir . DIRECTORY_SEPARATOR . $folder);\n            } else {\n                $allFileLists[$folder] = $folder;\n            }\n        }\n    }\n\n    return $allFileLists;\n}//end listFolderFiles()\n\n\n$dir = listFolderFiles('your searching directory path ex:-F:\\xampp\\htdocs\\abc');\necho '<pre>';\nprint_r($dir);\necho '</pre>'\n\n?> ", "question_id": 2524151}, "0.2041140435030684", 1], [{"answer_votes": "0", "answer_comments": [" I tried all codes above this and none that worked gave what the OP asked for. So I shared what I found worked with some adjustments for a more effective answer. Hope this helps somebody. \u2013 user9605523  1 hour ago "], "answer_body": " For the people who actually want folders and subfolders with no files, just like the OP said, the following code outputs both a list of folders and their subfolders, and an array of the same.  <?php\n/**\n * Function for recursive directory file list search as an                       array.\n *\n * @param mixed $dir Main Directory Path.\n *\n * @return array\n */\nfunction listFolderFiles($dir)\n{\n    $fileInfo     = scandir($dir);\n    $allFileLists = [];\n\nforeach ($fileInfo as $folder) {\n    if ($folder !== '.' && $folder !== '..') {\n        if (is_dir($dir . DIRECTORY_SEPARATOR . $folder)     === true) {\n            $allFileLists[$folder . '/'] = listFolderFiles($dir .     DIRECTORY_SEPARATOR . $folder);\necho ' '. $folder. ' ' <br>';\n            } else {\n                echo' ';\n            }\n        }\n    }\n\n    return $allFileLists;\n}//end listFolderFiles()\n\nlistFolderFiles('C:\\wamp64\\www\\code');\n$dir = listFolderFiles('C:\\wamp64\\www\\code');\necho '<pre>';\nprint_r($dir);\necho '</pre>'\n\n?> ", "question_id": 2524151}, "0.2041140435030684", 1], [{"answer_votes": "-1", "answer_comments": null, "answer_body": " Find all the files and folders under a specified directory.  function getAllSubdir($dir, &$fullDir = []) {\n    $currentDir = scandir($dir);\n\n    foreach ($currentDir as $key => $val) {\n        $realpath = realpath($dir . DIRECTORY_SEPARATOR . $val);\n        if (!is_dir($realpath) && $filename != \".\" && $filename != \"..\") {\n            getDirRecursive($realpath, $fullDir);\n            $fullDir[] = $realpath;\n        }\n    }\n\n    return $fullDir;\n}\n\nvar_dump(scanDirAndSubdir('C:/web2.0/'));  Sample :  array (size=4)\n  0 => string 'C:/web2.0/config/' (length=17)\n  1 => string 'C:/web2.0/js/' (length=13)\n  2 => string 'C:/web2.0/mydir/' (length=16)\n  3 => string 'C:/web2.0/myfile/' (length=17) ", "question_id": 2524151}, "0.2041140435030684", 1], [{"answer_votes": "30", "answer_comments": [" This helped me, Thanks \u2013 salih kallai  Mar 10 '16 at 7:32 "], "answer_body": " The Spl DirectoryIterator class provides a simple interface for viewing the contents of filesystem directories.  $dir = new DirectoryIterator($path);\nforeach ($dir as $fileinfo) {\n    if ($fileinfo->isDir() && !$fileinfo->isDot()) {\n        echo $fileinfo->getFilename().'<br>';\n    }\n} ", "question_id": 2524151}, "0.2672030180692673", 2], [{"answer_votes": "23", "answer_comments": [" nice thanks! one more question: how can I separate only the sub-dir name from the whole path? \u2013 Adrian M.  Mar 26 '10 at 15:36 ", " @Adrian See dirname  php.net/manual/en/function.dirname.php \u2013 Yacoby  Mar 26 '10 at 15:53 ", " @Adrian Please have a look at the API documentation I gave in your other question. getFilename() will return only the directory name. \u2013 Gordon  Mar 26 '10 at 15:56 ", " +1. This is the true future-oriented way of doing it. \u2013 Flavius  Jan 11 '13 at 10:00 ", " To get rid of the dots, I had to add RecursiveDirectoryIterator::SKIP_DOTS as a second argument to the RecursiveDirectoryIterator constructor. \u2013 colan  Dec 2 '14 at 22:06 "], "answer_body": " Almost the same as in your previous question :  $iterator = new RecursiveIteratorIterator(\n                new RecursiveDirectoryIterator($yourStartingPath), \n            RecursiveIteratorIterator::SELF_FIRST);\n\nforeach($iterator as $file) {\n    if($file->isDir()) {\n        echo strtoupper($file->getRealpath()), PHP_EOL;\n    }\n}  Replace strtoupper with your desired function. ", "question_id": 2524151}, "0.2672030180692673", 2], [{"answer_votes": "1", "answer_comments": null, "answer_body": " <?php\n    /*this will do what you asked for, it only returns the subdirectory names in a given\n      path, and you can make hyperlinks and use them:\n    */\n\n    $yourStartingPath = \"photos\\\\\";\n    $iterator = new RecursiveIteratorIterator( \n        new RecursiveDirectoryIterator($yourStartingPath),  \n        RecursiveIteratorIterator::SELF_FIRST);\n\n    foreach($iterator as $file) { \n        if($file->isDir()) { \n            $path = strtoupper($file->getRealpath()) ; \n            $path2 = PHP_EOL;\n            $path3 = $path.$path2;\n\n            $result = end(explode('/', $path3)); \n\n            echo \"<br />\". basename($result );\n        } \n    } \n\n    /* best regards,\n        Sanaan Barzinji\n        Erbil\n    */\n?> ", "question_id": 2524151}, "0.2672030180692673", 2], [{"answer_votes": "3", "answer_comments": null, "answer_body": " In Array:  function expandDirectoriesMatrix($base_dir, $level = 0) {\n    $directories = array();\n    foreach(scandir($base_dir) as $file) {\n        if($file == '.' || $file == '..') continue;\n        $dir = $base_dir.DIRECTORY_SEPARATOR.$file;\n        if(is_dir($dir)) {\n            $directories[]= array(\n                    'level' => $level\n                    'name' => $file,\n                    'path' => $dir,\n                    'children' => expandDirectoriesMatrix($dir, $level +1)\n            );\n        }\n    }\n    return $directories;\n}  //access:  $dir = '/var/www/';\n$directories = expandDirectoriesMatrix($dir);\n\necho $directories[0]['level']                // 0\necho $directories[0]['name']                 // pathA\necho $directories[0]['path']                 // /var/www/pathA\necho $directories[0]['children'][0]['name']  // subPathA1\necho $directories[0]['children'][0]['level'] // 1\necho $directories[0]['children'][1]['name']  // subPathA2\necho $directories[0]['children'][1]['level'] // 1  Example to show all:  function showDirectories($list, $parent = array())\n{\n    foreach ($list as $directory){\n        $parent_name = count($parent) ? \" parent: ({$parent['name']}\" : '';\n        $prefix = str_repeat('-', $directory['level']);\n        echo \"$prefix {$directory['name']} $parent_name <br/>\";  // <-----------\n        if(count($directory['children'])){\n            // list the children directories\n            showDirectories($directory['children'], $directory);\n        }\n    }\n}\n\nshowDirectories($directories);\n\n// pathA\n// - subPathA1 (parent: pathA)\n// -- subsubPathA11 (parent: subPathA1)\n// - subPathA2 \n// pathB\n// pathC ", "question_id": 2524151}, "0.2175197247415781", 3], [{"answer_votes": "1", "answer_comments": null, "answer_body": " You can try this function (PHP 7 required)  function getDirectories(string $path) : array\n{\n    $directories = [];\n    $items = scandir($path);\n    foreach ($items as $item) {\n        if($item == '..' || $item == '.')\n            continue;\n        if(is_dir($path.'/'.$item))\n            $directories[] = $item;\n    }\n    return $directories;\n} ", "question_id": 2524151}, "0.2175197247415781", 3], [{"answer_votes": "0", "answer_comments": null, "answer_body": " I have wrote a scanner that works very well and scans directories and subdirecories in each directory and files.  function scanner($path){\n    $result = [];\n    $scan = glob($path . '/*');\n    foreach($scan as $item){\n\n\n        if(is_dir($item))\n            $result[basename($item)] = scanner($item);\n        else\n            $result[] = basename($item);\n    }\n    return $result;\n}  Example  var_dump(scanner($path));  returns:  array(6) {\n  [\"about\"]=>\n  array(2) {\n    [\"factory\"]=>\n    array(0) {\n    }\n    [\"persons\"]=>\n    array(0) {\n    }\n  }\n  [\"contact\"]=>\n  array(0) {\n  }\n  [\"home\"]=>\n  array(1) {\n    [0]=>\n    string(5) \"index.php\"\n  }\n  [\"projects\"]=>\n  array(0) {\n  }\n  [\"researches\"]=>\n  array(0) {\n  }\n  [0]=>\n  string(5) \"index.php\"\n} ", "question_id": 2524151}, "0.2175197247415781", 3], [{"answer_votes": "0", "answer_comments": null, "answer_body": " Find all PHP files recursively. The logic should be simple enough to tweak and it aims to be fast(er) by avoiding function calls.  function get_all_php_files($directory) {\n    $directory_stack = array($directory);\n    $ignored_filename = array(\n        '.git' => true,\n        '.svn' => true,\n        '.hg' => true,\n        'index.php' => true,\n    );\n    $file_list = array();\n    while ($directory_stack) {\n        $current_directory = array_shift($directory_stack);\n        $files = scandir($current_directory);\n        foreach ($files as $filename) {\n            //  Skip all files/directories with:\n            //      - A starting '.'\n            //      - A starting '_'\n            //      - Ignore 'index.php' files\n            $pathname = $current_directory . DIRECTORY_SEPARATOR . $filename;\n            if (isset($filename[0]) && (\n                $filename[0] === '.' ||\n                $filename[0] === '_' ||\n                isset($ignored_filename[$filename])\n            )) \n            {\n                continue;\n            }\n            else if (is_dir($pathname) === TRUE) {\n                $directory_stack[] = $pathname;\n            } else if (pathinfo($pathname, PATHINFO_EXTENSION) === 'php') {\n                $file_list[] = $pathname;\n            }\n        }\n    }\n    return $file_list;\n} ", "question_id": 2524151}, "0.0", 4]], [[{"answer_votes": "157", "answer_comments": [" that gives subdirectories as well? \u2013 Gordon  Mar 26 '10 at 15:09 ", " You have to do a resursion here \u2013 Josef S\u00e1bl  Nov 18 '10 at 9:31 ", " With recursion, all subdirectories: pastebin.com/qvyF1VWX \u2013 SobiborTreblinka  Apr 29 '14 at 19:36 ", " @developerbmw Note the word or . He presents two different methods of attaining the goal. \u2013 Ken Wayne VanderLinde  Jan 8 '16 at 19:20 ", " While a nice, simple approach, the accepted answer does not answer the question: getting sub-directories from the parent directory (aka siblings of current working directory).  To do so it'd need to change working directory to the parent directory. \u2013 ryanm  Nov 7 '16 at 20:12  "], "answer_body": " you can use glob() with GLOB_ONLYDIR option  or  $dirs = array_filter(glob('*'), 'is_dir');\nprint_r( $dirs); ", "question_id": 2524151}, "0.2729800504166633", 0], [{"answer_votes": "118", "answer_comments": [" The simplest solution \u2013 J. Chang  Jan 24 '12 at 14:57 ", " This also include the main directory. \u2013 J. Chang  Jan 24 '12 at 15:35 ", " This does not include the main directory in my case (Windows) \u2013 marcovtwout  Feb 20 '14 at 13:26 ", " This doesn't include the main directory for me on mac linux either. Maybe it has to do with the path used? \u2013 Jake  Jan 6 '17 at 12:41 "], "answer_body": " Here is how you can retrieve only directories with GLOB:  $directories = glob($somePath . '/*' , GLOB_ONLYDIR); ", "question_id": 2524151}, "0.2729800504166633", 0], [{"answer_votes": "2", "answer_comments": [" This seems overkill when there is a flag GLOB_ONLYDIR , see php.net/manual/en/function.glob.php \u2013 Robert Pounder  Dec 5 '16 at 16:42 "], "answer_body": " Proper way  /**\n * Get all of the directories within a given directory.\n *\n * @param  string  $directory\n * @return array\n */\nfunction directories($directory)\n{\n    $glob = glob($directory . '/*');\n\n    if($glob === false)\n    {\n        return array();\n    }\n\n    return array_filter($glob, function($dir) {\n        return is_dir($dir);\n    });\n}  Inspired by Laravel ", "question_id": 2524151}, "0.2729800504166633", 0], [{"answer_votes": "0", "answer_comments": null, "answer_body": " You can use the glob() function to do this.  Here is some documentation on it: http://php.net/manual/en/function.glob.php  ", "question_id": 2524151}, "0.2729800504166633", 0], [{"answer_votes": "30", "answer_comments": [" This helped me, Thanks \u2013 salih kallai  Mar 10 '16 at 7:32 "], "answer_body": " The Spl DirectoryIterator class provides a simple interface for viewing the contents of filesystem directories.  $dir = new DirectoryIterator($path);\nforeach ($dir as $fileinfo) {\n    if ($fileinfo->isDir() && !$fileinfo->isDot()) {\n        echo $fileinfo->getFilename().'<br>';\n    }\n} ", "question_id": 2524151}, "0.2672030180692673", 2], [{"answer_votes": "23", "answer_comments": [" nice thanks! one more question: how can I separate only the sub-dir name from the whole path? \u2013 Adrian M.  Mar 26 '10 at 15:36 ", " @Adrian See dirname  php.net/manual/en/function.dirname.php \u2013 Yacoby  Mar 26 '10 at 15:53 ", " @Adrian Please have a look at the API documentation I gave in your other question. getFilename() will return only the directory name. \u2013 Gordon  Mar 26 '10 at 15:56 ", " +1. This is the true future-oriented way of doing it. \u2013 Flavius  Jan 11 '13 at 10:00 ", " To get rid of the dots, I had to add RecursiveDirectoryIterator::SKIP_DOTS as a second argument to the RecursiveDirectoryIterator constructor. \u2013 colan  Dec 2 '14 at 22:06 "], "answer_body": " Almost the same as in your previous question :  $iterator = new RecursiveIteratorIterator(\n                new RecursiveDirectoryIterator($yourStartingPath), \n            RecursiveIteratorIterator::SELF_FIRST);\n\nforeach($iterator as $file) {\n    if($file->isDir()) {\n        echo strtoupper($file->getRealpath()), PHP_EOL;\n    }\n}  Replace strtoupper with your desired function. ", "question_id": 2524151}, "0.2672030180692673", 2], [{"answer_votes": "1", "answer_comments": null, "answer_body": " <?php\n    /*this will do what you asked for, it only returns the subdirectory names in a given\n      path, and you can make hyperlinks and use them:\n    */\n\n    $yourStartingPath = \"photos\\\\\";\n    $iterator = new RecursiveIteratorIterator( \n        new RecursiveDirectoryIterator($yourStartingPath),  \n        RecursiveIteratorIterator::SELF_FIRST);\n\n    foreach($iterator as $file) { \n        if($file->isDir()) { \n            $path = strtoupper($file->getRealpath()) ; \n            $path2 = PHP_EOL;\n            $path3 = $path.$path2;\n\n            $result = end(explode('/', $path3)); \n\n            echo \"<br />\". basename($result );\n        } \n    } \n\n    /* best regards,\n        Sanaan Barzinji\n        Erbil\n    */\n?> ", "question_id": 2524151}, "0.2672030180692673", 2], [{"answer_votes": "3", "answer_comments": null, "answer_body": " In Array:  function expandDirectoriesMatrix($base_dir, $level = 0) {\n    $directories = array();\n    foreach(scandir($base_dir) as $file) {\n        if($file == '.' || $file == '..') continue;\n        $dir = $base_dir.DIRECTORY_SEPARATOR.$file;\n        if(is_dir($dir)) {\n            $directories[]= array(\n                    'level' => $level\n                    'name' => $file,\n                    'path' => $dir,\n                    'children' => expandDirectoriesMatrix($dir, $level +1)\n            );\n        }\n    }\n    return $directories;\n}  //access:  $dir = '/var/www/';\n$directories = expandDirectoriesMatrix($dir);\n\necho $directories[0]['level']                // 0\necho $directories[0]['name']                 // pathA\necho $directories[0]['path']                 // /var/www/pathA\necho $directories[0]['children'][0]['name']  // subPathA1\necho $directories[0]['children'][0]['level'] // 1\necho $directories[0]['children'][1]['name']  // subPathA2\necho $directories[0]['children'][1]['level'] // 1  Example to show all:  function showDirectories($list, $parent = array())\n{\n    foreach ($list as $directory){\n        $parent_name = count($parent) ? \" parent: ({$parent['name']}\" : '';\n        $prefix = str_repeat('-', $directory['level']);\n        echo \"$prefix {$directory['name']} $parent_name <br/>\";  // <-----------\n        if(count($directory['children'])){\n            // list the children directories\n            showDirectories($directory['children'], $directory);\n        }\n    }\n}\n\nshowDirectories($directories);\n\n// pathA\n// - subPathA1 (parent: pathA)\n// -- subsubPathA11 (parent: subPathA1)\n// - subPathA2 \n// pathB\n// pathC ", "question_id": 2524151}, "0.2175197247415781", 3], [{"answer_votes": "1", "answer_comments": null, "answer_body": " You can try this function (PHP 7 required)  function getDirectories(string $path) : array\n{\n    $directories = [];\n    $items = scandir($path);\n    foreach ($items as $item) {\n        if($item == '..' || $item == '.')\n            continue;\n        if(is_dir($path.'/'.$item))\n            $directories[] = $item;\n    }\n    return $directories;\n} ", "question_id": 2524151}, "0.2175197247415781", 3], [{"answer_votes": "0", "answer_comments": null, "answer_body": " I have wrote a scanner that works very well and scans directories and subdirecories in each directory and files.  function scanner($path){\n    $result = [];\n    $scan = glob($path . '/*');\n    foreach($scan as $item){\n\n\n        if(is_dir($item))\n            $result[basename($item)] = scanner($item);\n        else\n            $result[] = basename($item);\n    }\n    return $result;\n}  Example  var_dump(scanner($path));  returns:  array(6) {\n  [\"about\"]=>\n  array(2) {\n    [\"factory\"]=>\n    array(0) {\n    }\n    [\"persons\"]=>\n    array(0) {\n    }\n  }\n  [\"contact\"]=>\n  array(0) {\n  }\n  [\"home\"]=>\n  array(1) {\n    [0]=>\n    string(5) \"index.php\"\n  }\n  [\"projects\"]=>\n  array(0) {\n  }\n  [\"researches\"]=>\n  array(0) {\n  }\n  [0]=>\n  string(5) \"index.php\"\n} ", "question_id": 2524151}, "0.2175197247415781", 3], [{"answer_votes": "5", "answer_comments": null, "answer_body": " Try this code:  <?php\n$path = '/var/www/html/project/somefolder';\n\n$dirs = array();\n\n// directory handle\n$dir = dir($path);\n\nwhile (false !== ($entry = $dir->read())) {\n    if ($entry != '.' && $entry != '..') {\n       if (is_dir($path . '/' .$entry)) {\n            $dirs[] = $entry; \n       }\n    }\n}\n\necho \"<pre>\"; print_r($dirs); exit; ", "question_id": 2524151}, "0.2041140435030684", 1], [{"answer_votes": "0", "answer_comments": null, "answer_body": " If you're looking for a recursive directory listing solutions. Use below code I hope it should help you.  <?php\n/**\n * Function for recursive directory file list search as an array.\n *\n * @param mixed $dir Main Directory Path.\n *\n * @return array\n */\nfunction listFolderFiles($dir)\n{\n    $fileInfo     = scandir($dir);\n    $allFileLists = [];\n\n    foreach ($fileInfo as $folder) {\n        if ($folder !== '.' && $folder !== '..') {\n            if (is_dir($dir . DIRECTORY_SEPARATOR . $folder) === true) {\n                $allFileLists[$folder . '/'] = listFolderFiles($dir . DIRECTORY_SEPARATOR . $folder);\n            } else {\n                $allFileLists[$folder] = $folder;\n            }\n        }\n    }\n\n    return $allFileLists;\n}//end listFolderFiles()\n\n\n$dir = listFolderFiles('your searching directory path ex:-F:\\xampp\\htdocs\\abc');\necho '<pre>';\nprint_r($dir);\necho '</pre>'\n\n?> ", "question_id": 2524151}, "0.2041140435030684", 1], [{"answer_votes": "0", "answer_comments": [" I tried all codes above this and none that worked gave what the OP asked for. So I shared what I found worked with some adjustments for a more effective answer. Hope this helps somebody. \u2013 user9605523  1 hour ago "], "answer_body": " For the people who actually want folders and subfolders with no files, just like the OP said, the following code outputs both a list of folders and their subfolders, and an array of the same.  <?php\n/**\n * Function for recursive directory file list search as an                       array.\n *\n * @param mixed $dir Main Directory Path.\n *\n * @return array\n */\nfunction listFolderFiles($dir)\n{\n    $fileInfo     = scandir($dir);\n    $allFileLists = [];\n\nforeach ($fileInfo as $folder) {\n    if ($folder !== '.' && $folder !== '..') {\n        if (is_dir($dir . DIRECTORY_SEPARATOR . $folder)     === true) {\n            $allFileLists[$folder . '/'] = listFolderFiles($dir .     DIRECTORY_SEPARATOR . $folder);\necho ' '. $folder. ' ' <br>';\n            } else {\n                echo' ';\n            }\n        }\n    }\n\n    return $allFileLists;\n}//end listFolderFiles()\n\nlistFolderFiles('C:\\wamp64\\www\\code');\n$dir = listFolderFiles('C:\\wamp64\\www\\code');\necho '<pre>';\nprint_r($dir);\necho '</pre>'\n\n?> ", "question_id": 2524151}, "0.2041140435030684", 1], [{"answer_votes": "-1", "answer_comments": null, "answer_body": " Find all the files and folders under a specified directory.  function getAllSubdir($dir, &$fullDir = []) {\n    $currentDir = scandir($dir);\n\n    foreach ($currentDir as $key => $val) {\n        $realpath = realpath($dir . DIRECTORY_SEPARATOR . $val);\n        if (!is_dir($realpath) && $filename != \".\" && $filename != \"..\") {\n            getDirRecursive($realpath, $fullDir);\n            $fullDir[] = $realpath;\n        }\n    }\n\n    return $fullDir;\n}\n\nvar_dump(scanDirAndSubdir('C:/web2.0/'));  Sample :  array (size=4)\n  0 => string 'C:/web2.0/config/' (length=17)\n  1 => string 'C:/web2.0/js/' (length=13)\n  2 => string 'C:/web2.0/mydir/' (length=16)\n  3 => string 'C:/web2.0/myfile/' (length=17) ", "question_id": 2524151}, "0.2041140435030684", 1], [{"answer_votes": "0", "answer_comments": null, "answer_body": " Find all PHP files recursively. The logic should be simple enough to tweak and it aims to be fast(er) by avoiding function calls.  function get_all_php_files($directory) {\n    $directory_stack = array($directory);\n    $ignored_filename = array(\n        '.git' => true,\n        '.svn' => true,\n        '.hg' => true,\n        'index.php' => true,\n    );\n    $file_list = array();\n    while ($directory_stack) {\n        $current_directory = array_shift($directory_stack);\n        $files = scandir($current_directory);\n        foreach ($files as $filename) {\n            //  Skip all files/directories with:\n            //      - A starting '.'\n            //      - A starting '_'\n            //      - Ignore 'index.php' files\n            $pathname = $current_directory . DIRECTORY_SEPARATOR . $filename;\n            if (isset($filename[0]) && (\n                $filename[0] === '.' ||\n                $filename[0] === '_' ||\n                isset($ignored_filename[$filename])\n            )) \n            {\n                continue;\n            }\n            else if (is_dir($pathname) === TRUE) {\n                $directory_stack[] = $pathname;\n            } else if (pathinfo($pathname, PATHINFO_EXTENSION) === 'php') {\n                $file_list[] = $pathname;\n            }\n        }\n    }\n    return $file_list;\n} ", "question_id": 2524151}, "0.0", 4]], [[{"answer_votes": "157", "answer_comments": [" that gives subdirectories as well? \u2013 Gordon  Mar 26 '10 at 15:09 ", " You have to do a resursion here \u2013 Josef S\u00e1bl  Nov 18 '10 at 9:31 ", " With recursion, all subdirectories: pastebin.com/qvyF1VWX \u2013 SobiborTreblinka  Apr 29 '14 at 19:36 ", " @developerbmw Note the word or . He presents two different methods of attaining the goal. \u2013 Ken Wayne VanderLinde  Jan 8 '16 at 19:20 ", " While a nice, simple approach, the accepted answer does not answer the question: getting sub-directories from the parent directory (aka siblings of current working directory).  To do so it'd need to change working directory to the parent directory. \u2013 ryanm  Nov 7 '16 at 20:12  "], "answer_body": " you can use glob() with GLOB_ONLYDIR option  or  $dirs = array_filter(glob('*'), 'is_dir');\nprint_r( $dirs); ", "question_id": 2524151}, "0.2729800504166633", 0], [{"answer_votes": "30", "answer_comments": [" This helped me, Thanks \u2013 salih kallai  Mar 10 '16 at 7:32 "], "answer_body": " The Spl DirectoryIterator class provides a simple interface for viewing the contents of filesystem directories.  $dir = new DirectoryIterator($path);\nforeach ($dir as $fileinfo) {\n    if ($fileinfo->isDir() && !$fileinfo->isDot()) {\n        echo $fileinfo->getFilename().'<br>';\n    }\n} ", "question_id": 2524151}, "0.2672030180692673", 2], [{"answer_votes": "3", "answer_comments": null, "answer_body": " In Array:  function expandDirectoriesMatrix($base_dir, $level = 0) {\n    $directories = array();\n    foreach(scandir($base_dir) as $file) {\n        if($file == '.' || $file == '..') continue;\n        $dir = $base_dir.DIRECTORY_SEPARATOR.$file;\n        if(is_dir($dir)) {\n            $directories[]= array(\n                    'level' => $level\n                    'name' => $file,\n                    'path' => $dir,\n                    'children' => expandDirectoriesMatrix($dir, $level +1)\n            );\n        }\n    }\n    return $directories;\n}  //access:  $dir = '/var/www/';\n$directories = expandDirectoriesMatrix($dir);\n\necho $directories[0]['level']                // 0\necho $directories[0]['name']                 // pathA\necho $directories[0]['path']                 // /var/www/pathA\necho $directories[0]['children'][0]['name']  // subPathA1\necho $directories[0]['children'][0]['level'] // 1\necho $directories[0]['children'][1]['name']  // subPathA2\necho $directories[0]['children'][1]['level'] // 1  Example to show all:  function showDirectories($list, $parent = array())\n{\n    foreach ($list as $directory){\n        $parent_name = count($parent) ? \" parent: ({$parent['name']}\" : '';\n        $prefix = str_repeat('-', $directory['level']);\n        echo \"$prefix {$directory['name']} $parent_name <br/>\";  // <-----------\n        if(count($directory['children'])){\n            // list the children directories\n            showDirectories($directory['children'], $directory);\n        }\n    }\n}\n\nshowDirectories($directories);\n\n// pathA\n// - subPathA1 (parent: pathA)\n// -- subsubPathA11 (parent: subPathA1)\n// - subPathA2 \n// pathB\n// pathC ", "question_id": 2524151}, "0.2175197247415781", 3], [{"answer_votes": "5", "answer_comments": null, "answer_body": " Try this code:  <?php\n$path = '/var/www/html/project/somefolder';\n\n$dirs = array();\n\n// directory handle\n$dir = dir($path);\n\nwhile (false !== ($entry = $dir->read())) {\n    if ($entry != '.' && $entry != '..') {\n       if (is_dir($path . '/' .$entry)) {\n            $dirs[] = $entry; \n       }\n    }\n}\n\necho \"<pre>\"; print_r($dirs); exit; ", "question_id": 2524151}, "0.2041140435030684", 1], [{"answer_votes": "0", "answer_comments": null, "answer_body": " Find all PHP files recursively. The logic should be simple enough to tweak and it aims to be fast(er) by avoiding function calls.  function get_all_php_files($directory) {\n    $directory_stack = array($directory);\n    $ignored_filename = array(\n        '.git' => true,\n        '.svn' => true,\n        '.hg' => true,\n        'index.php' => true,\n    );\n    $file_list = array();\n    while ($directory_stack) {\n        $current_directory = array_shift($directory_stack);\n        $files = scandir($current_directory);\n        foreach ($files as $filename) {\n            //  Skip all files/directories with:\n            //      - A starting '.'\n            //      - A starting '_'\n            //      - Ignore 'index.php' files\n            $pathname = $current_directory . DIRECTORY_SEPARATOR . $filename;\n            if (isset($filename[0]) && (\n                $filename[0] === '.' ||\n                $filename[0] === '_' ||\n                isset($ignored_filename[$filename])\n            )) \n            {\n                continue;\n            }\n            else if (is_dir($pathname) === TRUE) {\n                $directory_stack[] = $pathname;\n            } else if (pathinfo($pathname, PATHINFO_EXTENSION) === 'php') {\n                $file_list[] = $pathname;\n            }\n        }\n    }\n    return $file_list;\n} ", "question_id": 2524151}, "0.0", 4]]], "gensim_similarity_tf_idf_code_result": [[{"answer_votes": "-1", "answer_comments": null, "answer_body": " Find all the files and folders under a specified directory.  function getAllSubdir($dir, &$fullDir = []) {\n    $currentDir = scandir($dir);\n\n    foreach ($currentDir as $key => $val) {\n        $realpath = realpath($dir . DIRECTORY_SEPARATOR . $val);\n        if (!is_dir($realpath) && $filename != \".\" && $filename != \"..\") {\n            getDirRecursive($realpath, $fullDir);\n            $fullDir[] = $realpath;\n        }\n    }\n\n    return $fullDir;\n}\n\nvar_dump(scanDirAndSubdir('C:/web2.0/'));  Sample :  array (size=4)\n  0 => string 'C:/web2.0/config/' (length=17)\n  1 => string 'C:/web2.0/js/' (length=13)\n  2 => string 'C:/web2.0/mydir/' (length=16)\n  3 => string 'C:/web2.0/myfile/' (length=17) ", "question_id": 2524151}, "0.09886108"], [{"answer_votes": "157", "answer_comments": [" that gives subdirectories as well? \u2013 Gordon  Mar 26 '10 at 15:09 ", " You have to do a resursion here \u2013 Josef S\u00e1bl  Nov 18 '10 at 9:31 ", " With recursion, all subdirectories: pastebin.com/qvyF1VWX \u2013 SobiborTreblinka  Apr 29 '14 at 19:36 ", " @developerbmw Note the word or . He presents two different methods of attaining the goal. \u2013 Ken Wayne VanderLinde  Jan 8 '16 at 19:20 ", " While a nice, simple approach, the accepted answer does not answer the question: getting sub-directories from the parent directory (aka siblings of current working directory).  To do so it'd need to change working directory to the parent directory. \u2013 ryanm  Nov 7 '16 at 20:12  "], "answer_body": " you can use glob() with GLOB_ONLYDIR option  or  $dirs = array_filter(glob('*'), 'is_dir');\nprint_r( $dirs); ", "question_id": 2524151}, "0.0"], [{"answer_votes": "118", "answer_comments": [" The simplest solution \u2013 J. Chang  Jan 24 '12 at 14:57 ", " This also include the main directory. \u2013 J. Chang  Jan 24 '12 at 15:35 ", " This does not include the main directory in my case (Windows) \u2013 marcovtwout  Feb 20 '14 at 13:26 ", " This doesn't include the main directory for me on mac linux either. Maybe it has to do with the path used? \u2013 Jake  Jan 6 '17 at 12:41 "], "answer_body": " Here is how you can retrieve only directories with GLOB:  $directories = glob($somePath . '/*' , GLOB_ONLYDIR); ", "question_id": 2524151}, "0.0"], [{"answer_votes": "30", "answer_comments": [" This helped me, Thanks \u2013 salih kallai  Mar 10 '16 at 7:32 "], "answer_body": " The Spl DirectoryIterator class provides a simple interface for viewing the contents of filesystem directories.  $dir = new DirectoryIterator($path);\nforeach ($dir as $fileinfo) {\n    if ($fileinfo->isDir() && !$fileinfo->isDot()) {\n        echo $fileinfo->getFilename().'<br>';\n    }\n} ", "question_id": 2524151}, "0.0"], [{"answer_votes": "23", "answer_comments": [" nice thanks! one more question: how can I separate only the sub-dir name from the whole path? \u2013 Adrian M.  Mar 26 '10 at 15:36 ", " @Adrian See dirname  php.net/manual/en/function.dirname.php \u2013 Yacoby  Mar 26 '10 at 15:53 ", " @Adrian Please have a look at the API documentation I gave in your other question. getFilename() will return only the directory name. \u2013 Gordon  Mar 26 '10 at 15:56 ", " +1. This is the true future-oriented way of doing it. \u2013 Flavius  Jan 11 '13 at 10:00 ", " To get rid of the dots, I had to add RecursiveDirectoryIterator::SKIP_DOTS as a second argument to the RecursiveDirectoryIterator constructor. \u2013 colan  Dec 2 '14 at 22:06 "], "answer_body": " Almost the same as in your previous question :  $iterator = new RecursiveIteratorIterator(\n                new RecursiveDirectoryIterator($yourStartingPath), \n            RecursiveIteratorIterator::SELF_FIRST);\n\nforeach($iterator as $file) {\n    if($file->isDir()) {\n        echo strtoupper($file->getRealpath()), PHP_EOL;\n    }\n}  Replace strtoupper with your desired function. ", "question_id": 2524151}, "0.0"], [{"answer_votes": "5", "answer_comments": null, "answer_body": " Try this code:  <?php\n$path = '/var/www/html/project/somefolder';\n\n$dirs = array();\n\n// directory handle\n$dir = dir($path);\n\nwhile (false !== ($entry = $dir->read())) {\n    if ($entry != '.' && $entry != '..') {\n       if (is_dir($path . '/' .$entry)) {\n            $dirs[] = $entry; \n       }\n    }\n}\n\necho \"<pre>\"; print_r($dirs); exit; ", "question_id": 2524151}, "0.0"], [{"answer_votes": "3", "answer_comments": null, "answer_body": " In Array:  function expandDirectoriesMatrix($base_dir, $level = 0) {\n    $directories = array();\n    foreach(scandir($base_dir) as $file) {\n        if($file == '.' || $file == '..') continue;\n        $dir = $base_dir.DIRECTORY_SEPARATOR.$file;\n        if(is_dir($dir)) {\n            $directories[]= array(\n                    'level' => $level\n                    'name' => $file,\n                    'path' => $dir,\n                    'children' => expandDirectoriesMatrix($dir, $level +1)\n            );\n        }\n    }\n    return $directories;\n}  //access:  $dir = '/var/www/';\n$directories = expandDirectoriesMatrix($dir);\n\necho $directories[0]['level']                // 0\necho $directories[0]['name']                 // pathA\necho $directories[0]['path']                 // /var/www/pathA\necho $directories[0]['children'][0]['name']  // subPathA1\necho $directories[0]['children'][0]['level'] // 1\necho $directories[0]['children'][1]['name']  // subPathA2\necho $directories[0]['children'][1]['level'] // 1  Example to show all:  function showDirectories($list, $parent = array())\n{\n    foreach ($list as $directory){\n        $parent_name = count($parent) ? \" parent: ({$parent['name']}\" : '';\n        $prefix = str_repeat('-', $directory['level']);\n        echo \"$prefix {$directory['name']} $parent_name <br/>\";  // <-----------\n        if(count($directory['children'])){\n            // list the children directories\n            showDirectories($directory['children'], $directory);\n        }\n    }\n}\n\nshowDirectories($directories);\n\n// pathA\n// - subPathA1 (parent: pathA)\n// -- subsubPathA11 (parent: subPathA1)\n// - subPathA2 \n// pathB\n// pathC ", "question_id": 2524151}, "0.0"], [{"answer_votes": "2", "answer_comments": [" This seems overkill when there is a flag GLOB_ONLYDIR , see php.net/manual/en/function.glob.php \u2013 Robert Pounder  Dec 5 '16 at 16:42 "], "answer_body": " Proper way  /**\n * Get all of the directories within a given directory.\n *\n * @param  string  $directory\n * @return array\n */\nfunction directories($directory)\n{\n    $glob = glob($directory . '/*');\n\n    if($glob === false)\n    {\n        return array();\n    }\n\n    return array_filter($glob, function($dir) {\n        return is_dir($dir);\n    });\n}  Inspired by Laravel ", "question_id": 2524151}, "0.0"], [{"answer_votes": "1", "answer_comments": null, "answer_body": " <?php\n    /*this will do what you asked for, it only returns the subdirectory names in a given\n      path, and you can make hyperlinks and use them:\n    */\n\n    $yourStartingPath = \"photos\\\\\";\n    $iterator = new RecursiveIteratorIterator( \n        new RecursiveDirectoryIterator($yourStartingPath),  \n        RecursiveIteratorIterator::SELF_FIRST);\n\n    foreach($iterator as $file) { \n        if($file->isDir()) { \n            $path = strtoupper($file->getRealpath()) ; \n            $path2 = PHP_EOL;\n            $path3 = $path.$path2;\n\n            $result = end(explode('/', $path3)); \n\n            echo \"<br />\". basename($result );\n        } \n    } \n\n    /* best regards,\n        Sanaan Barzinji\n        Erbil\n    */\n?> ", "question_id": 2524151}, "0.0"], [{"answer_votes": "1", "answer_comments": null, "answer_body": " You can try this function (PHP 7 required)  function getDirectories(string $path) : array\n{\n    $directories = [];\n    $items = scandir($path);\n    foreach ($items as $item) {\n        if($item == '..' || $item == '.')\n            continue;\n        if(is_dir($path.'/'.$item))\n            $directories[] = $item;\n    }\n    return $directories;\n} ", "question_id": 2524151}, "0.0"], [{"answer_votes": "0", "answer_comments": null, "answer_body": " You can use the glob() function to do this.  Here is some documentation on it: http://php.net/manual/en/function.glob.php  ", "question_id": 2524151}, "0.0"], [{"answer_votes": "0", "answer_comments": null, "answer_body": " Find all PHP files recursively. The logic should be simple enough to tweak and it aims to be fast(er) by avoiding function calls.  function get_all_php_files($directory) {\n    $directory_stack = array($directory);\n    $ignored_filename = array(\n        '.git' => true,\n        '.svn' => true,\n        '.hg' => true,\n        'index.php' => true,\n    );\n    $file_list = array();\n    while ($directory_stack) {\n        $current_directory = array_shift($directory_stack);\n        $files = scandir($current_directory);\n        foreach ($files as $filename) {\n            //  Skip all files/directories with:\n            //      - A starting '.'\n            //      - A starting '_'\n            //      - Ignore 'index.php' files\n            $pathname = $current_directory . DIRECTORY_SEPARATOR . $filename;\n            if (isset($filename[0]) && (\n                $filename[0] === '.' ||\n                $filename[0] === '_' ||\n                isset($ignored_filename[$filename])\n            )) \n            {\n                continue;\n            }\n            else if (is_dir($pathname) === TRUE) {\n                $directory_stack[] = $pathname;\n            } else if (pathinfo($pathname, PATHINFO_EXTENSION) === 'php') {\n                $file_list[] = $pathname;\n            }\n        }\n    }\n    return $file_list;\n} ", "question_id": 2524151}, "0.0"], [{"answer_votes": "0", "answer_comments": null, "answer_body": " If you're looking for a recursive directory listing solutions. Use below code I hope it should help you.  <?php\n/**\n * Function for recursive directory file list search as an array.\n *\n * @param mixed $dir Main Directory Path.\n *\n * @return array\n */\nfunction listFolderFiles($dir)\n{\n    $fileInfo     = scandir($dir);\n    $allFileLists = [];\n\n    foreach ($fileInfo as $folder) {\n        if ($folder !== '.' && $folder !== '..') {\n            if (is_dir($dir . DIRECTORY_SEPARATOR . $folder) === true) {\n                $allFileLists[$folder . '/'] = listFolderFiles($dir . DIRECTORY_SEPARATOR . $folder);\n            } else {\n                $allFileLists[$folder] = $folder;\n            }\n        }\n    }\n\n    return $allFileLists;\n}//end listFolderFiles()\n\n\n$dir = listFolderFiles('your searching directory path ex:-F:\\xampp\\htdocs\\abc');\necho '<pre>';\nprint_r($dir);\necho '</pre>'\n\n?> ", "question_id": 2524151}, "0.0"], [{"answer_votes": "0", "answer_comments": null, "answer_body": " I have wrote a scanner that works very well and scans directories and subdirecories in each directory and files.  function scanner($path){\n    $result = [];\n    $scan = glob($path . '/*');\n    foreach($scan as $item){\n\n\n        if(is_dir($item))\n            $result[basename($item)] = scanner($item);\n        else\n            $result[] = basename($item);\n    }\n    return $result;\n}  Example  var_dump(scanner($path));  returns:  array(6) {\n  [\"about\"]=>\n  array(2) {\n    [\"factory\"]=>\n    array(0) {\n    }\n    [\"persons\"]=>\n    array(0) {\n    }\n  }\n  [\"contact\"]=>\n  array(0) {\n  }\n  [\"home\"]=>\n  array(1) {\n    [0]=>\n    string(5) \"index.php\"\n  }\n  [\"projects\"]=>\n  array(0) {\n  }\n  [\"researches\"]=>\n  array(0) {\n  }\n  [0]=>\n  string(5) \"index.php\"\n} ", "question_id": 2524151}, "0.0"], [{"answer_votes": "0", "answer_comments": [" I tried all codes above this and none that worked gave what the OP asked for. So I shared what I found worked with some adjustments for a more effective answer. Hope this helps somebody. \u2013 user9605523  1 hour ago "], "answer_body": " For the people who actually want folders and subfolders with no files, just like the OP said, the following code outputs both a list of folders and their subfolders, and an array of the same.  <?php\n/**\n * Function for recursive directory file list search as an                       array.\n *\n * @param mixed $dir Main Directory Path.\n *\n * @return array\n */\nfunction listFolderFiles($dir)\n{\n    $fileInfo     = scandir($dir);\n    $allFileLists = [];\n\nforeach ($fileInfo as $folder) {\n    if ($folder !== '.' && $folder !== '..') {\n        if (is_dir($dir . DIRECTORY_SEPARATOR . $folder)     === true) {\n            $allFileLists[$folder . '/'] = listFolderFiles($dir .     DIRECTORY_SEPARATOR . $folder);\necho ' '. $folder. ' ' <br>';\n            } else {\n                echo' ';\n            }\n        }\n    }\n\n    return $allFileLists;\n}//end listFolderFiles()\n\nlistFolderFiles('C:\\wamp64\\www\\code');\n$dir = listFolderFiles('C:\\wamp64\\www\\code');\necho '<pre>';\nprint_r($dir);\necho '</pre>'\n\n?> ", "question_id": 2524151}, "0.0"]], "gensim_similarity_tf_idf_body_result": [[{"answer_votes": "157", "answer_comments": [" that gives subdirectories as well? \u2013 Gordon  Mar 26 '10 at 15:09 ", " You have to do a resursion here \u2013 Josef S\u00e1bl  Nov 18 '10 at 9:31 ", " With recursion, all subdirectories: pastebin.com/qvyF1VWX \u2013 SobiborTreblinka  Apr 29 '14 at 19:36 ", " @developerbmw Note the word or . He presents two different methods of attaining the goal. \u2013 Ken Wayne VanderLinde  Jan 8 '16 at 19:20 ", " While a nice, simple approach, the accepted answer does not answer the question: getting sub-directories from the parent directory (aka siblings of current working directory).  To do so it'd need to change working directory to the parent directory. \u2013 ryanm  Nov 7 '16 at 20:12  "], "answer_body": " you can use glob() with GLOB_ONLYDIR option  or  $dirs = array_filter(glob('*'), 'is_dir');\nprint_r( $dirs); ", "question_id": 2524151}, "0.18868454"], [{"answer_votes": "2", "answer_comments": [" This seems overkill when there is a flag GLOB_ONLYDIR , see php.net/manual/en/function.glob.php \u2013 Robert Pounder  Dec 5 '16 at 16:42 "], "answer_body": " Proper way  /**\n * Get all of the directories within a given directory.\n *\n * @param  string  $directory\n * @return array\n */\nfunction directories($directory)\n{\n    $glob = glob($directory . '/*');\n\n    if($glob === false)\n    {\n        return array();\n    }\n\n    return array_filter($glob, function($dir) {\n        return is_dir($dir);\n    });\n}  Inspired by Laravel ", "question_id": 2524151}, "0.17098163"], [{"answer_votes": "3", "answer_comments": null, "answer_body": " In Array:  function expandDirectoriesMatrix($base_dir, $level = 0) {\n    $directories = array();\n    foreach(scandir($base_dir) as $file) {\n        if($file == '.' || $file == '..') continue;\n        $dir = $base_dir.DIRECTORY_SEPARATOR.$file;\n        if(is_dir($dir)) {\n            $directories[]= array(\n                    'level' => $level\n                    'name' => $file,\n                    'path' => $dir,\n                    'children' => expandDirectoriesMatrix($dir, $level +1)\n            );\n        }\n    }\n    return $directories;\n}  //access:  $dir = '/var/www/';\n$directories = expandDirectoriesMatrix($dir);\n\necho $directories[0]['level']                // 0\necho $directories[0]['name']                 // pathA\necho $directories[0]['path']                 // /var/www/pathA\necho $directories[0]['children'][0]['name']  // subPathA1\necho $directories[0]['children'][0]['level'] // 1\necho $directories[0]['children'][1]['name']  // subPathA2\necho $directories[0]['children'][1]['level'] // 1  Example to show all:  function showDirectories($list, $parent = array())\n{\n    foreach ($list as $directory){\n        $parent_name = count($parent) ? \" parent: ({$parent['name']}\" : '';\n        $prefix = str_repeat('-', $directory['level']);\n        echo \"$prefix {$directory['name']} $parent_name <br/>\";  // <-----------\n        if(count($directory['children'])){\n            // list the children directories\n            showDirectories($directory['children'], $directory);\n        }\n    }\n}\n\nshowDirectories($directories);\n\n// pathA\n// - subPathA1 (parent: pathA)\n// -- subsubPathA11 (parent: subPathA1)\n// - subPathA2 \n// pathB\n// pathC ", "question_id": 2524151}, "0.12915654"], [{"answer_votes": "1", "answer_comments": null, "answer_body": " <?php\n    /*this will do what you asked for, it only returns the subdirectory names in a given\n      path, and you can make hyperlinks and use them:\n    */\n\n    $yourStartingPath = \"photos\\\\\";\n    $iterator = new RecursiveIteratorIterator( \n        new RecursiveDirectoryIterator($yourStartingPath),  \n        RecursiveIteratorIterator::SELF_FIRST);\n\n    foreach($iterator as $file) { \n        if($file->isDir()) { \n            $path = strtoupper($file->getRealpath()) ; \n            $path2 = PHP_EOL;\n            $path3 = $path.$path2;\n\n            $result = end(explode('/', $path3)); \n\n            echo \"<br />\". basename($result );\n        } \n    } \n\n    /* best regards,\n        Sanaan Barzinji\n        Erbil\n    */\n?> ", "question_id": 2524151}, "0.11908442"], [{"answer_votes": "0", "answer_comments": null, "answer_body": " I have wrote a scanner that works very well and scans directories and subdirecories in each directory and files.  function scanner($path){\n    $result = [];\n    $scan = glob($path . '/*');\n    foreach($scan as $item){\n\n\n        if(is_dir($item))\n            $result[basename($item)] = scanner($item);\n        else\n            $result[] = basename($item);\n    }\n    return $result;\n}  Example  var_dump(scanner($path));  returns:  array(6) {\n  [\"about\"]=>\n  array(2) {\n    [\"factory\"]=>\n    array(0) {\n    }\n    [\"persons\"]=>\n    array(0) {\n    }\n  }\n  [\"contact\"]=>\n  array(0) {\n  }\n  [\"home\"]=>\n  array(1) {\n    [0]=>\n    string(5) \"index.php\"\n  }\n  [\"projects\"]=>\n  array(0) {\n  }\n  [\"researches\"]=>\n  array(0) {\n  }\n  [0]=>\n  string(5) \"index.php\"\n} ", "question_id": 2524151}, "0.09520309"], [{"answer_votes": "0", "answer_comments": [" I tried all codes above this and none that worked gave what the OP asked for. So I shared what I found worked with some adjustments for a more effective answer. Hope this helps somebody. \u2013 user9605523  1 hour ago "], "answer_body": " For the people who actually want folders and subfolders with no files, just like the OP said, the following code outputs both a list of folders and their subfolders, and an array of the same.  <?php\n/**\n * Function for recursive directory file list search as an                       array.\n *\n * @param mixed $dir Main Directory Path.\n *\n * @return array\n */\nfunction listFolderFiles($dir)\n{\n    $fileInfo     = scandir($dir);\n    $allFileLists = [];\n\nforeach ($fileInfo as $folder) {\n    if ($folder !== '.' && $folder !== '..') {\n        if (is_dir($dir . DIRECTORY_SEPARATOR . $folder)     === true) {\n            $allFileLists[$folder . '/'] = listFolderFiles($dir .     DIRECTORY_SEPARATOR . $folder);\necho ' '. $folder. ' ' <br>';\n            } else {\n                echo' ';\n            }\n        }\n    }\n\n    return $allFileLists;\n}//end listFolderFiles()\n\nlistFolderFiles('C:\\wamp64\\www\\code');\n$dir = listFolderFiles('C:\\wamp64\\www\\code');\necho '<pre>';\nprint_r($dir);\necho '</pre>'\n\n?> ", "question_id": 2524151}, "0.07754003"], [{"answer_votes": "0", "answer_comments": null, "answer_body": " You can use the glob() function to do this.  Here is some documentation on it: http://php.net/manual/en/function.glob.php  ", "question_id": 2524151}, "0.06651328"], [{"answer_votes": "0", "answer_comments": null, "answer_body": " Find all PHP files recursively. The logic should be simple enough to tweak and it aims to be fast(er) by avoiding function calls.  function get_all_php_files($directory) {\n    $directory_stack = array($directory);\n    $ignored_filename = array(\n        '.git' => true,\n        '.svn' => true,\n        '.hg' => true,\n        'index.php' => true,\n    );\n    $file_list = array();\n    while ($directory_stack) {\n        $current_directory = array_shift($directory_stack);\n        $files = scandir($current_directory);\n        foreach ($files as $filename) {\n            //  Skip all files/directories with:\n            //      - A starting '.'\n            //      - A starting '_'\n            //      - Ignore 'index.php' files\n            $pathname = $current_directory . DIRECTORY_SEPARATOR . $filename;\n            if (isset($filename[0]) && (\n                $filename[0] === '.' ||\n                $filename[0] === '_' ||\n                isset($ignored_filename[$filename])\n            )) \n            {\n                continue;\n            }\n            else if (is_dir($pathname) === TRUE) {\n                $directory_stack[] = $pathname;\n            } else if (pathinfo($pathname, PATHINFO_EXTENSION) === 'php') {\n                $file_list[] = $pathname;\n            }\n        }\n    }\n    return $file_list;\n} ", "question_id": 2524151}, "0.06353045"], [{"answer_votes": "0", "answer_comments": null, "answer_body": " If you're looking for a recursive directory listing solutions. Use below code I hope it should help you.  <?php\n/**\n * Function for recursive directory file list search as an array.\n *\n * @param mixed $dir Main Directory Path.\n *\n * @return array\n */\nfunction listFolderFiles($dir)\n{\n    $fileInfo     = scandir($dir);\n    $allFileLists = [];\n\n    foreach ($fileInfo as $folder) {\n        if ($folder !== '.' && $folder !== '..') {\n            if (is_dir($dir . DIRECTORY_SEPARATOR . $folder) === true) {\n                $allFileLists[$folder . '/'] = listFolderFiles($dir . DIRECTORY_SEPARATOR . $folder);\n            } else {\n                $allFileLists[$folder] = $folder;\n            }\n        }\n    }\n\n    return $allFileLists;\n}//end listFolderFiles()\n\n\n$dir = listFolderFiles('your searching directory path ex:-F:\\xampp\\htdocs\\abc');\necho '<pre>';\nprint_r($dir);\necho '</pre>'\n\n?> ", "question_id": 2524151}, "0.061151244"], [{"answer_votes": "-1", "answer_comments": null, "answer_body": " Find all the files and folders under a specified directory.  function getAllSubdir($dir, &$fullDir = []) {\n    $currentDir = scandir($dir);\n\n    foreach ($currentDir as $key => $val) {\n        $realpath = realpath($dir . DIRECTORY_SEPARATOR . $val);\n        if (!is_dir($realpath) && $filename != \".\" && $filename != \"..\") {\n            getDirRecursive($realpath, $fullDir);\n            $fullDir[] = $realpath;\n        }\n    }\n\n    return $fullDir;\n}\n\nvar_dump(scanDirAndSubdir('C:/web2.0/'));  Sample :  array (size=4)\n  0 => string 'C:/web2.0/config/' (length=17)\n  1 => string 'C:/web2.0/js/' (length=13)\n  2 => string 'C:/web2.0/mydir/' (length=16)\n  3 => string 'C:/web2.0/myfile/' (length=17) ", "question_id": 2524151}, "0.04035821"], [{"answer_votes": "30", "answer_comments": [" This helped me, Thanks \u2013 salih kallai  Mar 10 '16 at 7:32 "], "answer_body": " The Spl DirectoryIterator class provides a simple interface for viewing the contents of filesystem directories.  $dir = new DirectoryIterator($path);\nforeach ($dir as $fileinfo) {\n    if ($fileinfo->isDir() && !$fileinfo->isDot()) {\n        echo $fileinfo->getFilename().'<br>';\n    }\n} ", "question_id": 2524151}, "0.03575498"], [{"answer_votes": "23", "answer_comments": [" nice thanks! one more question: how can I separate only the sub-dir name from the whole path? \u2013 Adrian M.  Mar 26 '10 at 15:36 ", " @Adrian See dirname  php.net/manual/en/function.dirname.php \u2013 Yacoby  Mar 26 '10 at 15:53 ", " @Adrian Please have a look at the API documentation I gave in your other question. getFilename() will return only the directory name. \u2013 Gordon  Mar 26 '10 at 15:56 ", " +1. This is the true future-oriented way of doing it. \u2013 Flavius  Jan 11 '13 at 10:00 ", " To get rid of the dots, I had to add RecursiveDirectoryIterator::SKIP_DOTS as a second argument to the RecursiveDirectoryIterator constructor. \u2013 colan  Dec 2 '14 at 22:06 "], "answer_body": " Almost the same as in your previous question :  $iterator = new RecursiveIteratorIterator(\n                new RecursiveDirectoryIterator($yourStartingPath), \n            RecursiveIteratorIterator::SELF_FIRST);\n\nforeach($iterator as $file) {\n    if($file->isDir()) {\n        echo strtoupper($file->getRealpath()), PHP_EOL;\n    }\n}  Replace strtoupper with your desired function. ", "question_id": 2524151}, "0.033416882"], [{"answer_votes": "118", "answer_comments": [" The simplest solution \u2013 J. Chang  Jan 24 '12 at 14:57 ", " This also include the main directory. \u2013 J. Chang  Jan 24 '12 at 15:35 ", " This does not include the main directory in my case (Windows) \u2013 marcovtwout  Feb 20 '14 at 13:26 ", " This doesn't include the main directory for me on mac linux either. Maybe it has to do with the path used? \u2013 Jake  Jan 6 '17 at 12:41 "], "answer_body": " Here is how you can retrieve only directories with GLOB:  $directories = glob($somePath . '/*' , GLOB_ONLYDIR); ", "question_id": 2524151}, "0.026380427"], [{"answer_votes": "5", "answer_comments": null, "answer_body": " Try this code:  <?php\n$path = '/var/www/html/project/somefolder';\n\n$dirs = array();\n\n// directory handle\n$dir = dir($path);\n\nwhile (false !== ($entry = $dir->read())) {\n    if ($entry != '.' && $entry != '..') {\n       if (is_dir($path . '/' .$entry)) {\n            $dirs[] = $entry; \n       }\n    }\n}\n\necho \"<pre>\"; print_r($dirs); exit; ", "question_id": 2524151}, "0.020962048"], [{"answer_votes": "1", "answer_comments": null, "answer_body": " You can try this function (PHP 7 required)  function getDirectories(string $path) : array\n{\n    $directories = [];\n    $items = scandir($path);\n    foreach ($items as $item) {\n        if($item == '..' || $item == '.')\n            continue;\n        if(is_dir($path.'/'.$item))\n            $directories[] = $item;\n    }\n    return $directories;\n} ", "question_id": 2524151}, "0.01423581"]], "nltk_title_analyze_code_result": [[{"answer_votes": "-1", "answer_comments": null, "answer_body": " Find all the files and folders under a specified directory.  function getAllSubdir($dir, &$fullDir = []) {\n    $currentDir = scandir($dir);\n\n    foreach ($currentDir as $key => $val) {\n        $realpath = realpath($dir . DIRECTORY_SEPARATOR . $val);\n        if (!is_dir($realpath) && $filename != \".\" && $filename != \"..\") {\n            getDirRecursive($realpath, $fullDir);\n            $fullDir[] = $realpath;\n        }\n    }\n\n    return $fullDir;\n}\n\nvar_dump(scanDirAndSubdir('C:/web2.0/'));  Sample :  array (size=4)\n  0 => string 'C:/web2.0/config/' (length=17)\n  1 => string 'C:/web2.0/js/' (length=13)\n  2 => string 'C:/web2.0/mydir/' (length=16)\n  3 => string 'C:/web2.0/myfile/' (length=17) ", "question_id": 2524151}, 1], [{"answer_votes": "157", "answer_comments": [" that gives subdirectories as well? \u2013 Gordon  Mar 26 '10 at 15:09 ", " You have to do a resursion here \u2013 Josef S\u00e1bl  Nov 18 '10 at 9:31 ", " With recursion, all subdirectories: pastebin.com/qvyF1VWX \u2013 SobiborTreblinka  Apr 29 '14 at 19:36 ", " @developerbmw Note the word or . He presents two different methods of attaining the goal. \u2013 Ken Wayne VanderLinde  Jan 8 '16 at 19:20 ", " While a nice, simple approach, the accepted answer does not answer the question: getting sub-directories from the parent directory (aka siblings of current working directory).  To do so it'd need to change working directory to the parent directory. \u2013 ryanm  Nov 7 '16 at 20:12  "], "answer_body": " you can use glob() with GLOB_ONLYDIR option  or  $dirs = array_filter(glob('*'), 'is_dir');\nprint_r( $dirs); ", "question_id": 2524151}, 0], [{"answer_votes": "118", "answer_comments": [" The simplest solution \u2013 J. Chang  Jan 24 '12 at 14:57 ", " This also include the main directory. \u2013 J. Chang  Jan 24 '12 at 15:35 ", " This does not include the main directory in my case (Windows) \u2013 marcovtwout  Feb 20 '14 at 13:26 ", " This doesn't include the main directory for me on mac linux either. Maybe it has to do with the path used? \u2013 Jake  Jan 6 '17 at 12:41 "], "answer_body": " Here is how you can retrieve only directories with GLOB:  $directories = glob($somePath . '/*' , GLOB_ONLYDIR); ", "question_id": 2524151}, 0], [{"answer_votes": "30", "answer_comments": [" This helped me, Thanks \u2013 salih kallai  Mar 10 '16 at 7:32 "], "answer_body": " The Spl DirectoryIterator class provides a simple interface for viewing the contents of filesystem directories.  $dir = new DirectoryIterator($path);\nforeach ($dir as $fileinfo) {\n    if ($fileinfo->isDir() && !$fileinfo->isDot()) {\n        echo $fileinfo->getFilename().'<br>';\n    }\n} ", "question_id": 2524151}, 0], [{"answer_votes": "23", "answer_comments": [" nice thanks! one more question: how can I separate only the sub-dir name from the whole path? \u2013 Adrian M.  Mar 26 '10 at 15:36 ", " @Adrian See dirname  php.net/manual/en/function.dirname.php \u2013 Yacoby  Mar 26 '10 at 15:53 ", " @Adrian Please have a look at the API documentation I gave in your other question. getFilename() will return only the directory name. \u2013 Gordon  Mar 26 '10 at 15:56 ", " +1. This is the true future-oriented way of doing it. \u2013 Flavius  Jan 11 '13 at 10:00 ", " To get rid of the dots, I had to add RecursiveDirectoryIterator::SKIP_DOTS as a second argument to the RecursiveDirectoryIterator constructor. \u2013 colan  Dec 2 '14 at 22:06 "], "answer_body": " Almost the same as in your previous question :  $iterator = new RecursiveIteratorIterator(\n                new RecursiveDirectoryIterator($yourStartingPath), \n            RecursiveIteratorIterator::SELF_FIRST);\n\nforeach($iterator as $file) {\n    if($file->isDir()) {\n        echo strtoupper($file->getRealpath()), PHP_EOL;\n    }\n}  Replace strtoupper with your desired function. ", "question_id": 2524151}, 0], [{"answer_votes": "5", "answer_comments": null, "answer_body": " Try this code:  <?php\n$path = '/var/www/html/project/somefolder';\n\n$dirs = array();\n\n// directory handle\n$dir = dir($path);\n\nwhile (false !== ($entry = $dir->read())) {\n    if ($entry != '.' && $entry != '..') {\n       if (is_dir($path . '/' .$entry)) {\n            $dirs[] = $entry; \n       }\n    }\n}\n\necho \"<pre>\"; print_r($dirs); exit; ", "question_id": 2524151}, 0], [{"answer_votes": "3", "answer_comments": null, "answer_body": " In Array:  function expandDirectoriesMatrix($base_dir, $level = 0) {\n    $directories = array();\n    foreach(scandir($base_dir) as $file) {\n        if($file == '.' || $file == '..') continue;\n        $dir = $base_dir.DIRECTORY_SEPARATOR.$file;\n        if(is_dir($dir)) {\n            $directories[]= array(\n                    'level' => $level\n                    'name' => $file,\n                    'path' => $dir,\n                    'children' => expandDirectoriesMatrix($dir, $level +1)\n            );\n        }\n    }\n    return $directories;\n}  //access:  $dir = '/var/www/';\n$directories = expandDirectoriesMatrix($dir);\n\necho $directories[0]['level']                // 0\necho $directories[0]['name']                 // pathA\necho $directories[0]['path']                 // /var/www/pathA\necho $directories[0]['children'][0]['name']  // subPathA1\necho $directories[0]['children'][0]['level'] // 1\necho $directories[0]['children'][1]['name']  // subPathA2\necho $directories[0]['children'][1]['level'] // 1  Example to show all:  function showDirectories($list, $parent = array())\n{\n    foreach ($list as $directory){\n        $parent_name = count($parent) ? \" parent: ({$parent['name']}\" : '';\n        $prefix = str_repeat('-', $directory['level']);\n        echo \"$prefix {$directory['name']} $parent_name <br/>\";  // <-----------\n        if(count($directory['children'])){\n            // list the children directories\n            showDirectories($directory['children'], $directory);\n        }\n    }\n}\n\nshowDirectories($directories);\n\n// pathA\n// - subPathA1 (parent: pathA)\n// -- subsubPathA11 (parent: subPathA1)\n// - subPathA2 \n// pathB\n// pathC ", "question_id": 2524151}, 0], [{"answer_votes": "2", "answer_comments": [" This seems overkill when there is a flag GLOB_ONLYDIR , see php.net/manual/en/function.glob.php \u2013 Robert Pounder  Dec 5 '16 at 16:42 "], "answer_body": " Proper way  /**\n * Get all of the directories within a given directory.\n *\n * @param  string  $directory\n * @return array\n */\nfunction directories($directory)\n{\n    $glob = glob($directory . '/*');\n\n    if($glob === false)\n    {\n        return array();\n    }\n\n    return array_filter($glob, function($dir) {\n        return is_dir($dir);\n    });\n}  Inspired by Laravel ", "question_id": 2524151}, 0], [{"answer_votes": "1", "answer_comments": null, "answer_body": " <?php\n    /*this will do what you asked for, it only returns the subdirectory names in a given\n      path, and you can make hyperlinks and use them:\n    */\n\n    $yourStartingPath = \"photos\\\\\";\n    $iterator = new RecursiveIteratorIterator( \n        new RecursiveDirectoryIterator($yourStartingPath),  \n        RecursiveIteratorIterator::SELF_FIRST);\n\n    foreach($iterator as $file) { \n        if($file->isDir()) { \n            $path = strtoupper($file->getRealpath()) ; \n            $path2 = PHP_EOL;\n            $path3 = $path.$path2;\n\n            $result = end(explode('/', $path3)); \n\n            echo \"<br />\". basename($result );\n        } \n    } \n\n    /* best regards,\n        Sanaan Barzinji\n        Erbil\n    */\n?> ", "question_id": 2524151}, 0], [{"answer_votes": "1", "answer_comments": null, "answer_body": " You can try this function (PHP 7 required)  function getDirectories(string $path) : array\n{\n    $directories = [];\n    $items = scandir($path);\n    foreach ($items as $item) {\n        if($item == '..' || $item == '.')\n            continue;\n        if(is_dir($path.'/'.$item))\n            $directories[] = $item;\n    }\n    return $directories;\n} ", "question_id": 2524151}, 0], [{"answer_votes": "0", "answer_comments": null, "answer_body": " You can use the glob() function to do this.  Here is some documentation on it: http://php.net/manual/en/function.glob.php  ", "question_id": 2524151}, 0], [{"answer_votes": "0", "answer_comments": null, "answer_body": " Find all PHP files recursively. The logic should be simple enough to tweak and it aims to be fast(er) by avoiding function calls.  function get_all_php_files($directory) {\n    $directory_stack = array($directory);\n    $ignored_filename = array(\n        '.git' => true,\n        '.svn' => true,\n        '.hg' => true,\n        'index.php' => true,\n    );\n    $file_list = array();\n    while ($directory_stack) {\n        $current_directory = array_shift($directory_stack);\n        $files = scandir($current_directory);\n        foreach ($files as $filename) {\n            //  Skip all files/directories with:\n            //      - A starting '.'\n            //      - A starting '_'\n            //      - Ignore 'index.php' files\n            $pathname = $current_directory . DIRECTORY_SEPARATOR . $filename;\n            if (isset($filename[0]) && (\n                $filename[0] === '.' ||\n                $filename[0] === '_' ||\n                isset($ignored_filename[$filename])\n            )) \n            {\n                continue;\n            }\n            else if (is_dir($pathname) === TRUE) {\n                $directory_stack[] = $pathname;\n            } else if (pathinfo($pathname, PATHINFO_EXTENSION) === 'php') {\n                $file_list[] = $pathname;\n            }\n        }\n    }\n    return $file_list;\n} ", "question_id": 2524151}, 0], [{"answer_votes": "0", "answer_comments": null, "answer_body": " If you're looking for a recursive directory listing solutions. Use below code I hope it should help you.  <?php\n/**\n * Function for recursive directory file list search as an array.\n *\n * @param mixed $dir Main Directory Path.\n *\n * @return array\n */\nfunction listFolderFiles($dir)\n{\n    $fileInfo     = scandir($dir);\n    $allFileLists = [];\n\n    foreach ($fileInfo as $folder) {\n        if ($folder !== '.' && $folder !== '..') {\n            if (is_dir($dir . DIRECTORY_SEPARATOR . $folder) === true) {\n                $allFileLists[$folder . '/'] = listFolderFiles($dir . DIRECTORY_SEPARATOR . $folder);\n            } else {\n                $allFileLists[$folder] = $folder;\n            }\n        }\n    }\n\n    return $allFileLists;\n}//end listFolderFiles()\n\n\n$dir = listFolderFiles('your searching directory path ex:-F:\\xampp\\htdocs\\abc');\necho '<pre>';\nprint_r($dir);\necho '</pre>'\n\n?> ", "question_id": 2524151}, 0], [{"answer_votes": "0", "answer_comments": null, "answer_body": " I have wrote a scanner that works very well and scans directories and subdirecories in each directory and files.  function scanner($path){\n    $result = [];\n    $scan = glob($path . '/*');\n    foreach($scan as $item){\n\n\n        if(is_dir($item))\n            $result[basename($item)] = scanner($item);\n        else\n            $result[] = basename($item);\n    }\n    return $result;\n}  Example  var_dump(scanner($path));  returns:  array(6) {\n  [\"about\"]=>\n  array(2) {\n    [\"factory\"]=>\n    array(0) {\n    }\n    [\"persons\"]=>\n    array(0) {\n    }\n  }\n  [\"contact\"]=>\n  array(0) {\n  }\n  [\"home\"]=>\n  array(1) {\n    [0]=>\n    string(5) \"index.php\"\n  }\n  [\"projects\"]=>\n  array(0) {\n  }\n  [\"researches\"]=>\n  array(0) {\n  }\n  [0]=>\n  string(5) \"index.php\"\n} ", "question_id": 2524151}, 0], [{"answer_votes": "0", "answer_comments": [" I tried all codes above this and none that worked gave what the OP asked for. So I shared what I found worked with some adjustments for a more effective answer. Hope this helps somebody. \u2013 user9605523  1 hour ago "], "answer_body": " For the people who actually want folders and subfolders with no files, just like the OP said, the following code outputs both a list of folders and their subfolders, and an array of the same.  <?php\n/**\n * Function for recursive directory file list search as an                       array.\n *\n * @param mixed $dir Main Directory Path.\n *\n * @return array\n */\nfunction listFolderFiles($dir)\n{\n    $fileInfo     = scandir($dir);\n    $allFileLists = [];\n\nforeach ($fileInfo as $folder) {\n    if ($folder !== '.' && $folder !== '..') {\n        if (is_dir($dir . DIRECTORY_SEPARATOR . $folder)     === true) {\n            $allFileLists[$folder . '/'] = listFolderFiles($dir .     DIRECTORY_SEPARATOR . $folder);\necho ' '. $folder. ' ' <br>';\n            } else {\n                echo' ';\n            }\n        }\n    }\n\n    return $allFileLists;\n}//end listFolderFiles()\n\nlistFolderFiles('C:\\wamp64\\www\\code');\n$dir = listFolderFiles('C:\\wamp64\\www\\code');\necho '<pre>';\nprint_r($dir);\necho '</pre>'\n\n?> ", "question_id": 2524151}, 0]], "merge_gensim_nltk_title": [[{"answer_votes": "2", "answer_comments": [" This seems overkill when there is a flag GLOB_ONLYDIR , see php.net/manual/en/function.glob.php \u2013 Robert Pounder  Dec 5 '16 at 16:42 "], "answer_body": " Proper way  /**\n * Get all of the directories within a given directory.\n *\n * @param  string  $directory\n * @return array\n */\nfunction directories($directory)\n{\n    $glob = glob($directory . '/*');\n\n    if($glob === false)\n    {\n        return array();\n    }\n\n    return array_filter($glob, function($dir) {\n        return is_dir($dir);\n    });\n}  Inspired by Laravel ", "question_id": 2524151}, "0.170981630.170981630.170981630.170981630.170981630.170981630.170981630.170981630.17098163"], [{"answer_votes": "3", "answer_comments": null, "answer_body": " In Array:  function expandDirectoriesMatrix($base_dir, $level = 0) {\n    $directories = array();\n    foreach(scandir($base_dir) as $file) {\n        if($file == '.' || $file == '..') continue;\n        $dir = $base_dir.DIRECTORY_SEPARATOR.$file;\n        if(is_dir($dir)) {\n            $directories[]= array(\n                    'level' => $level\n                    'name' => $file,\n                    'path' => $dir,\n                    'children' => expandDirectoriesMatrix($dir, $level +1)\n            );\n        }\n    }\n    return $directories;\n}  //access:  $dir = '/var/www/';\n$directories = expandDirectoriesMatrix($dir);\n\necho $directories[0]['level']                // 0\necho $directories[0]['name']                 // pathA\necho $directories[0]['path']                 // /var/www/pathA\necho $directories[0]['children'][0]['name']  // subPathA1\necho $directories[0]['children'][0]['level'] // 1\necho $directories[0]['children'][1]['name']  // subPathA2\necho $directories[0]['children'][1]['level'] // 1  Example to show all:  function showDirectories($list, $parent = array())\n{\n    foreach ($list as $directory){\n        $parent_name = count($parent) ? \" parent: ({$parent['name']}\" : '';\n        $prefix = str_repeat('-', $directory['level']);\n        echo \"$prefix {$directory['name']} $parent_name <br/>\";  // <-----------\n        if(count($directory['children'])){\n            // list the children directories\n            showDirectories($directory['children'], $directory);\n        }\n    }\n}\n\nshowDirectories($directories);\n\n// pathA\n// - subPathA1 (parent: pathA)\n// -- subsubPathA11 (parent: subPathA1)\n// - subPathA2 \n// pathB\n// pathC ", "question_id": 2524151}, "0.129156540.129156540.129156540.129156540.129156540.129156540.12915654"], [{"answer_votes": "1", "answer_comments": null, "answer_body": " <?php\n    /*this will do what you asked for, it only returns the subdirectory names in a given\n      path, and you can make hyperlinks and use them:\n    */\n\n    $yourStartingPath = \"photos\\\\\";\n    $iterator = new RecursiveIteratorIterator( \n        new RecursiveDirectoryIterator($yourStartingPath),  \n        RecursiveIteratorIterator::SELF_FIRST);\n\n    foreach($iterator as $file) { \n        if($file->isDir()) { \n            $path = strtoupper($file->getRealpath()) ; \n            $path2 = PHP_EOL;\n            $path3 = $path.$path2;\n\n            $result = end(explode('/', $path3)); \n\n            echo \"<br />\". basename($result );\n        } \n    } \n\n    /* best regards,\n        Sanaan Barzinji\n        Erbil\n    */\n?> ", "question_id": 2524151}, "0.119084420.11908442"], [{"answer_votes": "0", "answer_comments": null, "answer_body": " I have wrote a scanner that works very well and scans directories and subdirecories in each directory and files.  function scanner($path){\n    $result = [];\n    $scan = glob($path . '/*');\n    foreach($scan as $item){\n\n\n        if(is_dir($item))\n            $result[basename($item)] = scanner($item);\n        else\n            $result[] = basename($item);\n    }\n    return $result;\n}  Example  var_dump(scanner($path));  returns:  array(6) {\n  [\"about\"]=>\n  array(2) {\n    [\"factory\"]=>\n    array(0) {\n    }\n    [\"persons\"]=>\n    array(0) {\n    }\n  }\n  [\"contact\"]=>\n  array(0) {\n  }\n  [\"home\"]=>\n  array(1) {\n    [0]=>\n    string(5) \"index.php\"\n  }\n  [\"projects\"]=>\n  array(0) {\n  }\n  [\"researches\"]=>\n  array(0) {\n  }\n  [0]=>\n  string(5) \"index.php\"\n} ", "question_id": 2524151}, "0.095203090.09520309"], [{"answer_votes": "0", "answer_comments": [" I tried all codes above this and none that worked gave what the OP asked for. So I shared what I found worked with some adjustments for a more effective answer. Hope this helps somebody. \u2013 user9605523  1 hour ago "], "answer_body": " For the people who actually want folders and subfolders with no files, just like the OP said, the following code outputs both a list of folders and their subfolders, and an array of the same.  <?php\n/**\n * Function for recursive directory file list search as an                       array.\n *\n * @param mixed $dir Main Directory Path.\n *\n * @return array\n */\nfunction listFolderFiles($dir)\n{\n    $fileInfo     = scandir($dir);\n    $allFileLists = [];\n\nforeach ($fileInfo as $folder) {\n    if ($folder !== '.' && $folder !== '..') {\n        if (is_dir($dir . DIRECTORY_SEPARATOR . $folder)     === true) {\n            $allFileLists[$folder . '/'] = listFolderFiles($dir .     DIRECTORY_SEPARATOR . $folder);\necho ' '. $folder. ' ' <br>';\n            } else {\n                echo' ';\n            }\n        }\n    }\n\n    return $allFileLists;\n}//end listFolderFiles()\n\nlistFolderFiles('C:\\wamp64\\www\\code');\n$dir = listFolderFiles('C:\\wamp64\\www\\code');\necho '<pre>';\nprint_r($dir);\necho '</pre>'\n\n?> ", "question_id": 2524151}, "0.077540030.077540030.077540030.07754003"], [{"answer_votes": "0", "answer_comments": null, "answer_body": " Find all PHP files recursively. The logic should be simple enough to tweak and it aims to be fast(er) by avoiding function calls.  function get_all_php_files($directory) {\n    $directory_stack = array($directory);\n    $ignored_filename = array(\n        '.git' => true,\n        '.svn' => true,\n        '.hg' => true,\n        'index.php' => true,\n    );\n    $file_list = array();\n    while ($directory_stack) {\n        $current_directory = array_shift($directory_stack);\n        $files = scandir($current_directory);\n        foreach ($files as $filename) {\n            //  Skip all files/directories with:\n            //      - A starting '.'\n            //      - A starting '_'\n            //      - Ignore 'index.php' files\n            $pathname = $current_directory . DIRECTORY_SEPARATOR . $filename;\n            if (isset($filename[0]) && (\n                $filename[0] === '.' ||\n                $filename[0] === '_' ||\n                isset($ignored_filename[$filename])\n            )) \n            {\n                continue;\n            }\n            else if (is_dir($pathname) === TRUE) {\n                $directory_stack[] = $pathname;\n            } else if (pathinfo($pathname, PATHINFO_EXTENSION) === 'php') {\n                $file_list[] = $pathname;\n            }\n        }\n    }\n    return $file_list;\n} ", "question_id": 2524151}, "0.063530450.063530450.063530450.063530450.06353045"], [{"answer_votes": "0", "answer_comments": null, "answer_body": " If you're looking for a recursive directory listing solutions. Use below code I hope it should help you.  <?php\n/**\n * Function for recursive directory file list search as an array.\n *\n * @param mixed $dir Main Directory Path.\n *\n * @return array\n */\nfunction listFolderFiles($dir)\n{\n    $fileInfo     = scandir($dir);\n    $allFileLists = [];\n\n    foreach ($fileInfo as $folder) {\n        if ($folder !== '.' && $folder !== '..') {\n            if (is_dir($dir . DIRECTORY_SEPARATOR . $folder) === true) {\n                $allFileLists[$folder . '/'] = listFolderFiles($dir . DIRECTORY_SEPARATOR . $folder);\n            } else {\n                $allFileLists[$folder] = $folder;\n            }\n        }\n    }\n\n    return $allFileLists;\n}//end listFolderFiles()\n\n\n$dir = listFolderFiles('your searching directory path ex:-F:\\xampp\\htdocs\\abc');\necho '<pre>';\nprint_r($dir);\necho '</pre>'\n\n?> ", "question_id": 2524151}, "0.0611512440.0611512440.0611512440.061151244"], [{"answer_votes": "-1", "answer_comments": null, "answer_body": " Find all the files and folders under a specified directory.  function getAllSubdir($dir, &$fullDir = []) {\n    $currentDir = scandir($dir);\n\n    foreach ($currentDir as $key => $val) {\n        $realpath = realpath($dir . DIRECTORY_SEPARATOR . $val);\n        if (!is_dir($realpath) && $filename != \".\" && $filename != \"..\") {\n            getDirRecursive($realpath, $fullDir);\n            $fullDir[] = $realpath;\n        }\n    }\n\n    return $fullDir;\n}\n\nvar_dump(scanDirAndSubdir('C:/web2.0/'));  Sample :  array (size=4)\n  0 => string 'C:/web2.0/config/' (length=17)\n  1 => string 'C:/web2.0/js/' (length=13)\n  2 => string 'C:/web2.0/mydir/' (length=16)\n  3 => string 'C:/web2.0/myfile/' (length=17) ", "question_id": 2524151}, "0.040358210.040358210.04035821"], [{"answer_votes": "30", "answer_comments": [" This helped me, Thanks \u2013 salih kallai  Mar 10 '16 at 7:32 "], "answer_body": " The Spl DirectoryIterator class provides a simple interface for viewing the contents of filesystem directories.  $dir = new DirectoryIterator($path);\nforeach ($dir as $fileinfo) {\n    if ($fileinfo->isDir() && !$fileinfo->isDot()) {\n        echo $fileinfo->getFilename().'<br>';\n    }\n} ", "question_id": 2524151}, "0.035754980.03575498"], [{"answer_votes": "5", "answer_comments": null, "answer_body": " Try this code:  <?php\n$path = '/var/www/html/project/somefolder';\n\n$dirs = array();\n\n// directory handle\n$dir = dir($path);\n\nwhile (false !== ($entry = $dir->read())) {\n    if ($entry != '.' && $entry != '..') {\n       if (is_dir($path . '/' .$entry)) {\n            $dirs[] = $entry; \n       }\n    }\n}\n\necho \"<pre>\"; print_r($dirs); exit; ", "question_id": 2524151}, "0.020962048"], [{"answer_votes": "1", "answer_comments": null, "answer_body": " You can try this function (PHP 7 required)  function getDirectories(string $path) : array\n{\n    $directories = [];\n    $items = scandir($path);\n    foreach ($items as $item) {\n        if($item == '..' || $item == '.')\n            continue;\n        if(is_dir($path.'/'.$item))\n            $directories[] = $item;\n    }\n    return $directories;\n} ", "question_id": 2524151}, "0.01423581"], [{"answer_votes": "157", "answer_comments": [" that gives subdirectories as well? \u2013 Gordon  Mar 26 '10 at 15:09 ", " You have to do a resursion here \u2013 Josef S\u00e1bl  Nov 18 '10 at 9:31 ", " With recursion, all subdirectories: pastebin.com/qvyF1VWX \u2013 SobiborTreblinka  Apr 29 '14 at 19:36 ", " @developerbmw Note the word or . He presents two different methods of attaining the goal. \u2013 Ken Wayne VanderLinde  Jan 8 '16 at 19:20 ", " While a nice, simple approach, the accepted answer does not answer the question: getting sub-directories from the parent directory (aka siblings of current working directory).  To do so it'd need to change working directory to the parent directory. \u2013 ryanm  Nov 7 '16 at 20:12  "], "answer_body": " you can use glob() with GLOB_ONLYDIR option  or  $dirs = array_filter(glob('*'), 'is_dir');\nprint_r( $dirs); ", "question_id": 2524151}, ""], [{"answer_votes": "118", "answer_comments": [" The simplest solution \u2013 J. Chang  Jan 24 '12 at 14:57 ", " This also include the main directory. \u2013 J. Chang  Jan 24 '12 at 15:35 ", " This does not include the main directory in my case (Windows) \u2013 marcovtwout  Feb 20 '14 at 13:26 ", " This doesn't include the main directory for me on mac linux either. Maybe it has to do with the path used? \u2013 Jake  Jan 6 '17 at 12:41 "], "answer_body": " Here is how you can retrieve only directories with GLOB:  $directories = glob($somePath . '/*' , GLOB_ONLYDIR); ", "question_id": 2524151}, ""], [{"answer_votes": "23", "answer_comments": [" nice thanks! one more question: how can I separate only the sub-dir name from the whole path? \u2013 Adrian M.  Mar 26 '10 at 15:36 ", " @Adrian See dirname  php.net/manual/en/function.dirname.php \u2013 Yacoby  Mar 26 '10 at 15:53 ", " @Adrian Please have a look at the API documentation I gave in your other question. getFilename() will return only the directory name. \u2013 Gordon  Mar 26 '10 at 15:56 ", " +1. This is the true future-oriented way of doing it. \u2013 Flavius  Jan 11 '13 at 10:00 ", " To get rid of the dots, I had to add RecursiveDirectoryIterator::SKIP_DOTS as a second argument to the RecursiveDirectoryIterator constructor. \u2013 colan  Dec 2 '14 at 22:06 "], "answer_body": " Almost the same as in your previous question :  $iterator = new RecursiveIteratorIterator(\n                new RecursiveDirectoryIterator($yourStartingPath), \n            RecursiveIteratorIterator::SELF_FIRST);\n\nforeach($iterator as $file) {\n    if($file->isDir()) {\n        echo strtoupper($file->getRealpath()), PHP_EOL;\n    }\n}  Replace strtoupper with your desired function. ", "question_id": 2524151}, ""], [{"answer_votes": "0", "answer_comments": null, "answer_body": " You can use the glob() function to do this.  Here is some documentation on it: http://php.net/manual/en/function.glob.php  ", "question_id": 2524151}, ""]], "merge_gensim_nltk_code": [[{"answer_votes": "-1", "answer_comments": null, "answer_body": " Find all the files and folders under a specified directory.  function getAllSubdir($dir, &$fullDir = []) {\n    $currentDir = scandir($dir);\n\n    foreach ($currentDir as $key => $val) {\n        $realpath = realpath($dir . DIRECTORY_SEPARATOR . $val);\n        if (!is_dir($realpath) && $filename != \".\" && $filename != \"..\") {\n            getDirRecursive($realpath, $fullDir);\n            $fullDir[] = $realpath;\n        }\n    }\n\n    return $fullDir;\n}\n\nvar_dump(scanDirAndSubdir('C:/web2.0/'));  Sample :  array (size=4)\n  0 => string 'C:/web2.0/config/' (length=17)\n  1 => string 'C:/web2.0/js/' (length=13)\n  2 => string 'C:/web2.0/mydir/' (length=16)\n  3 => string 'C:/web2.0/myfile/' (length=17) ", "question_id": 2524151}, "0.09886108"], [{"answer_votes": "157", "answer_comments": [" that gives subdirectories as well? \u2013 Gordon  Mar 26 '10 at 15:09 ", " You have to do a resursion here \u2013 Josef S\u00e1bl  Nov 18 '10 at 9:31 ", " With recursion, all subdirectories: pastebin.com/qvyF1VWX \u2013 SobiborTreblinka  Apr 29 '14 at 19:36 ", " @developerbmw Note the word or . He presents two different methods of attaining the goal. \u2013 Ken Wayne VanderLinde  Jan 8 '16 at 19:20 ", " While a nice, simple approach, the accepted answer does not answer the question: getting sub-directories from the parent directory (aka siblings of current working directory).  To do so it'd need to change working directory to the parent directory. \u2013 ryanm  Nov 7 '16 at 20:12  "], "answer_body": " you can use glob() with GLOB_ONLYDIR option  or  $dirs = array_filter(glob('*'), 'is_dir');\nprint_r( $dirs); ", "question_id": 2524151}, ""], [{"answer_votes": "118", "answer_comments": [" The simplest solution \u2013 J. Chang  Jan 24 '12 at 14:57 ", " This also include the main directory. \u2013 J. Chang  Jan 24 '12 at 15:35 ", " This does not include the main directory in my case (Windows) \u2013 marcovtwout  Feb 20 '14 at 13:26 ", " This doesn't include the main directory for me on mac linux either. Maybe it has to do with the path used? \u2013 Jake  Jan 6 '17 at 12:41 "], "answer_body": " Here is how you can retrieve only directories with GLOB:  $directories = glob($somePath . '/*' , GLOB_ONLYDIR); ", "question_id": 2524151}, ""], [{"answer_votes": "30", "answer_comments": [" This helped me, Thanks \u2013 salih kallai  Mar 10 '16 at 7:32 "], "answer_body": " The Spl DirectoryIterator class provides a simple interface for viewing the contents of filesystem directories.  $dir = new DirectoryIterator($path);\nforeach ($dir as $fileinfo) {\n    if ($fileinfo->isDir() && !$fileinfo->isDot()) {\n        echo $fileinfo->getFilename().'<br>';\n    }\n} ", "question_id": 2524151}, ""], [{"answer_votes": "23", "answer_comments": [" nice thanks! one more question: how can I separate only the sub-dir name from the whole path? \u2013 Adrian M.  Mar 26 '10 at 15:36 ", " @Adrian See dirname  php.net/manual/en/function.dirname.php \u2013 Yacoby  Mar 26 '10 at 15:53 ", " @Adrian Please have a look at the API documentation I gave in your other question. getFilename() will return only the directory name. \u2013 Gordon  Mar 26 '10 at 15:56 ", " +1. This is the true future-oriented way of doing it. \u2013 Flavius  Jan 11 '13 at 10:00 ", " To get rid of the dots, I had to add RecursiveDirectoryIterator::SKIP_DOTS as a second argument to the RecursiveDirectoryIterator constructor. \u2013 colan  Dec 2 '14 at 22:06 "], "answer_body": " Almost the same as in your previous question :  $iterator = new RecursiveIteratorIterator(\n                new RecursiveDirectoryIterator($yourStartingPath), \n            RecursiveIteratorIterator::SELF_FIRST);\n\nforeach($iterator as $file) {\n    if($file->isDir()) {\n        echo strtoupper($file->getRealpath()), PHP_EOL;\n    }\n}  Replace strtoupper with your desired function. ", "question_id": 2524151}, ""], [{"answer_votes": "5", "answer_comments": null, "answer_body": " Try this code:  <?php\n$path = '/var/www/html/project/somefolder';\n\n$dirs = array();\n\n// directory handle\n$dir = dir($path);\n\nwhile (false !== ($entry = $dir->read())) {\n    if ($entry != '.' && $entry != '..') {\n       if (is_dir($path . '/' .$entry)) {\n            $dirs[] = $entry; \n       }\n    }\n}\n\necho \"<pre>\"; print_r($dirs); exit; ", "question_id": 2524151}, ""], [{"answer_votes": "3", "answer_comments": null, "answer_body": " In Array:  function expandDirectoriesMatrix($base_dir, $level = 0) {\n    $directories = array();\n    foreach(scandir($base_dir) as $file) {\n        if($file == '.' || $file == '..') continue;\n        $dir = $base_dir.DIRECTORY_SEPARATOR.$file;\n        if(is_dir($dir)) {\n            $directories[]= array(\n                    'level' => $level\n                    'name' => $file,\n                    'path' => $dir,\n                    'children' => expandDirectoriesMatrix($dir, $level +1)\n            );\n        }\n    }\n    return $directories;\n}  //access:  $dir = '/var/www/';\n$directories = expandDirectoriesMatrix($dir);\n\necho $directories[0]['level']                // 0\necho $directories[0]['name']                 // pathA\necho $directories[0]['path']                 // /var/www/pathA\necho $directories[0]['children'][0]['name']  // subPathA1\necho $directories[0]['children'][0]['level'] // 1\necho $directories[0]['children'][1]['name']  // subPathA2\necho $directories[0]['children'][1]['level'] // 1  Example to show all:  function showDirectories($list, $parent = array())\n{\n    foreach ($list as $directory){\n        $parent_name = count($parent) ? \" parent: ({$parent['name']}\" : '';\n        $prefix = str_repeat('-', $directory['level']);\n        echo \"$prefix {$directory['name']} $parent_name <br/>\";  // <-----------\n        if(count($directory['children'])){\n            // list the children directories\n            showDirectories($directory['children'], $directory);\n        }\n    }\n}\n\nshowDirectories($directories);\n\n// pathA\n// - subPathA1 (parent: pathA)\n// -- subsubPathA11 (parent: subPathA1)\n// - subPathA2 \n// pathB\n// pathC ", "question_id": 2524151}, ""], [{"answer_votes": "2", "answer_comments": [" This seems overkill when there is a flag GLOB_ONLYDIR , see php.net/manual/en/function.glob.php \u2013 Robert Pounder  Dec 5 '16 at 16:42 "], "answer_body": " Proper way  /**\n * Get all of the directories within a given directory.\n *\n * @param  string  $directory\n * @return array\n */\nfunction directories($directory)\n{\n    $glob = glob($directory . '/*');\n\n    if($glob === false)\n    {\n        return array();\n    }\n\n    return array_filter($glob, function($dir) {\n        return is_dir($dir);\n    });\n}  Inspired by Laravel ", "question_id": 2524151}, ""], [{"answer_votes": "1", "answer_comments": null, "answer_body": " <?php\n    /*this will do what you asked for, it only returns the subdirectory names in a given\n      path, and you can make hyperlinks and use them:\n    */\n\n    $yourStartingPath = \"photos\\\\\";\n    $iterator = new RecursiveIteratorIterator( \n        new RecursiveDirectoryIterator($yourStartingPath),  \n        RecursiveIteratorIterator::SELF_FIRST);\n\n    foreach($iterator as $file) { \n        if($file->isDir()) { \n            $path = strtoupper($file->getRealpath()) ; \n            $path2 = PHP_EOL;\n            $path3 = $path.$path2;\n\n            $result = end(explode('/', $path3)); \n\n            echo \"<br />\". basename($result );\n        } \n    } \n\n    /* best regards,\n        Sanaan Barzinji\n        Erbil\n    */\n?> ", "question_id": 2524151}, ""], [{"answer_votes": "1", "answer_comments": null, "answer_body": " You can try this function (PHP 7 required)  function getDirectories(string $path) : array\n{\n    $directories = [];\n    $items = scandir($path);\n    foreach ($items as $item) {\n        if($item == '..' || $item == '.')\n            continue;\n        if(is_dir($path.'/'.$item))\n            $directories[] = $item;\n    }\n    return $directories;\n} ", "question_id": 2524151}, ""], [{"answer_votes": "0", "answer_comments": null, "answer_body": " You can use the glob() function to do this.  Here is some documentation on it: http://php.net/manual/en/function.glob.php  ", "question_id": 2524151}, ""], [{"answer_votes": "0", "answer_comments": null, "answer_body": " Find all PHP files recursively. The logic should be simple enough to tweak and it aims to be fast(er) by avoiding function calls.  function get_all_php_files($directory) {\n    $directory_stack = array($directory);\n    $ignored_filename = array(\n        '.git' => true,\n        '.svn' => true,\n        '.hg' => true,\n        'index.php' => true,\n    );\n    $file_list = array();\n    while ($directory_stack) {\n        $current_directory = array_shift($directory_stack);\n        $files = scandir($current_directory);\n        foreach ($files as $filename) {\n            //  Skip all files/directories with:\n            //      - A starting '.'\n            //      - A starting '_'\n            //      - Ignore 'index.php' files\n            $pathname = $current_directory . DIRECTORY_SEPARATOR . $filename;\n            if (isset($filename[0]) && (\n                $filename[0] === '.' ||\n                $filename[0] === '_' ||\n                isset($ignored_filename[$filename])\n            )) \n            {\n                continue;\n            }\n            else if (is_dir($pathname) === TRUE) {\n                $directory_stack[] = $pathname;\n            } else if (pathinfo($pathname, PATHINFO_EXTENSION) === 'php') {\n                $file_list[] = $pathname;\n            }\n        }\n    }\n    return $file_list;\n} ", "question_id": 2524151}, ""], [{"answer_votes": "0", "answer_comments": null, "answer_body": " If you're looking for a recursive directory listing solutions. Use below code I hope it should help you.  <?php\n/**\n * Function for recursive directory file list search as an array.\n *\n * @param mixed $dir Main Directory Path.\n *\n * @return array\n */\nfunction listFolderFiles($dir)\n{\n    $fileInfo     = scandir($dir);\n    $allFileLists = [];\n\n    foreach ($fileInfo as $folder) {\n        if ($folder !== '.' && $folder !== '..') {\n            if (is_dir($dir . DIRECTORY_SEPARATOR . $folder) === true) {\n                $allFileLists[$folder . '/'] = listFolderFiles($dir . DIRECTORY_SEPARATOR . $folder);\n            } else {\n                $allFileLists[$folder] = $folder;\n            }\n        }\n    }\n\n    return $allFileLists;\n}//end listFolderFiles()\n\n\n$dir = listFolderFiles('your searching directory path ex:-F:\\xampp\\htdocs\\abc');\necho '<pre>';\nprint_r($dir);\necho '</pre>'\n\n?> ", "question_id": 2524151}, ""], [{"answer_votes": "0", "answer_comments": null, "answer_body": " I have wrote a scanner that works very well and scans directories and subdirecories in each directory and files.  function scanner($path){\n    $result = [];\n    $scan = glob($path . '/*');\n    foreach($scan as $item){\n\n\n        if(is_dir($item))\n            $result[basename($item)] = scanner($item);\n        else\n            $result[] = basename($item);\n    }\n    return $result;\n}  Example  var_dump(scanner($path));  returns:  array(6) {\n  [\"about\"]=>\n  array(2) {\n    [\"factory\"]=>\n    array(0) {\n    }\n    [\"persons\"]=>\n    array(0) {\n    }\n  }\n  [\"contact\"]=>\n  array(0) {\n  }\n  [\"home\"]=>\n  array(1) {\n    [0]=>\n    string(5) \"index.php\"\n  }\n  [\"projects\"]=>\n  array(0) {\n  }\n  [\"researches\"]=>\n  array(0) {\n  }\n  [0]=>\n  string(5) \"index.php\"\n} ", "question_id": 2524151}, ""], [{"answer_votes": "0", "answer_comments": [" I tried all codes above this and none that worked gave what the OP asked for. So I shared what I found worked with some adjustments for a more effective answer. Hope this helps somebody. \u2013 user9605523  1 hour ago "], "answer_body": " For the people who actually want folders and subfolders with no files, just like the OP said, the following code outputs both a list of folders and their subfolders, and an array of the same.  <?php\n/**\n * Function for recursive directory file list search as an                       array.\n *\n * @param mixed $dir Main Directory Path.\n *\n * @return array\n */\nfunction listFolderFiles($dir)\n{\n    $fileInfo     = scandir($dir);\n    $allFileLists = [];\n\nforeach ($fileInfo as $folder) {\n    if ($folder !== '.' && $folder !== '..') {\n        if (is_dir($dir . DIRECTORY_SEPARATOR . $folder)     === true) {\n            $allFileLists[$folder . '/'] = listFolderFiles($dir .     DIRECTORY_SEPARATOR . $folder);\necho ' '. $folder. ' ' <br>';\n            } else {\n                echo' ';\n            }\n        }\n    }\n\n    return $allFileLists;\n}//end listFolderFiles()\n\nlistFolderFiles('C:\\wamp64\\www\\code');\n$dir = listFolderFiles('C:\\wamp64\\www\\code');\necho '<pre>';\nprint_r($dir);\necho '</pre>'\n\n?> ", "question_id": 2524151}, ""]], "question": {"question_title": "PHP Get all subdirectories of a given directory", "question_code": [".", ".."], "question_body": " How can I get all sub-directories of a given directory without files, (current directory) or (parent directory)\nand then use each directory in a function? "}, "time_now": "2018-04-29 12:00:03", "nltk_title_analyze_title_result": [[{"answer_votes": "2", "answer_comments": [" This seems overkill when there is a flag GLOB_ONLYDIR , see php.net/manual/en/function.glob.php \u2013 Robert Pounder  Dec 5 '16 at 16:42 "], "answer_body": " Proper way  /**\n * Get all of the directories within a given directory.\n *\n * @param  string  $directory\n * @return array\n */\nfunction directories($directory)\n{\n    $glob = glob($directory . '/*');\n\n    if($glob === false)\n    {\n        return array();\n    }\n\n    return array_filter($glob, function($dir) {\n        return is_dir($dir);\n    });\n}  Inspired by Laravel ", "question_id": 2524151}, 9], [{"answer_votes": "3", "answer_comments": null, "answer_body": " In Array:  function expandDirectoriesMatrix($base_dir, $level = 0) {\n    $directories = array();\n    foreach(scandir($base_dir) as $file) {\n        if($file == '.' || $file == '..') continue;\n        $dir = $base_dir.DIRECTORY_SEPARATOR.$file;\n        if(is_dir($dir)) {\n            $directories[]= array(\n                    'level' => $level\n                    'name' => $file,\n                    'path' => $dir,\n                    'children' => expandDirectoriesMatrix($dir, $level +1)\n            );\n        }\n    }\n    return $directories;\n}  //access:  $dir = '/var/www/';\n$directories = expandDirectoriesMatrix($dir);\n\necho $directories[0]['level']                // 0\necho $directories[0]['name']                 // pathA\necho $directories[0]['path']                 // /var/www/pathA\necho $directories[0]['children'][0]['name']  // subPathA1\necho $directories[0]['children'][0]['level'] // 1\necho $directories[0]['children'][1]['name']  // subPathA2\necho $directories[0]['children'][1]['level'] // 1  Example to show all:  function showDirectories($list, $parent = array())\n{\n    foreach ($list as $directory){\n        $parent_name = count($parent) ? \" parent: ({$parent['name']}\" : '';\n        $prefix = str_repeat('-', $directory['level']);\n        echo \"$prefix {$directory['name']} $parent_name <br/>\";  // <-----------\n        if(count($directory['children'])){\n            // list the children directories\n            showDirectories($directory['children'], $directory);\n        }\n    }\n}\n\nshowDirectories($directories);\n\n// pathA\n// - subPathA1 (parent: pathA)\n// -- subsubPathA11 (parent: subPathA1)\n// - subPathA2 \n// pathB\n// pathC ", "question_id": 2524151}, 7], [{"answer_votes": "0", "answer_comments": null, "answer_body": " Find all PHP files recursively. The logic should be simple enough to tweak and it aims to be fast(er) by avoiding function calls.  function get_all_php_files($directory) {\n    $directory_stack = array($directory);\n    $ignored_filename = array(\n        '.git' => true,\n        '.svn' => true,\n        '.hg' => true,\n        'index.php' => true,\n    );\n    $file_list = array();\n    while ($directory_stack) {\n        $current_directory = array_shift($directory_stack);\n        $files = scandir($current_directory);\n        foreach ($files as $filename) {\n            //  Skip all files/directories with:\n            //      - A starting '.'\n            //      - A starting '_'\n            //      - Ignore 'index.php' files\n            $pathname = $current_directory . DIRECTORY_SEPARATOR . $filename;\n            if (isset($filename[0]) && (\n                $filename[0] === '.' ||\n                $filename[0] === '_' ||\n                isset($ignored_filename[$filename])\n            )) \n            {\n                continue;\n            }\n            else if (is_dir($pathname) === TRUE) {\n                $directory_stack[] = $pathname;\n            } else if (pathinfo($pathname, PATHINFO_EXTENSION) === 'php') {\n                $file_list[] = $pathname;\n            }\n        }\n    }\n    return $file_list;\n} ", "question_id": 2524151}, 5], [{"answer_votes": "0", "answer_comments": null, "answer_body": " If you're looking for a recursive directory listing solutions. Use below code I hope it should help you.  <?php\n/**\n * Function for recursive directory file list search as an array.\n *\n * @param mixed $dir Main Directory Path.\n *\n * @return array\n */\nfunction listFolderFiles($dir)\n{\n    $fileInfo     = scandir($dir);\n    $allFileLists = [];\n\n    foreach ($fileInfo as $folder) {\n        if ($folder !== '.' && $folder !== '..') {\n            if (is_dir($dir . DIRECTORY_SEPARATOR . $folder) === true) {\n                $allFileLists[$folder . '/'] = listFolderFiles($dir . DIRECTORY_SEPARATOR . $folder);\n            } else {\n                $allFileLists[$folder] = $folder;\n            }\n        }\n    }\n\n    return $allFileLists;\n}//end listFolderFiles()\n\n\n$dir = listFolderFiles('your searching directory path ex:-F:\\xampp\\htdocs\\abc');\necho '<pre>';\nprint_r($dir);\necho '</pre>'\n\n?> ", "question_id": 2524151}, 4], [{"answer_votes": "0", "answer_comments": [" I tried all codes above this and none that worked gave what the OP asked for. So I shared what I found worked with some adjustments for a more effective answer. Hope this helps somebody. \u2013 user9605523  1 hour ago "], "answer_body": " For the people who actually want folders and subfolders with no files, just like the OP said, the following code outputs both a list of folders and their subfolders, and an array of the same.  <?php\n/**\n * Function for recursive directory file list search as an                       array.\n *\n * @param mixed $dir Main Directory Path.\n *\n * @return array\n */\nfunction listFolderFiles($dir)\n{\n    $fileInfo     = scandir($dir);\n    $allFileLists = [];\n\nforeach ($fileInfo as $folder) {\n    if ($folder !== '.' && $folder !== '..') {\n        if (is_dir($dir . DIRECTORY_SEPARATOR . $folder)     === true) {\n            $allFileLists[$folder . '/'] = listFolderFiles($dir .     DIRECTORY_SEPARATOR . $folder);\necho ' '. $folder. ' ' <br>';\n            } else {\n                echo' ';\n            }\n        }\n    }\n\n    return $allFileLists;\n}//end listFolderFiles()\n\nlistFolderFiles('C:\\wamp64\\www\\code');\n$dir = listFolderFiles('C:\\wamp64\\www\\code');\necho '<pre>';\nprint_r($dir);\necho '</pre>'\n\n?> ", "question_id": 2524151}, 4], [{"answer_votes": "-1", "answer_comments": null, "answer_body": " Find all the files and folders under a specified directory.  function getAllSubdir($dir, &$fullDir = []) {\n    $currentDir = scandir($dir);\n\n    foreach ($currentDir as $key => $val) {\n        $realpath = realpath($dir . DIRECTORY_SEPARATOR . $val);\n        if (!is_dir($realpath) && $filename != \".\" && $filename != \"..\") {\n            getDirRecursive($realpath, $fullDir);\n            $fullDir[] = $realpath;\n        }\n    }\n\n    return $fullDir;\n}\n\nvar_dump(scanDirAndSubdir('C:/web2.0/'));  Sample :  array (size=4)\n  0 => string 'C:/web2.0/config/' (length=17)\n  1 => string 'C:/web2.0/js/' (length=13)\n  2 => string 'C:/web2.0/mydir/' (length=16)\n  3 => string 'C:/web2.0/myfile/' (length=17) ", "question_id": 2524151}, 3], [{"answer_votes": "30", "answer_comments": [" This helped me, Thanks \u2013 salih kallai  Mar 10 '16 at 7:32 "], "answer_body": " The Spl DirectoryIterator class provides a simple interface for viewing the contents of filesystem directories.  $dir = new DirectoryIterator($path);\nforeach ($dir as $fileinfo) {\n    if ($fileinfo->isDir() && !$fileinfo->isDot()) {\n        echo $fileinfo->getFilename().'<br>';\n    }\n} ", "question_id": 2524151}, 2], [{"answer_votes": "1", "answer_comments": null, "answer_body": " <?php\n    /*this will do what you asked for, it only returns the subdirectory names in a given\n      path, and you can make hyperlinks and use them:\n    */\n\n    $yourStartingPath = \"photos\\\\\";\n    $iterator = new RecursiveIteratorIterator( \n        new RecursiveDirectoryIterator($yourStartingPath),  \n        RecursiveIteratorIterator::SELF_FIRST);\n\n    foreach($iterator as $file) { \n        if($file->isDir()) { \n            $path = strtoupper($file->getRealpath()) ; \n            $path2 = PHP_EOL;\n            $path3 = $path.$path2;\n\n            $result = end(explode('/', $path3)); \n\n            echo \"<br />\". basename($result );\n        } \n    } \n\n    /* best regards,\n        Sanaan Barzinji\n        Erbil\n    */\n?> ", "question_id": 2524151}, 2], [{"answer_votes": "0", "answer_comments": null, "answer_body": " I have wrote a scanner that works very well and scans directories and subdirecories in each directory and files.  function scanner($path){\n    $result = [];\n    $scan = glob($path . '/*');\n    foreach($scan as $item){\n\n\n        if(is_dir($item))\n            $result[basename($item)] = scanner($item);\n        else\n            $result[] = basename($item);\n    }\n    return $result;\n}  Example  var_dump(scanner($path));  returns:  array(6) {\n  [\"about\"]=>\n  array(2) {\n    [\"factory\"]=>\n    array(0) {\n    }\n    [\"persons\"]=>\n    array(0) {\n    }\n  }\n  [\"contact\"]=>\n  array(0) {\n  }\n  [\"home\"]=>\n  array(1) {\n    [0]=>\n    string(5) \"index.php\"\n  }\n  [\"projects\"]=>\n  array(0) {\n  }\n  [\"researches\"]=>\n  array(0) {\n  }\n  [0]=>\n  string(5) \"index.php\"\n} ", "question_id": 2524151}, 2], [{"answer_votes": "5", "answer_comments": null, "answer_body": " Try this code:  <?php\n$path = '/var/www/html/project/somefolder';\n\n$dirs = array();\n\n// directory handle\n$dir = dir($path);\n\nwhile (false !== ($entry = $dir->read())) {\n    if ($entry != '.' && $entry != '..') {\n       if (is_dir($path . '/' .$entry)) {\n            $dirs[] = $entry; \n       }\n    }\n}\n\necho \"<pre>\"; print_r($dirs); exit; ", "question_id": 2524151}, 1], [{"answer_votes": "1", "answer_comments": null, "answer_body": " You can try this function (PHP 7 required)  function getDirectories(string $path) : array\n{\n    $directories = [];\n    $items = scandir($path);\n    foreach ($items as $item) {\n        if($item == '..' || $item == '.')\n            continue;\n        if(is_dir($path.'/'.$item))\n            $directories[] = $item;\n    }\n    return $directories;\n} ", "question_id": 2524151}, 1], [{"answer_votes": "157", "answer_comments": [" that gives subdirectories as well? \u2013 Gordon  Mar 26 '10 at 15:09 ", " You have to do a resursion here \u2013 Josef S\u00e1bl  Nov 18 '10 at 9:31 ", " With recursion, all subdirectories: pastebin.com/qvyF1VWX \u2013 SobiborTreblinka  Apr 29 '14 at 19:36 ", " @developerbmw Note the word or . He presents two different methods of attaining the goal. \u2013 Ken Wayne VanderLinde  Jan 8 '16 at 19:20 ", " While a nice, simple approach, the accepted answer does not answer the question: getting sub-directories from the parent directory (aka siblings of current working directory).  To do so it'd need to change working directory to the parent directory. \u2013 ryanm  Nov 7 '16 at 20:12  "], "answer_body": " you can use glob() with GLOB_ONLYDIR option  or  $dirs = array_filter(glob('*'), 'is_dir');\nprint_r( $dirs); ", "question_id": 2524151}, 0], [{"answer_votes": "118", "answer_comments": [" The simplest solution \u2013 J. Chang  Jan 24 '12 at 14:57 ", " This also include the main directory. \u2013 J. Chang  Jan 24 '12 at 15:35 ", " This does not include the main directory in my case (Windows) \u2013 marcovtwout  Feb 20 '14 at 13:26 ", " This doesn't include the main directory for me on mac linux either. Maybe it has to do with the path used? \u2013 Jake  Jan 6 '17 at 12:41 "], "answer_body": " Here is how you can retrieve only directories with GLOB:  $directories = glob($somePath . '/*' , GLOB_ONLYDIR); ", "question_id": 2524151}, 0], [{"answer_votes": "23", "answer_comments": [" nice thanks! one more question: how can I separate only the sub-dir name from the whole path? \u2013 Adrian M.  Mar 26 '10 at 15:36 ", " @Adrian See dirname  php.net/manual/en/function.dirname.php \u2013 Yacoby  Mar 26 '10 at 15:53 ", " @Adrian Please have a look at the API documentation I gave in your other question. getFilename() will return only the directory name. \u2013 Gordon  Mar 26 '10 at 15:56 ", " +1. This is the true future-oriented way of doing it. \u2013 Flavius  Jan 11 '13 at 10:00 ", " To get rid of the dots, I had to add RecursiveDirectoryIterator::SKIP_DOTS as a second argument to the RecursiveDirectoryIterator constructor. \u2013 colan  Dec 2 '14 at 22:06 "], "answer_body": " Almost the same as in your previous question :  $iterator = new RecursiveIteratorIterator(\n                new RecursiveDirectoryIterator($yourStartingPath), \n            RecursiveIteratorIterator::SELF_FIRST);\n\nforeach($iterator as $file) {\n    if($file->isDir()) {\n        echo strtoupper($file->getRealpath()), PHP_EOL;\n    }\n}  Replace strtoupper with your desired function. ", "question_id": 2524151}, 0], [{"answer_votes": "0", "answer_comments": null, "answer_body": " You can use the glob() function to do this.  Here is some documentation on it: http://php.net/manual/en/function.glob.php  ", "question_id": 2524151}, 0]], "question_id": 2524151}