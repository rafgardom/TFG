{"answers": [{"answer_votes": "18320", "answer_comments": [" And if the commit was to the wrong branch, you may git checkout theRightBranch with all the changes stages. As I just had to do. \u2013 Frank Shearar  Oct 5 '10 at 15:44 ", " If you're working in DOS, instead of git reset --soft HEAD^ you'll need to use git reset --soft HEAD~1 .  The ^ is a continuation character in DOS so it won't work properly.  Also, --soft is the default, so you can omit it if you like and just say git reset HEAD~1 . \u2013 Ryan Lundy  Apr 13 '11 at 14:15 ", " Also, in zsh you have to quote ^, so git reset --soft 'HEAD^' ... at least I did \u2013 jberryman  Oct 27 '11 at 18:24 ", " (Correction to what I wrote above; --mixed is the default. --mixed means to keep the changed files, but not keep them in the index. --soft would keep the changed files and keep them in the index as they were just before the changed commit.  Sorry for the confusion.) \u2013 Ryan Lundy  Nov 17 '11 at 2:40 ", " zsh users might get: zsh: no matches found: HEAD^ - you need to escape ^ i.e. git reset --soft HEAD\\^ \u2013 tnajdek  Feb 21 '13 at 17:47  "], "answer_body": " Undo a commit and redo  $ git commit -m \"Something terribly misguided\"              (1)\n$ git reset HEAD~                                           (2)\n<< edit files as necessary >>                               (3)\n$ git add ...                                               (4)\n$ git commit -c ORIG_HEAD                                   (5)   This is what you want to undo  This leaves your working tree (the state of your files on disk) unchanged but undoes the commit and leaves the changes you committed unstaged (so they'll appear as \"Changes not staged for commit\" in git status , and you'll need to add them again before committing). If you only want to add more changes to the previous commit, or change the commit message 1 , you could use git reset --soft HEAD~ instead, which is like git reset HEAD~ (where HEAD~ is the same as HEAD~1 ) but leaves your existing changes staged.  Make corrections to working tree files.  git add anything that you want to include in your new commit.  Commit the changes, reusing the old commit message. reset copied the old head to .git/ORIG_HEAD ; commit with -c ORIG_HEAD will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the -C option.    1 Note, however, that you don't need to reset to an earlier commit if you just made a mistake in your commit message . The easier option is to git reset (to upstage any changes you've made since) and then git commit --amend , which will open your default commit message editor pre-populated with the last commit message.  Beware however that if you have added any new changes to the index, using commit --amend will add them to your previous commit.  ---- Edit by Frank R. 2018-3-9  If pushed,  git push origin master --force ", "question_id": 927358}, {"answer_votes": "9502", "answer_comments": [" @dma_k, yes.  Or you could do git reset --hard HEAD^^ once.  I use the tilde (~) notation because the caret (^) notation doesn't work in DOS. \u2013 Ryan Lundy  Feb 25 '12 at 15:02 ", " Another nice tip: You can re-attach the branch to the commit that you removed it from with git branch -f <branch> <commit-id> . Saves having to re-create commits! \u2013 naught101  Jun 22 '12 at 13:11  ", " For a git beginner, it isn't obvious what the difference is between the last two options (--soft and the one above it). Mentioning the index doesn't help, we don't really know what that means yet. @nessur's connection between soft and Ctrl-Z really helped! But I still don't quite understand the difference between the two options. \u2013 Stomp  Jun 26 '12 at 15:56 ", " It's much better to be told 'why' something works, than just to be told the answer. Kudos to this description - it helped be 'get' git. \u2013 Chris Nash  Jul 3 '12 at 19:13 ", " Missing a crucial point: If the said commit was previously 'pushed' to the remote, any 'undo' operation, no matter how simple, will cause enormous pain and suffering to the rest of the users who have this commit in their local copy, when they do a 'git pull' in the future.  So, if the commit was already 'pushed', do this instead:      git revert <bad-commit-sha1-id>     git push origin : \u2013 FractalSpace  Nov 8 '13 at 23:43  "], "answer_body": " Undoing a commit is a little scary if you don't know how it works.  But it's actually amazingly easy if you do understand.  Say you have this, where C is your HEAD and (F) is the state of your files.  (F)\nA-B-C\n    \u2191\n  master  You want to nuke commit C and never see it again .  You do this:  git reset --hard HEAD~1  The result is:  (F)\nA-B\n  \u2191\nmaster  Now B is the HEAD.  Because you used --hard , your files are reset to their state at commit B.  Ah, but suppose commit C wasn't a disaster, but just a bit off.  You want to undo the commit but keep your changes for a bit of editing before you do a better commit.  Starting again from here, with C as your HEAD:  (F)\nA-B-C\n    \u2191\n  master  You can do this, leaving off the --hard :  git reset HEAD~1  In this case the result is:  (F)\nA-B-C\n  \u2191\nmaster  In both cases, HEAD is just a pointer to the latest commit.  When you do a git reset HEAD~1 , you tell Git to move the HEAD pointer back one commit.  But (unless you use --hard ) you leave your files as they were.  So now git status shows the changes you had checked into C.  You haven't lost a thing!  For the lightest touch, you can even undo your commit but leave your files and your index :  git reset --soft HEAD~1  This not only leaves your files alone, it even leaves your index alone.  When you do git status , you'll see that the same files are in the index as before.  In fact, right after this command, you could do git commit and you'd be redoing the same commit you just had.  One more thing: Suppose you destroy a commit as in the first example, but then discover you needed it after all ?  Tough luck, right?  Nope, there's still a way to get it back.  Type git reflog and you'll see a list of (partial) commit shas that you've moved around in.  Find the commit you destroyed, and do this:  git checkout -b someNewBranchName shaYouDestroyed  You've now resurrected that commit.  Commits don't actually get destroyed in Git for some 90 days, so you can usually go back and rescue one you didn't mean to get rid of. ", "question_id": 927358}, {"answer_votes": "1647", "answer_comments": [" I found this answer the clearest. git revert HEAD^ is not the previous, is the previous of the previous. I did : git revert HEAD and then push again and it worked :) \u2013 nacho4d  Jul 14 '11 at 8:32  ", " @riezebosch: your warning is in the wrong place. THIS answer doesn't mess up things, cause it correctly creates a new commit 102: \"restoring the file I removed on accident\" \u2013 rubo77  Jan 6 '14 at 8:37  ", " This was most helpful to me. I needed to know how to revert a public commit. Thanks! \u2013 FearlessFuture  Jan 25 at 22:25 "], "answer_body": " This took me a while to figure out, so maybe this will help someone...  There are two ways to \"undo\" your last commit, depending on whether or not you have already made your commit public (pushed to your remote repository):  How to undo a local commit  Let's say I committed locally, but now want to remove that commit.  git log\n    commit 101: bad commit    # latest commit, this would be called 'HEAD'\n    commit 100: good commit   # second to last commit, this is the one we want  To restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD :  git reset --soft HEAD^     # use --soft if you want to keep your changes\ngit reset --hard HEAD^     # use --hard if you don't care about keeping the changes you made  Now git log will show that our last commit has been removed.  How to undo a public commit  If you have already made your commits public, you will want to create a new commit which will \"revert\" the changes you made in your previous commit (current HEAD).  git revert HEAD  Your changes will now be reverted and ready for you to commit:  git commit -m 'restoring the file I removed by accident'\ngit log\n    commit 102: restoring the file I removed by accident\n    commit 101: removing a file we don't need\n    commit 100: adding a file that we need  For more info, check out Git Basics - Undoing Things ", "question_id": 927358}, {"answer_votes": "1590", "answer_comments": [" Does this work when I did a git commit --amend and what I really meant to do is a git commit ? \u2013 dbm  May 18 '11 at 13:07 ", " @dbm, if you accidentally amended, use git reset --soft <oldref> , where oldref is the commit ID before the amend. You can use git reflog to identify the old commit ID. This will undo the effects of the amend, but leave changes staged. Then just do git commit to commit as a regular commit. \u2013 bdonlan  May 18 '11 at 14:20 ", " @Dennis, git commit --amend turns the current tree (ie, staged changes) into a commit, overwriting current HEAD. After that point, they're not considered staged anymore because they're part of the commit (ie, git diff --cached is blank), but they're not \"removed\" or \"lost\". \u2013 bdonlan  Feb 1 '12 at 3:08 "], "answer_body": " Add/remove files to get things the way you want:  git rm classdir\ngit add sourcedir  Then amend the commit:  git commit --amend  The previous, erroneous commit will be edited to reflect the new index state - in other words, it'll be like you never made the mistake in the first place.  Note that you should only do this if you haven't pushed yet. If you have pushed, then you'll just have to commit a fix normally. ", "question_id": 927358}, {"answer_votes": "834", "answer_comments": [" \"--hard\" will get rid of the modified .java files in the working directory that he wanted to commit. \u2013 Esko Luontola  May 29 '09 at 18:26 ", " You can \"git stash save\" working copy changes, do a hard reset and then \"git stash pop\" to get them back, though I suppose a soft reset would be simpler. \u2013 Asad R.  Apr 15 '11 at 13:33 ", " git commit -a -m \"\" or git commit -am \"\" naturally! :] \u2013 trejder  Jun 21 '14 at 16:31 ", " Another 'shortcut' use of stash; if you want to unstage everything (undo git add), just git stash , then git stash pop \u2013 seanriordan08  Dec 8 '15 at 22:30 "], "answer_body": " git rm yourfiles/*.class\ngit commit -a -m \"deleted all class files in folder 'yourfiles'\"  or  git reset --hard HEAD~1  Warning: The above command will permanently remove the modifications to the .java files (and any other files) that you wanted to commit.  The hard reset to HEAD-1 will set your working copy to the state of the commit before your wrong commit. ", "question_id": 927358}, {"answer_votes": "655", "answer_comments": null, "answer_body": " To change the last commit  Replace the files in the index:  git rm --cached *.class\ngit add *.java  Then, if it's a private branch, amend the commit:  git commit --amend  Or, if it's a shared branch, make a new commit:  git commit -m 'Replace .class files with .java files'   ( to change a previous commit , use the awesome interactive rebase )   ProTip\u2122: \u00a0 Add *.class to a gitignore to stop this happening again.   To revert a commit  Amending a commit is the ideal solution if you need to change the last commit, but a more general solution is reset .  You can reset git to any commit with:  git reset @~N  Where N is the number of commits before HEAD , and @~ resets to the previous commit.  So, instead of amending the commit, you could use:  git reset @~\ngit add *.java\ngit commit -m \"Add .java files\"  Check out git help reset , specifically the sections on --soft  --mixed and --hard , for a better understanding of what this does.  Reflog  If you mess up, you can always use the reflog to find dropped commits:  $ git reset @~\n$ git reflog\nc4f708b HEAD@{0}: reset: moving to @~\n2c52489 HEAD@{1}: commit: added some .class files\n$ git reset 2c52489\n... and you're back where you started  ", "question_id": 927358}, {"answer_votes": "525", "answer_comments": [" If you committed to the wrong branch: once reverted, switch to the correct branch and cherry-pick the commit. \u2013 Kris  Jun 27 '12 at 11:02 ", " What does that mean, cherry pick the commit? In my case, I was on the wrong branch when I edited a file. I committed it then realized I was in the wrong branch. Using \"git reset --soft HEAD~1\" got me back to just before the commit, but now if I checkout the correct branch, how do I undo the changes to the file in wrong branch but instead make them (in the same named file) in the correct branch? \u2013 astronomerdave  Jan 13 '15 at 22:05 ", " I just utilized git revert commit-id worked like a charm.  Of course then you will need to push your changes. \u2013 Casey Robinson  Jan 25 '16 at 21:07  ", " I believe that would be git cherry-pick <<erroneous-commit-sha>> @astronomerdave. From, Mr. Almost-2-Years-Late-to-the-Party. \u2013 Tom Howard  Oct 20 '16 at 18:19 "], "answer_body": " Use git revert commit-id  To get the commit ID, just use git log ", "question_id": 927358}, {"answer_votes": "418", "answer_comments": [" @SMR, In your example, all are pointing into current HEAD only. HEAD^ = HEAD^1. As well as HEAD^1 = HEAD~1.  When you use HEAD~2, there is a difference between ~ and ^ symbols. If you use ~2 means \u201cthe first parent of the first parent,\u201d or \u201cthe grandparent\u201d. \u2013 Madhan Ayyasamy  Dec 14 '15 at 15:34  ", " clear and easy to understand, save my night ! \u2013 Vladimir Ch  Mar 14 at 19:10 ", " Apparently, I accidentally downvoted this answer, and it's too late for me to un-downvote it. Apologies. \u2013 Matt  Apr 9 at 17:20 "], "answer_body": " If you are planning undoing a local commit entirely, whatever you changes you did on the commit, and if you don't worry anything about that, just do the following command.  git reset --hard HEAD^1  (This command will ignore your entire commit and your changes will be lost completely from your local working tree). If you want to undo your commit, but you want your changes in the staging area (before commit just like after git add ) then do the following command.  git reset --soft HEAD^1  Now your committed files comes into the staging area. Suppose if you want to unstage the files, because you need to edit some wrong conent, then do the following command  git reset HEAD  Now committed files come from the staged area into the unstaged area. Now files are ready to edit, so whatever you changes, you want go edit and added it and make a fresh/new commit.  More ", "question_id": 927358}, {"answer_votes": "413", "answer_comments": null, "answer_body": " If you have Git Extras installed, you can run git undo to undo the latest commit. git undo 3 will undo the last 3 commits. ", "question_id": 927358}, {"answer_votes": "382", "answer_comments": [" Rewriting history on a shared repository is generally a very bad idea.  I assume you know what you're doing, I just hope future readers do too. \u2013 Brad Koch  Dec 7 '12 at 16:02  ", " Yes rollback is dangerous. Make sure that your working copy is in the desired state before you push. When pushing then the unwanted commits gets deleted permanently. \u2013 neoneye  Dec 8 '12 at 14:14 ", " \"Just like in the real world, if you want to rewrite history, you need a conspiracy: everybody has to be 'in' on the conspiracy (at least everybody who knows about the history, i.e. everybody who has ever pulled from the branch).\" Source: stackoverflow.com/a/2046748/334451 \u2013 Mikko Rantalainen  Aug 7 '13 at 10:10 ", " fantastic. This worked like a charm. There should be a git option for independently working developers - where one can use GitX, or a delete button next to a commit, and a confirmation - so this process is not so enigmatic :) \u2013 zero_cool  Jun 20 '14 at 15:31 "], "answer_body": " I wanted to undo the lastest 5 commits in our shared repository. I looked up the revision id that I wanted to rollback to. Then I typed in the following.  prompt> git reset --hard 5a7404742c85\nHEAD is now at 5a74047 Added one more page to catalogue\nprompt> git push origin master --force\nTotal 0 (delta 0), reused 0 (delta 0)\nremote: bb/acl: neoneye is allowed. accepted payload.\nTo git@bitbucket.org:thecompany/prometheus.git\n + 09a6480...5a74047 master -> master (forced update)\nprompt> ", "question_id": 927358}, {"answer_votes": "367", "answer_comments": null, "answer_body": " I prefer to use git rebase -i for this job, because a nice list pops up where I can choose the commits to get rid of. It might not be as direct as some other answers here, but it just feels right .  Choose how many commits you want to list, then invoke like this (to enlist last three)  git rebase -i HEAD~3  Sample list  pick aa28ba7 Sanity check for RtmpSrv port\npick c26c541 RtmpSrv version option\npick 58d6909 Better URL decoding support  Then git will remove commits for any line that you remove. ", "question_id": 927358}, {"answer_votes": "338", "answer_comments": [" gitk --all $(git reflog | cut -c1-7)& may be helpful for finding the previous revision if you want to undo an '--amend' commit. \u2013 nobar  Oct 18 '14 at 23:38  ", " It should be noted that if you're attempting to remove secret information before pushing to a shared repository, doing a revert won't help you, because the information will still be in the history in the previous commit.  If you want to ensure the change is never visible to others you need to use git reset \u2013 Jherico  Sep 4 '15 at 4:52 ", " See also: stackoverflow.com/a/30598953 \u2013 nobar  Apr 5 '16 at 4:20 ", " I think 'private'/'public' would more correctly be 'local'/'remote'. \u2013 nobar  Mar 28 at 14:59 "], "answer_body": " How to fix the previous local commit  Use git-gui (or similar) to perform a git commit --amend . From the GUI you can add or remove individual files from the commit. You can also modify the commit message.  How to undo the previous local commit  Just reset your branch to the previous location (for example, using gitk or git rebase ). Then reapply your changes from a saved copy. After garbage collection in your local repository, it will be like the unwanted commit never happened. To do all of that in a single command, use git reset HEAD~1 .  Word of warning : Careless use of git reset is a good way to get your working copy into a confusing state. I recommend that Git novices avoid this if they can.  How to undo a public commit  Perform a reverse cherry pick ( git-revert ) to undo the changes.  If you haven't yet pulled other changes onto your branch, you can simply do...  git revert --no-edit HEAD  Then push your updated branch to the shared repository.  The commit history will show both commits, separately .   Advanced: Correction of private branch in public repository  This can be dangerous -- be sure you have a local copy of the branch to repush.  Also note: You don't want to do this if someone else may be working on the branch.  git push --delete (branch_name) ## remove public version of branch  Cleanup your branch locally then repush...  git push origin (branch_name)  In the normal case, you probably needn't worry about your private-branch commit history being pristine.  Just push a followup commit (see 'How to undo a public commit' above), and later, do a squash-merge to hide the history. ", "question_id": 927358}, {"answer_votes": "283", "answer_comments": [" I'm in the 2nd case, but when I do \"git revert HEAD\" it says \"error: Commit [ID] is a merge but no -m option was given.  fatal: revert failed\".  Any suggestions? \u2013 metaforge  Nov 12 '14 at 19:36 ", " Probably worth mentioning that instead of HEAD~1 you could use the actual hash as displayed by git log --stat or by git reflog - useful when you need to 'undo' more than one commit. \u2013 ccpizza  Dec 7 '14 at 0:38 "], "answer_body": " If you have committed junk but not pushed,  git reset --soft HEAD~1   HEAD~1 is a shorthand for the commit before head. Alternatively you can refer to the SHA-1 of the hash if you want to reset to. --soft option will delete the commit but it will leave all your changed files \"Changes to be committed\", as git status would put it.  If you want to get rid of any changes to tracked files in the working tree since the commit before head use \" --hard \" instead.   OR   If you already pushed and someone pulled which is usually my case, you can't use git reset . You can however do a git revert ,   git revert HEAD   This will create a new commit that reverses everything introduced by the accidental commit.  ", "question_id": 927358}, {"answer_votes": "281", "answer_comments": [" Should be marked as answer, because you can specify which SHA you want. \u2013 Belfield  Jul 28 '17 at 10:49 ", " What if you do not use \"<commit_id>\" and simply use \"git reset --hard\"? I typically just want to get rid of my latest updates that I have not committed yet and got back to the latest commit I made, and I always use \"git reset --hard\". \u2013 Jaime Montoya  Sep 27 '17 at 23:30 ", " @JaimeMontoya To undo latest changes you can use git reset --hard , but if you have to hard remove last \"n\" commits you specify a SHA \u2013 poorva  Sep 28 '17 at 13:10 ", " Really like -f . This is what other answers lack \u2013 FreeLightman  Mar 1 at 8:58 "], "answer_body": " If you want to permanently undo it and you have cloned some repository  The commit id can be seen by  git log  Then you can do -  git reset --hard <commit_id>\n\ngit push origin <branch_name> -f ", "question_id": 927358}, {"answer_votes": "238", "answer_comments": null, "answer_body": " On SourceTree (GUI for GitHub), you may right-click the commit and do a 'Reverse Commit'. This should undo your changes.  On the terminal:  You may alternatively use:  git revert  Or:  git reset --soft HEAD^ # Use --soft if you want to keep your changes.\ngit reset --hard HEAD^ # Use --hard if you don't care about keeping your changes. ", "question_id": 927358}, {"answer_votes": "224", "answer_comments": [" I needed to write git reset --soft \"HEAD^\" with double quotes, because I write it from Windows command prompt. \u2013 Ena  Apr 23 '14 at 9:13 ", " It should work without any quotes. \u2013 jkulak  Nov 10 '16 at 19:19 "], "answer_body": " A single command:  git reset --soft 'HEAD^'  It works great to undo the last local commit! ", "question_id": 927358}, {"answer_votes": "191", "answer_comments": null, "answer_body": " How to undo the last Git commit?  To restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD.   If you don't want to keep your changes that you made:  git reset --hard HEAD^  If you want to keep your changes:  git reset --soft HEAD^   Now check your git log. It will show that our last commit has been removed. ", "question_id": 927358}, {"answer_votes": "189", "answer_comments": null, "answer_body": " Just reset it doing the command below using git :  git reset --soft HEAD~1  Explain: what git reset does, it's basically reset to any commit you'd like to go back to, then if you combine it with --soft key, it will go back, but keep the  changes in your file(s), so you get back to the stage which the file was just added, HEAD is the head of the branch and if you combine with ~1 (in this case you also use HEAD^ ), it will go back only one commit which what you want...  I create the steps in the image below in more details for you, including all steps that may happens in real situations and committing the code:  ", "question_id": 927358}, {"answer_votes": "158", "answer_comments": null, "answer_body": " Use reflog to find a correct state  git reflog   REFLOG BEFORE RESET  Select the correct reflog (f3cb6e2 in my case) and type  git reset --hard f3cb6e2  After that the repo HEAD will be reset to that HEADid  LOG AFTER RESET  Finally the reflog looks like the picture below   REFLOG FINAL ", "question_id": 927358}, {"answer_votes": "145", "answer_comments": null, "answer_body": " \"Reset the working tree to the last commit\"  git reset --hard HEAD^  \"Clean unknown files from the working tree\"  git clean  see - Git Quick Reference  NOTE: This command will delete your previous commit, so use with caution! git reset --hard is safer \u2013 ", "question_id": 927358}, {"answer_votes": "142", "answer_comments": null, "answer_body": " First run:  git reflog  It will show you all the possible actions you have performed on your repository, for example, commit, merge, pull, etc.  Then do:  git reset --hard ActionIdFromRefLog ", "question_id": 927358}, {"answer_votes": "128", "answer_comments": null, "answer_body": " Another way:  Checkout the branch you want to revert, then reset your local working copy back to the commit that you want to be the latest one on the remote server (everything after it will go bye-bye). To do this, in SourceTree I right-clicked on the and selected \"Reset BRANCHNAME to this commit\".  Then navigate to your repository's local directory and run this command:  git -c diff.mnemonicprefix=false -c core.quotepath=false push -v -f --tags REPOSITORY_NAME BRANCHNAME:BRANCHNAME  This will erase all commits after the current one in your local repository but only for that one branch. ", "question_id": 927358}, {"answer_votes": "124", "answer_comments": null, "answer_body": " Undo last commit:  git reset --soft HEAD^ or git reset --soft HEAD~  This will undo the last commit.  Here --soft means reset into staging.  HEAD~ or HEAD^ means to move to commit before HEAD.   Replace last commit to new commit:  git commit --amend -m \"message\"  It will replace the last commit with the new commit. ", "question_id": 927358}, {"answer_votes": "122", "answer_comments": null, "answer_body": " Type git log and find the last commit hash code and then enter:  git reset <the previous co> ", "question_id": 927358}, {"answer_votes": "120", "answer_comments": null, "answer_body": " In my case I accidentally committed some files I did not want to. So I did the following and it worked:  git reset --soft HEAD^\ngit rm --cached [files you do not need]\ngit add [files you need]\ngit commit -c ORIG_HEAD  Verify the results with gitk or git log --stat ", "question_id": 927358}, {"answer_votes": "106", "answer_comments": null, "answer_body": " There are two main scenarios  You haven't pushed the commit yet  If the problem was extra files you commited (and you don't want those on repository), you can remove them using git rm and then commiting with --amend  git rm <pathToFile>  You can also remove entire directories with -r , or even combine with other Bash commands  git rm -r <pathToDirectory>\ngit rm $(find -name '*.class')  After removing the files, you can commit, with --amend option  git commit --amend -C HEAD # the -C option is to use the same commit message  This will rewrite your recent local commit removing the extra files, so, these files will never be sent on push and also will be removed from your local .git repository by GC.  You already pushed the commit  You can apply the same solution of the other scenario and then doing git push with the -f option, but it is not recommended since it overwrites the remote history with a divergent change (it can mess your repository).  Instead, you have to do the commit without --amend (remember this about -amend`: That option rewrites the history on the last commit). ", "question_id": 927358}, {"answer_votes": "105", "answer_comments": null, "answer_body": " Use SourceTree (graphical tool for Git) to see your commits and tree. You can manually reset it directly by right clicking it. ", "question_id": 927358}, {"answer_votes": "92", "answer_comments": null, "answer_body": " Simple, run this in your command line:  git reset --soft HEAD~ ", "question_id": 927358}, {"answer_votes": "85", "answer_comments": [" Maybe you could at a note/warning that his command will throw away the commit and the changes in the working directory without asking any further. \u2013 cr7pt0gr4ph7  Nov 24 '14 at 22:35  ", " If you happen to do this by accident, not all is lost, though. See stackoverflow.com/questions/10099258/\u2026 , stackoverflow.com/questions/15479501/\u2026 and stackoverflow.com/questions/7374069/undo-git-reset-hard/7376959 . \u2013 cr7pt0gr4ph7  Nov 24 '14 at 22:40 ", " Use --soft to keep your changes as uncommitted changes , --hard to nuke the commit completely and revert back by one. Remember to do such operations only on changes, that are not pushed yet. \u2013 Yunus Nedim Mehel  Mar 9 '15 at 9:11 ", " @Zaz: You are right; maybe I should have clarified that. Only files/changes that have been either added to index (/staged) or have been committed can possibly be recovered. Uncommitted, unstaged changes are , as you said, completely thrown away by git reset --hard . \u2013 cr7pt0gr4ph7  Sep 13 '16 at 21:17 ", " As a sidenote: Everytime a file is staged, git stores its contents in its object database. The stored contents are only removed when garbage collection is executed. It is therefore possible to recover the last staged version of a file that was not currently staged when git reset --hard was executed (see the posts linked above for more information). \u2013 cr7pt0gr4ph7  Sep 13 '16 at 21:22  "], "answer_body": " To reset to the previous revision, permanently deleting all uncommitted changes:  git reset --hard HEAD~1 ", "question_id": 927358}, {"answer_votes": "79", "answer_comments": null, "answer_body": " This article has an excellent explanation as to how to go about various scenarios (where a commit has been done as well as the push OR just a commit, before the push):  http://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html  From the article, the easiest command I saw to revert a previous commit by its commit id , was:  git revert dd61ab32 ", "question_id": 927358}, {"answer_votes": "73", "answer_comments": [" git reset --hard HEAD~1 is too dangerous ! This will not just 'cancel last commit', but will revert repo completely back to the previous commit. So you will LOOSE all changes committed in the last commit! \u2013 Arnis Juraga  Mar 21 '17 at 12:09  ", " You right, to undo this you can use git push -f <remote> HEAD@{1}:<branch> \u2013 Benny  Apr 24 '17 at 13:07 "], "answer_body": " There are many ways to do it:  Git command to undo the last commit/ previous commits:  Basic command to revert the commit in Git is:  $ git reset --hard <COMMIT -ID>  or  $ git reset --hard HEAD~<n>  COMMIT-ID : ID for the commit  n: is number of last commits you want to revert  You can get the commit id as shown below:  $ **git log --oneline**\n\nd81d3f1 function to subtract two numbers\n\nbe20eb8 function to add two numbers\n\nbedgfgg function to mulitply two numbers  where d81d3f1 and be20eb8 are commit id.  Now let's see some cases:  Suppose you want to revert the last commit 'd81d3f1'. Below are the ways:  $ git reset --hard d81d3f1  or  $ git reset --hard HEAD~1  Suppose you want to revert the commit 'be20eb8'. Below are the way:  $ git reset --hard be20eb8  For more detailed information you can refer and try out some other commands too for resetting head to a specified state:  $ git reset --help ", "question_id": 927358}, {"answer_votes": "69", "answer_comments": [" After git reset --soft HEAD~1 , if you need to unstage files, use: git reset \u2013 MKatleast3  Feb 23 '17 at 0:32 "], "answer_body": " If you want remove files in the last commit, you can use this:  git reset --hard HEAD~1  And if need files in the last commit, you can use this:  git reset --soft HEAD~1 ", "question_id": 927358}, {"answer_votes": "67", "answer_comments": null, "answer_body": " For a local commit  git reset --soft HEAD~1  or if you do not remember exactly in which commit it is, you might use  git rm --cached <file>  For a pushed commit  The proper way of removing files from the repository history is using git filter-branch . That is,  git filter-branch --index-filter 'git rm --cached <file>' HEAD  But I recomnend you use this command with care. Read more at git-filter-branch(1) Manual Page . ", "question_id": 927358}, {"answer_votes": "54", "answer_comments": null, "answer_body": " Usually, you want to undo a commit because you made a mistake and you want to fix it - essentially what the OP did when he asked the question. So really, you actually want to redo a commit.  Most of the answers here focus on the command line. While the command line is the best way to use Git when you're comfortable with it, its probably a bit alien to those coming from other version control systems to Git.  Here's how to do it using a GUI. If you have Git installed, you already have everything you need to follow these instructions.  NOTE: I will assume here that you realised the commit was wrong before you pushed it. If you don't know what pushing is, you probably haven't pushed, so carry on with the instructions. If you have pushed the faulty commit, the least risky way is just to follow up the faulty commit with a new commit that fixes things, the way you would do it in a version control system that does not allow you to rewrite history.  That said, here's how to fix your most recent fault commit using a GUI:   Navigate to your repository on the command line and start the gui with git gui  Choose \"Amend last commit\". You will see your last commit message, the files you staged and the files you didn't.  Now change things to how you want them to look and click Commit.  ", "question_id": 927358}, {"answer_votes": "53", "answer_comments": [" Or git reset @~ \u2013 Zaz  Aug 4 '16 at 8:36 "], "answer_body": " You can use:  git reset HEAD@{1}  This command will delete your wrong commit without a Git log. ", "question_id": 927358}, {"answer_votes": "49", "answer_comments": [" The very useful description about differences --soft VS --hard  atlassian.com/git/tutorials/\u2026 \u2013 Eugen Konkov  Dec 15 '16 at 16:29 ", " One doesn't really lose the commits on a --hard reset as they will be available in the ref log for 30 days git reflog . \u2013 Todd  Sep 11 '17 at 14:10 "], "answer_body": " WHAT TO USE, reset --soft or reset --hard ?  I am just adding two cents for @Kyralessa's answer:  If you are unsure what to use go for --soft (I used this convention to remember it -- s oft for safe).  Why ?  If you choose --hard by mistake you will LOSE your changes as it wasn't before.\nIf you choose --soft by mistake you can achieve the same results of --hard by applying additional commands  git reset HEAD file.html\ngit checkout -- file.html  Full example  echo \"some changes...\" > file.html\ngit add file.html\ngit commit -m \"wrong commit\"\n\n# I need to reset\ngit reset --hard HEAD~1 (cancel changes)\n# OR\ngit reset --soft HEAD~1 # Back to staging\ngit reset HEAD file.html # back to working directory\ngit checkout -- file.html # cancel changes  Credits goes to @Kyralessa. ", "question_id": 927358}, {"answer_votes": "46", "answer_comments": null, "answer_body": " If you are working with SourceTree , this will help you.  Right click on the commit then select \" Reset (current branch)/master to this commit \" and last select  \"Soft\" reset .  ", "question_id": 927358}, {"answer_votes": "44", "answer_comments": null, "answer_body": " Just undo the last commit:  git reset --soft HEAD~  Or undo the time before last time commit:  git reset --soft HEAD~2  Or undo any previous commit:  git reset --soft <commitID>  (you can get the commitID using git reflog )  When you undo a previous commit, remember to clean the workplace with  git clean  More details can be found in the docs: git-reset ", "question_id": 927358}, {"answer_votes": "42", "answer_comments": null, "answer_body": " Think we have code.txt file.\nWe make some changes on it and commit. We can undo this commit in three ways , but first you should know what is the staged file...\nAn staged file is a file that ready to commit and if you run git status this file will be shown with green color and if this is not staged for commit will be shown with red color:   It means if you commit your change, your changes on this file is not saved.\nYou can add this file in your stage with git add code.txt and then commit your change:   Undo last commit:   Now if we want just undo commit without any other changes, we can use  git reset --soft HEAD^    If we want undo commit and its changes ( THIS IS DANGEROUS, because your change will lost ), we can use  git reset --hard HEAD^   And if we want undo commit and remove changes from stage, we can use  git reset --mixed HEAD^ or in a short form git reset HEAD^   ", "question_id": 927358}, {"answer_votes": "41", "answer_comments": [" Be extra careful when reverting merge commits. You may lose your commits. Read about what Linus says about that: kernel.org/pub/software/scm/git/docs/howto/\u2026 \u2013 Eugen Konkov  Dec 15 '16 at 16:25  "], "answer_body": " To undo your local commit you use git reset <file> . Also that tutorial is very helpful to show you how it works.  Alternatively, you can use git revert <commit> : reverting should be used when you want to add another commit that rolls back the changes (but keeps them in the project history). ", "question_id": 927358}, {"answer_votes": "38", "answer_comments": null, "answer_body": " A Typical Git Cycle  In speaking of Git-related commands in the previous answers, I would like to share my typical Git cycles with all readers which may helpful. Here is how I work with Git,   Cloning the first time from the remote server  git clone $project  Pulling from remote (when I don't have a pending local commit to push)  git pull  Adding a new local file1 into $to_be_committed_list (just imagine $to_be_committed_list means staged area)  git add $file1  Removing mistakenly added file2 from $to_be_committed_list (assume that file2 is added like step 3, which I didn't want)  git reset $file2  Committing file1 which is in $to_be_committed_list  git commit -m \"commit message description\"  Syncing local commit with remote repository before pushing  git pull --rebase  Resolving when conflict occurs prerequisite configure mergetool  git mergetool #resolve merging here, also can manually merge  Adding conflict-resolved files, let's say file1 :  git add $file1  Continuing my previous rebase command  git rebase --continue  Pushing ready and already synced last local commit  git push origin head:refs/for/$branch # branch = master, dev, etc.  ", "question_id": 927358}, {"answer_votes": "36", "answer_comments": null, "answer_body": " VISUAL STUDIO USERS (2015, etc.)  If you cannot synchronise in Visual Studio as you are not allowed to push to a branch like \"development\" then as much as I tried, in Visual Studio NEITHER the REVERT NOR the RESET (hard or soft) would work.  Per the answer with TONS OF VOTES:  Use this at the command prompt of root of your project to nuke anything that will attempt to get pushed:  git reset --hard HEAD~1  Backup or zip your files just in case you don't wish to lose any work, etc... ", "question_id": 927358}, {"answer_votes": "31", "answer_comments": null, "answer_body": " You need to do the easy and fast  git commit --amend  if it's a private branch or  git commit -m 'Replace .class files with .java files'  if it's a shared or public branch. ", "question_id": 927358}, {"answer_votes": "31", "answer_comments": [" \"Working copy\"? Is this a Git concept? Isn't it an SVN concept? \u2013 Peter Mortensen  Jan 28 at 21:36 "], "answer_body": " Undo the Last Commit  There are tons of situations where you really want to undo that last commit into your code. E.g. because you'd like to restructure it extensively - or even discard it altogether!  In these cases, the \"reset\" command is your best friend:  $ git reset --soft HEAD~1  The above command (reset) will rewind your current HEAD branch to the specified revision. In our example above, we'd like to return to the one before the current revision - effectively making our last commit undone.  Note the --soft flag: this makes sure that the changes in undone revisions are preserved. After running the command, you'll find the changes as uncommitted local modifications in your working copy.  If you don't want to keep these changes, simply use the --hard flag. Be sure to only do this when you're sure you don't need these changes any more.  $ git reset --hard HEAD~1  ", "question_id": 927358}, {"answer_votes": "30", "answer_comments": null, "answer_body": " I got the commit ID from bitbucket and then did:  git checkout commitID .  Example:  git checkout 7991072 .  And it reverted it back up to that working copy of that commit. ", "question_id": 927358}, {"answer_votes": "27", "answer_comments": null, "answer_body": " Suppose you made a wrong commit locally and pushed it to remote repo. You can undo the mess with these two commands.  First we need to correct our local repo by going back to the commit that we desire:  git reset --hard <previous good commit id where you want local repo to go>  Now we forcefully push this good commit on the remote repo by using this command:  git push --force-with-lease  The 'with-lease' version of the force option will prevent accidental deletion of new commits you do not know about (i.e. coming from another source since your last pull). ", "question_id": 927358}, {"answer_votes": "26", "answer_comments": null, "answer_body": " In my case I committed and pushed to the wrong branch, so what I wanted was to have all my changes back so I can commit them to a new correct branch, so I did this:  On the same branch that you committed and pushed, if you type \"git status\" you wont't see anything new because you committed and pushed, now type:  git reset --soft HEAD~1  This will get all your changes(files) back in the stage area, now to get them back in the working directory(unstage) you just type:  git reset FILE  Where \"File\" is the file that you want to commit again. Now this FILE should be in the working directory(unstaged) with all the changes that you did. Now you can change to whatever branch that you want and commit the changes in that branch. Hope this helps other people that made the same mistake I did. Of course the initial branch that you committed is still there with all changes, but in my case that was ok, if it is not for you you can look for ways to revert that commit in that branch. ", "question_id": 927358}, {"answer_votes": "25", "answer_comments": null, "answer_body": " Use this command  git checkout -b old-state 0d1d7fc32 ", "question_id": 927358}, {"answer_votes": "25", "answer_comments": null, "answer_body": " You have several options to undo your last commit. \nHere are some of your options summarize into a single answer with code snippets  First of all you need to figure which are the \"wrong\" commits which you wish to discard. We will use git reflog to find it.   git reflog  You can always use the reflog as well.  git reflog will display any change which updated the HEAD and checking out the desired reflog entry will set the HEAD back to this commit.  Every time the HEAD is modified there will be a new entry in the reflog . The reflog is similar to unix history command and is kept locally on your machine.  git reflog\ngit checkout HEAD@{...}\n# or\ngit checkout <sha-1>  Using the checkout you can go back to any desired commit and you can create branch or any other options that git checkout will allow you to do.    git reset HEAD --hard <commit_id>  \"Move\" your head back to the desired commit. Git reset will checkout the desired commit content to your staging area and/or to your working directory based upon the value --hard/--soft/--mixed you choose to pick. --hard will update both stage area and working directory with the given  content and will \"detach\" any other commits beyond this point on your local branch.  If those commits are not part of any other branch they will become \"dangle\". \"dangle\" content means that there is a un-reachable content in your local repository which is not part of any other branch and can be removed or will be removed by the gc .  # This will destroy any local modifications.\n# Don't do it if you have uncommitted work you want to keep.\ngit reset --hard 0d1d7fc32\n\n# Alternatively, if there's work to keep:\ngit stash\ngit reset --hard 0d1d7fc32\ngit stash pop\n# This saves the modifications, then reapplies that patch after resetting.\n# You could get merge conflicts, if you've modified things which were\n# changed since the commit you reset to.   This schema illustrate which command does what. As you can see there reset && checkout modify the HEAD .  ", "question_id": 927358}, {"answer_votes": "24", "answer_comments": null, "answer_body": " Use this command:  git checkout -b old-state number_commit ", "question_id": 927358}, {"answer_votes": "22", "answer_comments": null, "answer_body": " Remove a wrong commit that is already pushed to Github  git push origin +(previous good commit id):(branch name)  Please specify the last good commit id you would like to reset back in Github.  For example. If latest commit id is wrong then specify the previous commit id in above git command with branch name.  You can get previous commit id using git log ", "question_id": 927358}, {"answer_votes": "22", "answer_comments": null, "answer_body": " You can always do a git checkout (SHA code) of the previous version and then commit again with the new code. ", "question_id": 927358}, {"answer_votes": "21", "answer_comments": null, "answer_body": " In order to get rid of (all the changes in) last commit, last 2 commits and last n commits:  git reset --hard HEAD~1\ngit reset --hard HEAD~2\n...\ngit reset --hard HEAD~n  And, to get rid of anything after a specific commit:  git reset --hard <commit sha>  e.g.,  git reset --hard 0d12345   PS: 1- Be careful, because of \"hard\" option, it deletes the local changes\n  in your repo as well and reverts to the previous mentioned commit. You\n  should run this if you are sure you messed up in your last commit(s)\n  and would like to go back in time.  2- Usually 7 letters of \"commit sha\" is enough, but in bigger\n  projects, you may need up to 12 letters to guarantee be unique. You\n  also can mention the whole 40 letters sha.  3- The above commands work in Github for Windows as well.  ", "question_id": 927358}, {"answer_votes": "21", "answer_comments": null, "answer_body": " Use:  git reset HEAD~1 --soft  Make changes, add, and commit the changes. ", "question_id": 927358}, {"answer_votes": "18", "answer_comments": null, "answer_body": " You just have to use a single command:  git reset --soft 'HEAD^'  It works to undo the last local commit to your Git repository. ", "question_id": 927358}, {"answer_votes": "17", "answer_comments": null, "answer_body": " Reference: How to undo last commit in Git?  If you have Git Extensions installed you can easily undo/revert any commit (you can download git extensions from here ).  Open Git Extensions, right click on the commit you want to revert then select \"Revert commit\".   A popup will be opened (see the screenshot below)   Select \"Automatically create a commit\" if you want to directly commit the reverted changes or if you want to manually commit the reverted changes keep the box un-selected and click on \"Revert this commit\" button. ", "question_id": 927358}, {"answer_votes": "15", "answer_comments": null, "answer_body": " Just use git reset --hard <last good SHA> to reset your changes and give new commit. You can also use git checkout -- <bad filename> . ", "question_id": 927358}, {"answer_votes": "14", "answer_comments": null, "answer_body": " You can undo your git commits in two ways:-\nFirst is you can use git revert, if you want to keep your commit history.  git revert HEAD~3\ngit revert <hashcode of commit>  Second is you can use git reset, which would delete all your commit history and bring your head to commit where you want it.  git reset <hashcode of commit>\ngit reset HEAD~3  You can also use --hard keyword if any of it start behaving otherwise. But , I would recommend until it's extremely necessary. ", "question_id": 927358}, {"answer_votes": "10", "answer_comments": null, "answer_body": " In IntelliJ IDEA you can just open Git Repository Log by pressing Alt + 9 , then right mouse button click at some tag from commits list and select: \"Reset Current Branch to Here...\" ", "question_id": 927358}, {"answer_votes": "10", "answer_comments": null, "answer_body": " Undo last commit:  git reset --soft HEAD^ or git reset --soft HEAD~  This will undo the last commit.  Here --soft means reset into staging.  HEAD~ or HEAD^ means to move to commit before HEAD.  Replace last commit to new commit:  git commit --amend -m \"message\"  It will replace the last commit with the new commit. ", "question_id": 927358}, {"answer_votes": "9", "answer_comments": null, "answer_body": "  Assuming you're working in Visual Studio, if you go in to you branch history and look at all of your commits, simply select the event prior to the commit you want to undo, right-click it, and select Revert .  Easy as that. ", "question_id": 927358}, {"answer_votes": "9", "answer_comments": null, "answer_body": " I have found this site which describes how to undo things that you have committed into the repository.  Some commands:  git commit --amend        # Change last commit\ngit reset HEAD~ --soft    # Undo last commit ", "question_id": 927358}, {"answer_votes": "9", "answer_comments": null, "answer_body": " For the sake of completeness, I will give the one glaringly obvious method that was overlooked by the previous answers.  Since the commit was not pushed, the remote was unchanged, so:   Delete the local repo.  Clone the remote repo.   This is sometimes necessary if your fancy git client goes bye-bye. Don't forget to re-commit your saved changes since the last push. ", "question_id": 927358}, {"answer_votes": "8", "answer_comments": null, "answer_body": " Find the last commit hash code by seeing the log by :  git log  Then  git reset <the previous co> ", "question_id": 927358}, {"answer_votes": "8", "answer_comments": null, "answer_body": " HEAD:  Before reset commit we should know about HEAD... HEAD is nothing but your current state in your working directory.. it is represented by commit number...  git commmit:  Each changes assigned under commit which is represented by unique tag.. Commits can't be deleted. so if you want your last commit you can simply dive into it using git reset  you can dive into last commit using 2 method,  Method 1: ( if you dont know commit number but want to move onto very first)  git reset HEAD~1  #it will move your head to last commit  Method 2: ( if you know commit you simply reset onto your known commit)  git reset 0xab3 # commit number  Note: if you want to know recent commit try this, git log -p -1   here is the graphical representation,  ", "question_id": 927358}, {"answer_votes": "8", "answer_comments": null, "answer_body": " Here is site: Oh shit, git! .  Here are many recipes how to undo things in git. Some of them:   Oh shit, I need to change the message on my last commit!   git commit --amend\n# follow prompts to change the commit message   Oh shit, I accidentally committed something to master that should have been on a brand new branch!   # create a new branch from the current state of master\ngit branch some-new-branch-name\n# remove the commit from the master branch\ngit reset HEAD~ --hard\ngit checkout some-new-branch-name\n# your commit lives in this branch now :) ", "question_id": 927358}, {"answer_votes": "4", "answer_comments": null, "answer_body": " git reset --hard your_last_good_commit_hash_here\n\ngit push --force origin master ", "question_id": 927358}, {"answer_votes": "4", "answer_comments": null, "answer_body": " You can undo your commits from the local repository, please follow the below scenario.  In below image I checkout test branch (using Git command git checkout -b test ) as a local and check status (using Git command git status ) of local branch there is nothing to commit.   In the next image image you can see here I made few changes in Filter1.txt and added that file to stage area than commit my changes with some message (using Git command git commit -m \"Doing commit to test revert back\" ).  \"-m is for commit message\"   In the next image you can see your commits log whatever you have made commits (Using Git command git log ).   So in above image you can see commit id with each commit and with your commit message now whatever commit you want to revert back or undo copy that commit id and hit below Git command. git revert {\"paste your commit id\"} . Example:  git revert 9ca304ed12b991f8251496b4ea452857b34353e7   I have reverted back my last commit. Now if you check your Git status. You can see the modified file which is Filter1.txt and yet to commit.  ", "question_id": 927358}, {"answer_votes": "0", "answer_comments": null, "answer_body": " Try this, hard reset to previous commit where those files were not added, then:  git reset --hard <commit_hash>  Make sure you have a backup of your changes just in case, as it's a hard reset, which means they'll be lost (unless you stashed earlier) ", "question_id": 927358}], "K_means_clustering_result": [[[{"answer_votes": "1590", "answer_comments": [" Does this work when I did a git commit --amend and what I really meant to do is a git commit ? \u2013 dbm  May 18 '11 at 13:07 ", " @dbm, if you accidentally amended, use git reset --soft <oldref> , where oldref is the commit ID before the amend. You can use git reflog to identify the old commit ID. This will undo the effects of the amend, but leave changes staged. Then just do git commit to commit as a regular commit. \u2013 bdonlan  May 18 '11 at 14:20 ", " @Dennis, git commit --amend turns the current tree (ie, staged changes) into a commit, overwriting current HEAD. After that point, they're not considered staged anymore because they're part of the commit (ie, git diff --cached is blank), but they're not \"removed\" or \"lost\". \u2013 bdonlan  Feb 1 '12 at 3:08 "], "answer_body": " Add/remove files to get things the way you want:  git rm classdir\ngit add sourcedir  Then amend the commit:  git commit --amend  The previous, erroneous commit will be edited to reflect the new index state - in other words, it'll be like you never made the mistake in the first place.  Note that you should only do this if you haven't pushed yet. If you have pushed, then you'll just have to commit a fix normally. ", "question_id": 927358}, "0.3789089419879019", 0], [{"answer_votes": "106", "answer_comments": null, "answer_body": " There are two main scenarios  You haven't pushed the commit yet  If the problem was extra files you commited (and you don't want those on repository), you can remove them using git rm and then commiting with --amend  git rm <pathToFile>  You can also remove entire directories with -r , or even combine with other Bash commands  git rm -r <pathToDirectory>\ngit rm $(find -name '*.class')  After removing the files, you can commit, with --amend option  git commit --amend -C HEAD # the -C option is to use the same commit message  This will rewrite your recent local commit removing the extra files, so, these files will never be sent on push and also will be removed from your local .git repository by GC.  You already pushed the commit  You can apply the same solution of the other scenario and then doing git push with the -f option, but it is not recommended since it overwrites the remote history with a divergent change (it can mess your repository).  Instead, you have to do the commit without --amend (remember this about -amend`: That option rewrites the history on the last commit). ", "question_id": 927358}, "0.3789089419879019", 0], [{"answer_votes": "79", "answer_comments": null, "answer_body": " This article has an excellent explanation as to how to go about various scenarios (where a commit has been done as well as the push OR just a commit, before the push):  http://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html  From the article, the easiest command I saw to revert a previous commit by its commit id , was:  git revert dd61ab32 ", "question_id": 927358}, "0.3789089419879019", 0], [{"answer_votes": "54", "answer_comments": null, "answer_body": " Usually, you want to undo a commit because you made a mistake and you want to fix it - essentially what the OP did when he asked the question. So really, you actually want to redo a commit.  Most of the answers here focus on the command line. While the command line is the best way to use Git when you're comfortable with it, its probably a bit alien to those coming from other version control systems to Git.  Here's how to do it using a GUI. If you have Git installed, you already have everything you need to follow these instructions.  NOTE: I will assume here that you realised the commit was wrong before you pushed it. If you don't know what pushing is, you probably haven't pushed, so carry on with the instructions. If you have pushed the faulty commit, the least risky way is just to follow up the faulty commit with a new commit that fixes things, the way you would do it in a version control system that does not allow you to rewrite history.  That said, here's how to fix your most recent fault commit using a GUI:   Navigate to your repository on the command line and start the gui with git gui  Choose \"Amend last commit\". You will see your last commit message, the files you staged and the files you didn't.  Now change things to how you want them to look and click Commit.  ", "question_id": 927358}, "0.3789089419879019", 0], [{"answer_votes": "38", "answer_comments": null, "answer_body": " A Typical Git Cycle  In speaking of Git-related commands in the previous answers, I would like to share my typical Git cycles with all readers which may helpful. Here is how I work with Git,   Cloning the first time from the remote server  git clone $project  Pulling from remote (when I don't have a pending local commit to push)  git pull  Adding a new local file1 into $to_be_committed_list (just imagine $to_be_committed_list means staged area)  git add $file1  Removing mistakenly added file2 from $to_be_committed_list (assume that file2 is added like step 3, which I didn't want)  git reset $file2  Committing file1 which is in $to_be_committed_list  git commit -m \"commit message description\"  Syncing local commit with remote repository before pushing  git pull --rebase  Resolving when conflict occurs prerequisite configure mergetool  git mergetool #resolve merging here, also can manually merge  Adding conflict-resolved files, let's say file1 :  git add $file1  Continuing my previous rebase command  git rebase --continue  Pushing ready and already synced last local commit  git push origin head:refs/for/$branch # branch = master, dev, etc.  ", "question_id": 927358}, "0.3789089419879019", 0], [{"answer_votes": "27", "answer_comments": null, "answer_body": " Suppose you made a wrong commit locally and pushed it to remote repo. You can undo the mess with these two commands.  First we need to correct our local repo by going back to the commit that we desire:  git reset --hard <previous good commit id where you want local repo to go>  Now we forcefully push this good commit on the remote repo by using this command:  git push --force-with-lease  The 'with-lease' version of the force option will prevent accidental deletion of new commits you do not know about (i.e. coming from another source since your last pull). ", "question_id": 927358}, "0.3789089419879019", 0], [{"answer_votes": "22", "answer_comments": null, "answer_body": " Remove a wrong commit that is already pushed to Github  git push origin +(previous good commit id):(branch name)  Please specify the last good commit id you would like to reset back in Github.  For example. If latest commit id is wrong then specify the previous commit id in above git command with branch name.  You can get previous commit id using git log ", "question_id": 927358}, "0.3789089419879019", 0], [{"answer_votes": "22", "answer_comments": null, "answer_body": " You can always do a git checkout (SHA code) of the previous version and then commit again with the new code. ", "question_id": 927358}, "0.3789089419879019", 0], [{"answer_votes": "9", "answer_comments": null, "answer_body": " For the sake of completeness, I will give the one glaringly obvious method that was overlooked by the previous answers.  Since the commit was not pushed, the remote was unchanged, so:   Delete the local repo.  Clone the remote repo.   This is sometimes necessary if your fancy git client goes bye-bye. Don't forget to re-commit your saved changes since the last push. ", "question_id": 927358}, "0.3789089419879019", 0], [{"answer_votes": "834", "answer_comments": [" \"--hard\" will get rid of the modified .java files in the working directory that he wanted to commit. \u2013 Esko Luontola  May 29 '09 at 18:26 ", " You can \"git stash save\" working copy changes, do a hard reset and then \"git stash pop\" to get them back, though I suppose a soft reset would be simpler. \u2013 Asad R.  Apr 15 '11 at 13:33 ", " git commit -a -m \"\" or git commit -am \"\" naturally! :] \u2013 trejder  Jun 21 '14 at 16:31 ", " Another 'shortcut' use of stash; if you want to unstage everything (undo git add), just git stash , then git stash pop \u2013 seanriordan08  Dec 8 '15 at 22:30 "], "answer_body": " git rm yourfiles/*.class\ngit commit -a -m \"deleted all class files in folder 'yourfiles'\"  or  git reset --hard HEAD~1  Warning: The above command will permanently remove the modifications to the .java files (and any other files) that you wanted to commit.  The hard reset to HEAD-1 will set your working copy to the state of the commit before your wrong commit. ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "382", "answer_comments": [" Rewriting history on a shared repository is generally a very bad idea.  I assume you know what you're doing, I just hope future readers do too. \u2013 Brad Koch  Dec 7 '12 at 16:02  ", " Yes rollback is dangerous. Make sure that your working copy is in the desired state before you push. When pushing then the unwanted commits gets deleted permanently. \u2013 neoneye  Dec 8 '12 at 14:14 ", " \"Just like in the real world, if you want to rewrite history, you need a conspiracy: everybody has to be 'in' on the conspiracy (at least everybody who knows about the history, i.e. everybody who has ever pulled from the branch).\" Source: stackoverflow.com/a/2046748/334451 \u2013 Mikko Rantalainen  Aug 7 '13 at 10:10 ", " fantastic. This worked like a charm. There should be a git option for independently working developers - where one can use GitX, or a delete button next to a commit, and a confirmation - so this process is not so enigmatic :) \u2013 zero_cool  Jun 20 '14 at 15:31 "], "answer_body": " I wanted to undo the lastest 5 commits in our shared repository. I looked up the revision id that I wanted to rollback to. Then I typed in the following.  prompt> git reset --hard 5a7404742c85\nHEAD is now at 5a74047 Added one more page to catalogue\nprompt> git push origin master --force\nTotal 0 (delta 0), reused 0 (delta 0)\nremote: bb/acl: neoneye is allowed. accepted payload.\nTo git@bitbucket.org:thecompany/prometheus.git\n + 09a6480...5a74047 master -> master (forced update)\nprompt> ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "281", "answer_comments": [" Should be marked as answer, because you can specify which SHA you want. \u2013 Belfield  Jul 28 '17 at 10:49 ", " What if you do not use \"<commit_id>\" and simply use \"git reset --hard\"? I typically just want to get rid of my latest updates that I have not committed yet and got back to the latest commit I made, and I always use \"git reset --hard\". \u2013 Jaime Montoya  Sep 27 '17 at 23:30 ", " @JaimeMontoya To undo latest changes you can use git reset --hard , but if you have to hard remove last \"n\" commits you specify a SHA \u2013 poorva  Sep 28 '17 at 13:10 ", " Really like -f . This is what other answers lack \u2013 FreeLightman  Mar 1 at 8:58 "], "answer_body": " If you want to permanently undo it and you have cloned some repository  The commit id can be seen by  git log  Then you can do -  git reset --hard <commit_id>\n\ngit push origin <branch_name> -f ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "191", "answer_comments": null, "answer_body": " How to undo the last Git commit?  To restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD.   If you don't want to keep your changes that you made:  git reset --hard HEAD^  If you want to keep your changes:  git reset --soft HEAD^   Now check your git log. It will show that our last commit has been removed. ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "158", "answer_comments": null, "answer_body": " Use reflog to find a correct state  git reflog   REFLOG BEFORE RESET  Select the correct reflog (f3cb6e2 in my case) and type  git reset --hard f3cb6e2  After that the repo HEAD will be reset to that HEADid  LOG AFTER RESET  Finally the reflog looks like the picture below   REFLOG FINAL ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "145", "answer_comments": null, "answer_body": " \"Reset the working tree to the last commit\"  git reset --hard HEAD^  \"Clean unknown files from the working tree\"  git clean  see - Git Quick Reference  NOTE: This command will delete your previous commit, so use with caution! git reset --hard is safer \u2013 ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "142", "answer_comments": null, "answer_body": " First run:  git reflog  It will show you all the possible actions you have performed on your repository, for example, commit, merge, pull, etc.  Then do:  git reset --hard ActionIdFromRefLog ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "122", "answer_comments": null, "answer_body": " Type git log and find the last commit hash code and then enter:  git reset <the previous co> ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "85", "answer_comments": [" Maybe you could at a note/warning that his command will throw away the commit and the changes in the working directory without asking any further. \u2013 cr7pt0gr4ph7  Nov 24 '14 at 22:35  ", " If you happen to do this by accident, not all is lost, though. See stackoverflow.com/questions/10099258/\u2026 , stackoverflow.com/questions/15479501/\u2026 and stackoverflow.com/questions/7374069/undo-git-reset-hard/7376959 . \u2013 cr7pt0gr4ph7  Nov 24 '14 at 22:40 ", " Use --soft to keep your changes as uncommitted changes , --hard to nuke the commit completely and revert back by one. Remember to do such operations only on changes, that are not pushed yet. \u2013 Yunus Nedim Mehel  Mar 9 '15 at 9:11 ", " @Zaz: You are right; maybe I should have clarified that. Only files/changes that have been either added to index (/staged) or have been committed can possibly be recovered. Uncommitted, unstaged changes are , as you said, completely thrown away by git reset --hard . \u2013 cr7pt0gr4ph7  Sep 13 '16 at 21:17 ", " As a sidenote: Everytime a file is staged, git stores its contents in its object database. The stored contents are only removed when garbage collection is executed. It is therefore possible to recover the last staged version of a file that was not currently staged when git reset --hard was executed (see the posts linked above for more information). \u2013 cr7pt0gr4ph7  Sep 13 '16 at 21:22  "], "answer_body": " To reset to the previous revision, permanently deleting all uncommitted changes:  git reset --hard HEAD~1 ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "73", "answer_comments": [" git reset --hard HEAD~1 is too dangerous ! This will not just 'cancel last commit', but will revert repo completely back to the previous commit. So you will LOOSE all changes committed in the last commit! \u2013 Arnis Juraga  Mar 21 '17 at 12:09  ", " You right, to undo this you can use git push -f <remote> HEAD@{1}:<branch> \u2013 Benny  Apr 24 '17 at 13:07 "], "answer_body": " There are many ways to do it:  Git command to undo the last commit/ previous commits:  Basic command to revert the commit in Git is:  $ git reset --hard <COMMIT -ID>  or  $ git reset --hard HEAD~<n>  COMMIT-ID : ID for the commit  n: is number of last commits you want to revert  You can get the commit id as shown below:  $ **git log --oneline**\n\nd81d3f1 function to subtract two numbers\n\nbe20eb8 function to add two numbers\n\nbedgfgg function to mulitply two numbers  where d81d3f1 and be20eb8 are commit id.  Now let's see some cases:  Suppose you want to revert the last commit 'd81d3f1'. Below are the ways:  $ git reset --hard d81d3f1  or  $ git reset --hard HEAD~1  Suppose you want to revert the commit 'be20eb8'. Below are the way:  $ git reset --hard be20eb8  For more detailed information you can refer and try out some other commands too for resetting head to a specified state:  $ git reset --help ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "21", "answer_comments": null, "answer_body": " In order to get rid of (all the changes in) last commit, last 2 commits and last n commits:  git reset --hard HEAD~1\ngit reset --hard HEAD~2\n...\ngit reset --hard HEAD~n  And, to get rid of anything after a specific commit:  git reset --hard <commit sha>  e.g.,  git reset --hard 0d12345   PS: 1- Be careful, because of \"hard\" option, it deletes the local changes\n  in your repo as well and reverts to the previous mentioned commit. You\n  should run this if you are sure you messed up in your last commit(s)\n  and would like to go back in time.  2- Usually 7 letters of \"commit sha\" is enough, but in bigger\n  projects, you may need up to 12 letters to guarantee be unique. You\n  also can mention the whole 40 letters sha.  3- The above commands work in Github for Windows as well.  ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "8", "answer_comments": null, "answer_body": " Find the last commit hash code by seeing the log by :  git log  Then  git reset <the previous co> ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "4", "answer_comments": null, "answer_body": " git reset --hard your_last_good_commit_hash_here\n\ngit push --force origin master ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "0", "answer_comments": null, "answer_body": " Try this, hard reset to previous commit where those files were not added, then:  git reset --hard <commit_hash>  Make sure you have a backup of your changes just in case, as it's a hard reset, which means they'll be lost (unless you stashed earlier) ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "18320", "answer_comments": [" And if the commit was to the wrong branch, you may git checkout theRightBranch with all the changes stages. As I just had to do. \u2013 Frank Shearar  Oct 5 '10 at 15:44 ", " If you're working in DOS, instead of git reset --soft HEAD^ you'll need to use git reset --soft HEAD~1 .  The ^ is a continuation character in DOS so it won't work properly.  Also, --soft is the default, so you can omit it if you like and just say git reset HEAD~1 . \u2013 Ryan Lundy  Apr 13 '11 at 14:15 ", " Also, in zsh you have to quote ^, so git reset --soft 'HEAD^' ... at least I did \u2013 jberryman  Oct 27 '11 at 18:24 ", " (Correction to what I wrote above; --mixed is the default. --mixed means to keep the changed files, but not keep them in the index. --soft would keep the changed files and keep them in the index as they were just before the changed commit.  Sorry for the confusion.) \u2013 Ryan Lundy  Nov 17 '11 at 2:40 ", " zsh users might get: zsh: no matches found: HEAD^ - you need to escape ^ i.e. git reset --soft HEAD\\^ \u2013 tnajdek  Feb 21 '13 at 17:47  "], "answer_body": " Undo a commit and redo  $ git commit -m \"Something terribly misguided\"              (1)\n$ git reset HEAD~                                           (2)\n<< edit files as necessary >>                               (3)\n$ git add ...                                               (4)\n$ git commit -c ORIG_HEAD                                   (5)   This is what you want to undo  This leaves your working tree (the state of your files on disk) unchanged but undoes the commit and leaves the changes you committed unstaged (so they'll appear as \"Changes not staged for commit\" in git status , and you'll need to add them again before committing). If you only want to add more changes to the previous commit, or change the commit message 1 , you could use git reset --soft HEAD~ instead, which is like git reset HEAD~ (where HEAD~ is the same as HEAD~1 ) but leaves your existing changes staged.  Make corrections to working tree files.  git add anything that you want to include in your new commit.  Commit the changes, reusing the old commit message. reset copied the old head to .git/ORIG_HEAD ; commit with -c ORIG_HEAD will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the -C option.    1 Note, however, that you don't need to reset to an earlier commit if you just made a mistake in your commit message . The easier option is to git reset (to upstage any changes you've made since) and then git commit --amend , which will open your default commit message editor pre-populated with the last commit message.  Beware however that if you have added any new changes to the index, using commit --amend will add them to your previous commit.  ---- Edit by Frank R. 2018-3-9  If pushed,  git push origin master --force ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "9502", "answer_comments": [" @dma_k, yes.  Or you could do git reset --hard HEAD^^ once.  I use the tilde (~) notation because the caret (^) notation doesn't work in DOS. \u2013 Ryan Lundy  Feb 25 '12 at 15:02 ", " Another nice tip: You can re-attach the branch to the commit that you removed it from with git branch -f <branch> <commit-id> . Saves having to re-create commits! \u2013 naught101  Jun 22 '12 at 13:11  ", " For a git beginner, it isn't obvious what the difference is between the last two options (--soft and the one above it). Mentioning the index doesn't help, we don't really know what that means yet. @nessur's connection between soft and Ctrl-Z really helped! But I still don't quite understand the difference between the two options. \u2013 Stomp  Jun 26 '12 at 15:56 ", " It's much better to be told 'why' something works, than just to be told the answer. Kudos to this description - it helped be 'get' git. \u2013 Chris Nash  Jul 3 '12 at 19:13 ", " Missing a crucial point: If the said commit was previously 'pushed' to the remote, any 'undo' operation, no matter how simple, will cause enormous pain and suffering to the rest of the users who have this commit in their local copy, when they do a 'git pull' in the future.  So, if the commit was already 'pushed', do this instead:      git revert <bad-commit-sha1-id>     git push origin : \u2013 FractalSpace  Nov 8 '13 at 23:43  "], "answer_body": " Undoing a commit is a little scary if you don't know how it works.  But it's actually amazingly easy if you do understand.  Say you have this, where C is your HEAD and (F) is the state of your files.  (F)\nA-B-C\n    \u2191\n  master  You want to nuke commit C and never see it again .  You do this:  git reset --hard HEAD~1  The result is:  (F)\nA-B\n  \u2191\nmaster  Now B is the HEAD.  Because you used --hard , your files are reset to their state at commit B.  Ah, but suppose commit C wasn't a disaster, but just a bit off.  You want to undo the commit but keep your changes for a bit of editing before you do a better commit.  Starting again from here, with C as your HEAD:  (F)\nA-B-C\n    \u2191\n  master  You can do this, leaving off the --hard :  git reset HEAD~1  In this case the result is:  (F)\nA-B-C\n  \u2191\nmaster  In both cases, HEAD is just a pointer to the latest commit.  When you do a git reset HEAD~1 , you tell Git to move the HEAD pointer back one commit.  But (unless you use --hard ) you leave your files as they were.  So now git status shows the changes you had checked into C.  You haven't lost a thing!  For the lightest touch, you can even undo your commit but leave your files and your index :  git reset --soft HEAD~1  This not only leaves your files alone, it even leaves your index alone.  When you do git status , you'll see that the same files are in the index as before.  In fact, right after this command, you could do git commit and you'd be redoing the same commit you just had.  One more thing: Suppose you destroy a commit as in the first example, but then discover you needed it after all ?  Tough luck, right?  Nope, there's still a way to get it back.  Type git reflog and you'll see a list of (partial) commit shas that you've moved around in.  Find the commit you destroyed, and do this:  git checkout -b someNewBranchName shaYouDestroyed  You've now resurrected that commit.  Commits don't actually get destroyed in Git for some 90 days, so you can usually go back and rescue one you didn't mean to get rid of. ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "1647", "answer_comments": [" I found this answer the clearest. git revert HEAD^ is not the previous, is the previous of the previous. I did : git revert HEAD and then push again and it worked :) \u2013 nacho4d  Jul 14 '11 at 8:32  ", " @riezebosch: your warning is in the wrong place. THIS answer doesn't mess up things, cause it correctly creates a new commit 102: \"restoring the file I removed on accident\" \u2013 rubo77  Jan 6 '14 at 8:37  ", " This was most helpful to me. I needed to know how to revert a public commit. Thanks! \u2013 FearlessFuture  Jan 25 at 22:25 "], "answer_body": " This took me a while to figure out, so maybe this will help someone...  There are two ways to \"undo\" your last commit, depending on whether or not you have already made your commit public (pushed to your remote repository):  How to undo a local commit  Let's say I committed locally, but now want to remove that commit.  git log\n    commit 101: bad commit    # latest commit, this would be called 'HEAD'\n    commit 100: good commit   # second to last commit, this is the one we want  To restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD :  git reset --soft HEAD^     # use --soft if you want to keep your changes\ngit reset --hard HEAD^     # use --hard if you don't care about keeping the changes you made  Now git log will show that our last commit has been removed.  How to undo a public commit  If you have already made your commits public, you will want to create a new commit which will \"revert\" the changes you made in your previous commit (current HEAD).  git revert HEAD  Your changes will now be reverted and ready for you to commit:  git commit -m 'restoring the file I removed by accident'\ngit log\n    commit 102: restoring the file I removed by accident\n    commit 101: removing a file we don't need\n    commit 100: adding a file that we need  For more info, check out Git Basics - Undoing Things ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "655", "answer_comments": null, "answer_body": " To change the last commit  Replace the files in the index:  git rm --cached *.class\ngit add *.java  Then, if it's a private branch, amend the commit:  git commit --amend  Or, if it's a shared branch, make a new commit:  git commit -m 'Replace .class files with .java files'   ( to change a previous commit , use the awesome interactive rebase )   ProTip\u2122: \u00a0 Add *.class to a gitignore to stop this happening again.   To revert a commit  Amending a commit is the ideal solution if you need to change the last commit, but a more general solution is reset .  You can reset git to any commit with:  git reset @~N  Where N is the number of commits before HEAD , and @~ resets to the previous commit.  So, instead of amending the commit, you could use:  git reset @~\ngit add *.java\ngit commit -m \"Add .java files\"  Check out git help reset , specifically the sections on --soft  --mixed and --hard , for a better understanding of what this does.  Reflog  If you mess up, you can always use the reflog to find dropped commits:  $ git reset @~\n$ git reflog\nc4f708b HEAD@{0}: reset: moving to @~\n2c52489 HEAD@{1}: commit: added some .class files\n$ git reset 2c52489\n... and you're back where you started  ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "525", "answer_comments": [" If you committed to the wrong branch: once reverted, switch to the correct branch and cherry-pick the commit. \u2013 Kris  Jun 27 '12 at 11:02 ", " What does that mean, cherry pick the commit? In my case, I was on the wrong branch when I edited a file. I committed it then realized I was in the wrong branch. Using \"git reset --soft HEAD~1\" got me back to just before the commit, but now if I checkout the correct branch, how do I undo the changes to the file in wrong branch but instead make them (in the same named file) in the correct branch? \u2013 astronomerdave  Jan 13 '15 at 22:05 ", " I just utilized git revert commit-id worked like a charm.  Of course then you will need to push your changes. \u2013 Casey Robinson  Jan 25 '16 at 21:07  ", " I believe that would be git cherry-pick <<erroneous-commit-sha>> @astronomerdave. From, Mr. Almost-2-Years-Late-to-the-Party. \u2013 Tom Howard  Oct 20 '16 at 18:19 "], "answer_body": " Use git revert commit-id  To get the commit ID, just use git log ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "418", "answer_comments": [" @SMR, In your example, all are pointing into current HEAD only. HEAD^ = HEAD^1. As well as HEAD^1 = HEAD~1.  When you use HEAD~2, there is a difference between ~ and ^ symbols. If you use ~2 means \u201cthe first parent of the first parent,\u201d or \u201cthe grandparent\u201d. \u2013 Madhan Ayyasamy  Dec 14 '15 at 15:34  ", " clear and easy to understand, save my night ! \u2013 Vladimir Ch  Mar 14 at 19:10 ", " Apparently, I accidentally downvoted this answer, and it's too late for me to un-downvote it. Apologies. \u2013 Matt  Apr 9 at 17:20 "], "answer_body": " If you are planning undoing a local commit entirely, whatever you changes you did on the commit, and if you don't worry anything about that, just do the following command.  git reset --hard HEAD^1  (This command will ignore your entire commit and your changes will be lost completely from your local working tree). If you want to undo your commit, but you want your changes in the staging area (before commit just like after git add ) then do the following command.  git reset --soft HEAD^1  Now your committed files comes into the staging area. Suppose if you want to unstage the files, because you need to edit some wrong conent, then do the following command  git reset HEAD  Now committed files come from the staged area into the unstaged area. Now files are ready to edit, so whatever you changes, you want go edit and added it and make a fresh/new commit.  More ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "367", "answer_comments": null, "answer_body": " I prefer to use git rebase -i for this job, because a nice list pops up where I can choose the commits to get rid of. It might not be as direct as some other answers here, but it just feels right .  Choose how many commits you want to list, then invoke like this (to enlist last three)  git rebase -i HEAD~3  Sample list  pick aa28ba7 Sanity check for RtmpSrv port\npick c26c541 RtmpSrv version option\npick 58d6909 Better URL decoding support  Then git will remove commits for any line that you remove. ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "283", "answer_comments": [" I'm in the 2nd case, but when I do \"git revert HEAD\" it says \"error: Commit [ID] is a merge but no -m option was given.  fatal: revert failed\".  Any suggestions? \u2013 metaforge  Nov 12 '14 at 19:36 ", " Probably worth mentioning that instead of HEAD~1 you could use the actual hash as displayed by git log --stat or by git reflog - useful when you need to 'undo' more than one commit. \u2013 ccpizza  Dec 7 '14 at 0:38 "], "answer_body": " If you have committed junk but not pushed,  git reset --soft HEAD~1   HEAD~1 is a shorthand for the commit before head. Alternatively you can refer to the SHA-1 of the hash if you want to reset to. --soft option will delete the commit but it will leave all your changed files \"Changes to be committed\", as git status would put it.  If you want to get rid of any changes to tracked files in the working tree since the commit before head use \" --hard \" instead.   OR   If you already pushed and someone pulled which is usually my case, you can't use git reset . You can however do a git revert ,   git revert HEAD   This will create a new commit that reverses everything introduced by the accidental commit.  ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "238", "answer_comments": null, "answer_body": " On SourceTree (GUI for GitHub), you may right-click the commit and do a 'Reverse Commit'. This should undo your changes.  On the terminal:  You may alternatively use:  git revert  Or:  git reset --soft HEAD^ # Use --soft if you want to keep your changes.\ngit reset --hard HEAD^ # Use --hard if you don't care about keeping your changes. ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "189", "answer_comments": null, "answer_body": " Just reset it doing the command below using git :  git reset --soft HEAD~1  Explain: what git reset does, it's basically reset to any commit you'd like to go back to, then if you combine it with --soft key, it will go back, but keep the  changes in your file(s), so you get back to the stage which the file was just added, HEAD is the head of the branch and if you combine with ~1 (in this case you also use HEAD^ ), it will go back only one commit which what you want...  I create the steps in the image below in more details for you, including all steps that may happens in real situations and committing the code:  ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "120", "answer_comments": null, "answer_body": " In my case I accidentally committed some files I did not want to. So I did the following and it worked:  git reset --soft HEAD^\ngit rm --cached [files you do not need]\ngit add [files you need]\ngit commit -c ORIG_HEAD  Verify the results with gitk or git log --stat ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "105", "answer_comments": null, "answer_body": " Use SourceTree (graphical tool for Git) to see your commits and tree. You can manually reset it directly by right clicking it. ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "69", "answer_comments": [" After git reset --soft HEAD~1 , if you need to unstage files, use: git reset \u2013 MKatleast3  Feb 23 '17 at 0:32 "], "answer_body": " If you want remove files in the last commit, you can use this:  git reset --hard HEAD~1  And if need files in the last commit, you can use this:  git reset --soft HEAD~1 ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "67", "answer_comments": null, "answer_body": " For a local commit  git reset --soft HEAD~1  or if you do not remember exactly in which commit it is, you might use  git rm --cached <file>  For a pushed commit  The proper way of removing files from the repository history is using git filter-branch . That is,  git filter-branch --index-filter 'git rm --cached <file>' HEAD  But I recomnend you use this command with care. Read more at git-filter-branch(1) Manual Page . ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "53", "answer_comments": [" Or git reset @~ \u2013 Zaz  Aug 4 '16 at 8:36 "], "answer_body": " You can use:  git reset HEAD@{1}  This command will delete your wrong commit without a Git log. ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "49", "answer_comments": [" The very useful description about differences --soft VS --hard  atlassian.com/git/tutorials/\u2026 \u2013 Eugen Konkov  Dec 15 '16 at 16:29 ", " One doesn't really lose the commits on a --hard reset as they will be available in the ref log for 30 days git reflog . \u2013 Todd  Sep 11 '17 at 14:10 "], "answer_body": " WHAT TO USE, reset --soft or reset --hard ?  I am just adding two cents for @Kyralessa's answer:  If you are unsure what to use go for --soft (I used this convention to remember it -- s oft for safe).  Why ?  If you choose --hard by mistake you will LOSE your changes as it wasn't before.\nIf you choose --soft by mistake you can achieve the same results of --hard by applying additional commands  git reset HEAD file.html\ngit checkout -- file.html  Full example  echo \"some changes...\" > file.html\ngit add file.html\ngit commit -m \"wrong commit\"\n\n# I need to reset\ngit reset --hard HEAD~1 (cancel changes)\n# OR\ngit reset --soft HEAD~1 # Back to staging\ngit reset HEAD file.html # back to working directory\ngit checkout -- file.html # cancel changes  Credits goes to @Kyralessa. ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "42", "answer_comments": null, "answer_body": " Think we have code.txt file.\nWe make some changes on it and commit. We can undo this commit in three ways , but first you should know what is the staged file...\nAn staged file is a file that ready to commit and if you run git status this file will be shown with green color and if this is not staged for commit will be shown with red color:   It means if you commit your change, your changes on this file is not saved.\nYou can add this file in your stage with git add code.txt and then commit your change:   Undo last commit:   Now if we want just undo commit without any other changes, we can use  git reset --soft HEAD^    If we want undo commit and its changes ( THIS IS DANGEROUS, because your change will lost ), we can use  git reset --hard HEAD^   And if we want undo commit and remove changes from stage, we can use  git reset --mixed HEAD^ or in a short form git reset HEAD^   ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "41", "answer_comments": [" Be extra careful when reverting merge commits. You may lose your commits. Read about what Linus says about that: kernel.org/pub/software/scm/git/docs/howto/\u2026 \u2013 Eugen Konkov  Dec 15 '16 at 16:25  "], "answer_body": " To undo your local commit you use git reset <file> . Also that tutorial is very helpful to show you how it works.  Alternatively, you can use git revert <commit> : reverting should be used when you want to add another commit that rolls back the changes (but keeps them in the project history). ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "31", "answer_comments": [" \"Working copy\"? Is this a Git concept? Isn't it an SVN concept? \u2013 Peter Mortensen  Jan 28 at 21:36 "], "answer_body": " Undo the Last Commit  There are tons of situations where you really want to undo that last commit into your code. E.g. because you'd like to restructure it extensively - or even discard it altogether!  In these cases, the \"reset\" command is your best friend:  $ git reset --soft HEAD~1  The above command (reset) will rewind your current HEAD branch to the specified revision. In our example above, we'd like to return to the one before the current revision - effectively making our last commit undone.  Note the --soft flag: this makes sure that the changes in undone revisions are preserved. After running the command, you'll find the changes as uncommitted local modifications in your working copy.  If you don't want to keep these changes, simply use the --hard flag. Be sure to only do this when you're sure you don't need these changes any more.  $ git reset --hard HEAD~1  ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "25", "answer_comments": null, "answer_body": " Use this command  git checkout -b old-state 0d1d7fc32 ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "24", "answer_comments": null, "answer_body": " Use this command:  git checkout -b old-state number_commit ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "21", "answer_comments": null, "answer_body": " Use:  git reset HEAD~1 --soft  Make changes, add, and commit the changes. ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "15", "answer_comments": null, "answer_body": " Just use git reset --hard <last good SHA> to reset your changes and give new commit. You can also use git checkout -- <bad filename> . ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "14", "answer_comments": null, "answer_body": " You can undo your git commits in two ways:-\nFirst is you can use git revert, if you want to keep your commit history.  git revert HEAD~3\ngit revert <hashcode of commit>  Second is you can use git reset, which would delete all your commit history and bring your head to commit where you want it.  git reset <hashcode of commit>\ngit reset HEAD~3  You can also use --hard keyword if any of it start behaving otherwise. But , I would recommend until it's extremely necessary. ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "8", "answer_comments": null, "answer_body": " HEAD:  Before reset commit we should know about HEAD... HEAD is nothing but your current state in your working directory.. it is represented by commit number...  git commmit:  Each changes assigned under commit which is represented by unique tag.. Commits can't be deleted. so if you want your last commit you can simply dive into it using git reset  you can dive into last commit using 2 method,  Method 1: ( if you dont know commit number but want to move onto very first)  git reset HEAD~1  #it will move your head to last commit  Method 2: ( if you know commit you simply reset onto your known commit)  git reset 0xab3 # commit number  Note: if you want to know recent commit try this, git log -p -1   here is the graphical representation,  ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "4", "answer_comments": null, "answer_body": " You can undo your commits from the local repository, please follow the below scenario.  In below image I checkout test branch (using Git command git checkout -b test ) as a local and check status (using Git command git status ) of local branch there is nothing to commit.   In the next image image you can see here I made few changes in Filter1.txt and added that file to stage area than commit my changes with some message (using Git command git commit -m \"Doing commit to test revert back\" ).  \"-m is for commit message\"   In the next image you can see your commits log whatever you have made commits (Using Git command git log ).   So in above image you can see commit id with each commit and with your commit message now whatever commit you want to revert back or undo copy that commit id and hit below Git command. git revert {\"paste your commit id\"} . Example:  git revert 9ca304ed12b991f8251496b4ea452857b34353e7   I have reverted back my last commit. Now if you check your Git status. You can see the modified file which is Filter1.txt and yet to commit.  ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "338", "answer_comments": [" gitk --all $(git reflog | cut -c1-7)& may be helpful for finding the previous revision if you want to undo an '--amend' commit. \u2013 nobar  Oct 18 '14 at 23:38  ", " It should be noted that if you're attempting to remove secret information before pushing to a shared repository, doing a revert won't help you, because the information will still be in the history in the previous commit.  If you want to ensure the change is never visible to others you need to use git reset \u2013 Jherico  Sep 4 '15 at 4:52 ", " See also: stackoverflow.com/a/30598953 \u2013 nobar  Apr 5 '16 at 4:20 ", " I think 'private'/'public' would more correctly be 'local'/'remote'. \u2013 nobar  Mar 28 at 14:59 "], "answer_body": " How to fix the previous local commit  Use git-gui (or similar) to perform a git commit --amend . From the GUI you can add or remove individual files from the commit. You can also modify the commit message.  How to undo the previous local commit  Just reset your branch to the previous location (for example, using gitk or git rebase ). Then reapply your changes from a saved copy. After garbage collection in your local repository, it will be like the unwanted commit never happened. To do all of that in a single command, use git reset HEAD~1 .  Word of warning : Careless use of git reset is a good way to get your working copy into a confusing state. I recommend that Git novices avoid this if they can.  How to undo a public commit  Perform a reverse cherry pick ( git-revert ) to undo the changes.  If you haven't yet pulled other changes onto your branch, you can simply do...  git revert --no-edit HEAD  Then push your updated branch to the shared repository.  The commit history will show both commits, separately .   Advanced: Correction of private branch in public repository  This can be dangerous -- be sure you have a local copy of the branch to repush.  Also note: You don't want to do this if someone else may be working on the branch.  git push --delete (branch_name) ## remove public version of branch  Cleanup your branch locally then repush...  git push origin (branch_name)  In the normal case, you probably needn't worry about your private-branch commit history being pristine.  Just push a followup commit (see 'How to undo a public commit' above), and later, do a squash-merge to hide the history. ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "128", "answer_comments": null, "answer_body": " Another way:  Checkout the branch you want to revert, then reset your local working copy back to the commit that you want to be the latest one on the remote server (everything after it will go bye-bye). To do this, in SourceTree I right-clicked on the and selected \"Reset BRANCHNAME to this commit\".  Then navigate to your repository's local directory and run this command:  git -c diff.mnemonicprefix=false -c core.quotepath=false push -v -f --tags REPOSITORY_NAME BRANCHNAME:BRANCHNAME  This will erase all commits after the current one in your local repository but only for that one branch. ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "46", "answer_comments": null, "answer_body": " If you are working with SourceTree , this will help you.  Right click on the commit then select \" Reset (current branch)/master to this commit \" and last select  \"Soft\" reset .  ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "36", "answer_comments": null, "answer_body": " VISUAL STUDIO USERS (2015, etc.)  If you cannot synchronise in Visual Studio as you are not allowed to push to a branch like \"development\" then as much as I tried, in Visual Studio NEITHER the REVERT NOR the RESET (hard or soft) would work.  Per the answer with TONS OF VOTES:  Use this at the command prompt of root of your project to nuke anything that will attempt to get pushed:  git reset --hard HEAD~1  Backup or zip your files just in case you don't wish to lose any work, etc... ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "31", "answer_comments": null, "answer_body": " You need to do the easy and fast  git commit --amend  if it's a private branch or  git commit -m 'Replace .class files with .java files'  if it's a shared or public branch. ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "30", "answer_comments": null, "answer_body": " I got the commit ID from bitbucket and then did:  git checkout commitID .  Example:  git checkout 7991072 .  And it reverted it back up to that working copy of that commit. ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "26", "answer_comments": null, "answer_body": " In my case I committed and pushed to the wrong branch, so what I wanted was to have all my changes back so I can commit them to a new correct branch, so I did this:  On the same branch that you committed and pushed, if you type \"git status\" you wont't see anything new because you committed and pushed, now type:  git reset --soft HEAD~1  This will get all your changes(files) back in the stage area, now to get them back in the working directory(unstage) you just type:  git reset FILE  Where \"File\" is the file that you want to commit again. Now this FILE should be in the working directory(unstaged) with all the changes that you did. Now you can change to whatever branch that you want and commit the changes in that branch. Hope this helps other people that made the same mistake I did. Of course the initial branch that you committed is still there with all changes, but in my case that was ok, if it is not for you you can look for ways to revert that commit in that branch. ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "25", "answer_comments": null, "answer_body": " You have several options to undo your last commit. \nHere are some of your options summarize into a single answer with code snippets  First of all you need to figure which are the \"wrong\" commits which you wish to discard. We will use git reflog to find it.   git reflog  You can always use the reflog as well.  git reflog will display any change which updated the HEAD and checking out the desired reflog entry will set the HEAD back to this commit.  Every time the HEAD is modified there will be a new entry in the reflog . The reflog is similar to unix history command and is kept locally on your machine.  git reflog\ngit checkout HEAD@{...}\n# or\ngit checkout <sha-1>  Using the checkout you can go back to any desired commit and you can create branch or any other options that git checkout will allow you to do.    git reset HEAD --hard <commit_id>  \"Move\" your head back to the desired commit. Git reset will checkout the desired commit content to your staging area and/or to your working directory based upon the value --hard/--soft/--mixed you choose to pick. --hard will update both stage area and working directory with the given  content and will \"detach\" any other commits beyond this point on your local branch.  If those commits are not part of any other branch they will become \"dangle\". \"dangle\" content means that there is a un-reachable content in your local repository which is not part of any other branch and can be removed or will be removed by the gc .  # This will destroy any local modifications.\n# Don't do it if you have uncommitted work you want to keep.\ngit reset --hard 0d1d7fc32\n\n# Alternatively, if there's work to keep:\ngit stash\ngit reset --hard 0d1d7fc32\ngit stash pop\n# This saves the modifications, then reapplies that patch after resetting.\n# You could get merge conflicts, if you've modified things which were\n# changed since the commit you reset to.   This schema illustrate which command does what. As you can see there reset && checkout modify the HEAD .  ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "17", "answer_comments": null, "answer_body": " Reference: How to undo last commit in Git?  If you have Git Extensions installed you can easily undo/revert any commit (you can download git extensions from here ).  Open Git Extensions, right click on the commit you want to revert then select \"Revert commit\".   A popup will be opened (see the screenshot below)   Select \"Automatically create a commit\" if you want to directly commit the reverted changes or if you want to manually commit the reverted changes keep the box un-selected and click on \"Revert this commit\" button. ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "10", "answer_comments": null, "answer_body": " In IntelliJ IDEA you can just open Git Repository Log by pressing Alt + 9 , then right mouse button click at some tag from commits list and select: \"Reset Current Branch to Here...\" ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "9", "answer_comments": null, "answer_body": "  Assuming you're working in Visual Studio, if you go in to you branch history and look at all of your commits, simply select the event prior to the commit you want to undo, right-click it, and select Revert .  Easy as that. ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "8", "answer_comments": null, "answer_body": " Here is site: Oh shit, git! .  Here are many recipes how to undo things in git. Some of them:   Oh shit, I need to change the message on my last commit!   git commit --amend\n# follow prompts to change the commit message   Oh shit, I accidentally committed something to master that should have been on a brand new branch!   # create a new branch from the current state of master\ngit branch some-new-branch-name\n# remove the commit from the master branch\ngit reset HEAD~ --hard\ngit checkout some-new-branch-name\n# your commit lives in this branch now :) ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "413", "answer_comments": null, "answer_body": " If you have Git Extras installed, you can run git undo to undo the latest commit. git undo 3 will undo the last 3 commits. ", "question_id": 927358}, "0.41063295863568783", 4], [{"answer_votes": "224", "answer_comments": [" I needed to write git reset --soft \"HEAD^\" with double quotes, because I write it from Windows command prompt. \u2013 Ena  Apr 23 '14 at 9:13 ", " It should work without any quotes. \u2013 jkulak  Nov 10 '16 at 19:19 "], "answer_body": " A single command:  git reset --soft 'HEAD^'  It works great to undo the last local commit! ", "question_id": 927358}, "0.41063295863568783", 4], [{"answer_votes": "124", "answer_comments": null, "answer_body": " Undo last commit:  git reset --soft HEAD^ or git reset --soft HEAD~  This will undo the last commit.  Here --soft means reset into staging.  HEAD~ or HEAD^ means to move to commit before HEAD.   Replace last commit to new commit:  git commit --amend -m \"message\"  It will replace the last commit with the new commit. ", "question_id": 927358}, "0.41063295863568783", 4], [{"answer_votes": "92", "answer_comments": null, "answer_body": " Simple, run this in your command line:  git reset --soft HEAD~ ", "question_id": 927358}, "0.41063295863568783", 4], [{"answer_votes": "44", "answer_comments": null, "answer_body": " Just undo the last commit:  git reset --soft HEAD~  Or undo the time before last time commit:  git reset --soft HEAD~2  Or undo any previous commit:  git reset --soft <commitID>  (you can get the commitID using git reflog )  When you undo a previous commit, remember to clean the workplace with  git clean  More details can be found in the docs: git-reset ", "question_id": 927358}, "0.41063295863568783", 4], [{"answer_votes": "18", "answer_comments": null, "answer_body": " You just have to use a single command:  git reset --soft 'HEAD^'  It works to undo the last local commit to your Git repository. ", "question_id": 927358}, "0.41063295863568783", 4], [{"answer_votes": "10", "answer_comments": null, "answer_body": " Undo last commit:  git reset --soft HEAD^ or git reset --soft HEAD~  This will undo the last commit.  Here --soft means reset into staging.  HEAD~ or HEAD^ means to move to commit before HEAD.  Replace last commit to new commit:  git commit --amend -m \"message\"  It will replace the last commit with the new commit. ", "question_id": 927358}, "0.41063295863568783", 4], [{"answer_votes": "9", "answer_comments": null, "answer_body": " I have found this site which describes how to undo things that you have committed into the repository.  Some commands:  git commit --amend        # Change last commit\ngit reset HEAD~ --soft    # Undo last commit ", "question_id": 927358}, "0.41063295863568783", 4]], [[{"answer_votes": "18320", "answer_comments": [" And if the commit was to the wrong branch, you may git checkout theRightBranch with all the changes stages. As I just had to do. \u2013 Frank Shearar  Oct 5 '10 at 15:44 ", " If you're working in DOS, instead of git reset --soft HEAD^ you'll need to use git reset --soft HEAD~1 .  The ^ is a continuation character in DOS so it won't work properly.  Also, --soft is the default, so you can omit it if you like and just say git reset HEAD~1 . \u2013 Ryan Lundy  Apr 13 '11 at 14:15 ", " Also, in zsh you have to quote ^, so git reset --soft 'HEAD^' ... at least I did \u2013 jberryman  Oct 27 '11 at 18:24 ", " (Correction to what I wrote above; --mixed is the default. --mixed means to keep the changed files, but not keep them in the index. --soft would keep the changed files and keep them in the index as they were just before the changed commit.  Sorry for the confusion.) \u2013 Ryan Lundy  Nov 17 '11 at 2:40 ", " zsh users might get: zsh: no matches found: HEAD^ - you need to escape ^ i.e. git reset --soft HEAD\\^ \u2013 tnajdek  Feb 21 '13 at 17:47  "], "answer_body": " Undo a commit and redo  $ git commit -m \"Something terribly misguided\"              (1)\n$ git reset HEAD~                                           (2)\n<< edit files as necessary >>                               (3)\n$ git add ...                                               (4)\n$ git commit -c ORIG_HEAD                                   (5)   This is what you want to undo  This leaves your working tree (the state of your files on disk) unchanged but undoes the commit and leaves the changes you committed unstaged (so they'll appear as \"Changes not staged for commit\" in git status , and you'll need to add them again before committing). If you only want to add more changes to the previous commit, or change the commit message 1 , you could use git reset --soft HEAD~ instead, which is like git reset HEAD~ (where HEAD~ is the same as HEAD~1 ) but leaves your existing changes staged.  Make corrections to working tree files.  git add anything that you want to include in your new commit.  Commit the changes, reusing the old commit message. reset copied the old head to .git/ORIG_HEAD ; commit with -c ORIG_HEAD will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the -C option.    1 Note, however, that you don't need to reset to an earlier commit if you just made a mistake in your commit message . The easier option is to git reset (to upstage any changes you've made since) and then git commit --amend , which will open your default commit message editor pre-populated with the last commit message.  Beware however that if you have added any new changes to the index, using commit --amend will add them to your previous commit.  ---- Edit by Frank R. 2018-3-9  If pushed,  git push origin master --force ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "9502", "answer_comments": [" @dma_k, yes.  Or you could do git reset --hard HEAD^^ once.  I use the tilde (~) notation because the caret (^) notation doesn't work in DOS. \u2013 Ryan Lundy  Feb 25 '12 at 15:02 ", " Another nice tip: You can re-attach the branch to the commit that you removed it from with git branch -f <branch> <commit-id> . Saves having to re-create commits! \u2013 naught101  Jun 22 '12 at 13:11  ", " For a git beginner, it isn't obvious what the difference is between the last two options (--soft and the one above it). Mentioning the index doesn't help, we don't really know what that means yet. @nessur's connection between soft and Ctrl-Z really helped! But I still don't quite understand the difference between the two options. \u2013 Stomp  Jun 26 '12 at 15:56 ", " It's much better to be told 'why' something works, than just to be told the answer. Kudos to this description - it helped be 'get' git. \u2013 Chris Nash  Jul 3 '12 at 19:13 ", " Missing a crucial point: If the said commit was previously 'pushed' to the remote, any 'undo' operation, no matter how simple, will cause enormous pain and suffering to the rest of the users who have this commit in their local copy, when they do a 'git pull' in the future.  So, if the commit was already 'pushed', do this instead:      git revert <bad-commit-sha1-id>     git push origin : \u2013 FractalSpace  Nov 8 '13 at 23:43  "], "answer_body": " Undoing a commit is a little scary if you don't know how it works.  But it's actually amazingly easy if you do understand.  Say you have this, where C is your HEAD and (F) is the state of your files.  (F)\nA-B-C\n    \u2191\n  master  You want to nuke commit C and never see it again .  You do this:  git reset --hard HEAD~1  The result is:  (F)\nA-B\n  \u2191\nmaster  Now B is the HEAD.  Because you used --hard , your files are reset to their state at commit B.  Ah, but suppose commit C wasn't a disaster, but just a bit off.  You want to undo the commit but keep your changes for a bit of editing before you do a better commit.  Starting again from here, with C as your HEAD:  (F)\nA-B-C\n    \u2191\n  master  You can do this, leaving off the --hard :  git reset HEAD~1  In this case the result is:  (F)\nA-B-C\n  \u2191\nmaster  In both cases, HEAD is just a pointer to the latest commit.  When you do a git reset HEAD~1 , you tell Git to move the HEAD pointer back one commit.  But (unless you use --hard ) you leave your files as they were.  So now git status shows the changes you had checked into C.  You haven't lost a thing!  For the lightest touch, you can even undo your commit but leave your files and your index :  git reset --soft HEAD~1  This not only leaves your files alone, it even leaves your index alone.  When you do git status , you'll see that the same files are in the index as before.  In fact, right after this command, you could do git commit and you'd be redoing the same commit you just had.  One more thing: Suppose you destroy a commit as in the first example, but then discover you needed it after all ?  Tough luck, right?  Nope, there's still a way to get it back.  Type git reflog and you'll see a list of (partial) commit shas that you've moved around in.  Find the commit you destroyed, and do this:  git checkout -b someNewBranchName shaYouDestroyed  You've now resurrected that commit.  Commits don't actually get destroyed in Git for some 90 days, so you can usually go back and rescue one you didn't mean to get rid of. ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "1647", "answer_comments": [" I found this answer the clearest. git revert HEAD^ is not the previous, is the previous of the previous. I did : git revert HEAD and then push again and it worked :) \u2013 nacho4d  Jul 14 '11 at 8:32  ", " @riezebosch: your warning is in the wrong place. THIS answer doesn't mess up things, cause it correctly creates a new commit 102: \"restoring the file I removed on accident\" \u2013 rubo77  Jan 6 '14 at 8:37  ", " This was most helpful to me. I needed to know how to revert a public commit. Thanks! \u2013 FearlessFuture  Jan 25 at 22:25 "], "answer_body": " This took me a while to figure out, so maybe this will help someone...  There are two ways to \"undo\" your last commit, depending on whether or not you have already made your commit public (pushed to your remote repository):  How to undo a local commit  Let's say I committed locally, but now want to remove that commit.  git log\n    commit 101: bad commit    # latest commit, this would be called 'HEAD'\n    commit 100: good commit   # second to last commit, this is the one we want  To restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD :  git reset --soft HEAD^     # use --soft if you want to keep your changes\ngit reset --hard HEAD^     # use --hard if you don't care about keeping the changes you made  Now git log will show that our last commit has been removed.  How to undo a public commit  If you have already made your commits public, you will want to create a new commit which will \"revert\" the changes you made in your previous commit (current HEAD).  git revert HEAD  Your changes will now be reverted and ready for you to commit:  git commit -m 'restoring the file I removed by accident'\ngit log\n    commit 102: restoring the file I removed by accident\n    commit 101: removing a file we don't need\n    commit 100: adding a file that we need  For more info, check out Git Basics - Undoing Things ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "655", "answer_comments": null, "answer_body": " To change the last commit  Replace the files in the index:  git rm --cached *.class\ngit add *.java  Then, if it's a private branch, amend the commit:  git commit --amend  Or, if it's a shared branch, make a new commit:  git commit -m 'Replace .class files with .java files'   ( to change a previous commit , use the awesome interactive rebase )   ProTip\u2122: \u00a0 Add *.class to a gitignore to stop this happening again.   To revert a commit  Amending a commit is the ideal solution if you need to change the last commit, but a more general solution is reset .  You can reset git to any commit with:  git reset @~N  Where N is the number of commits before HEAD , and @~ resets to the previous commit.  So, instead of amending the commit, you could use:  git reset @~\ngit add *.java\ngit commit -m \"Add .java files\"  Check out git help reset , specifically the sections on --soft  --mixed and --hard , for a better understanding of what this does.  Reflog  If you mess up, you can always use the reflog to find dropped commits:  $ git reset @~\n$ git reflog\nc4f708b HEAD@{0}: reset: moving to @~\n2c52489 HEAD@{1}: commit: added some .class files\n$ git reset 2c52489\n... and you're back where you started  ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "525", "answer_comments": [" If you committed to the wrong branch: once reverted, switch to the correct branch and cherry-pick the commit. \u2013 Kris  Jun 27 '12 at 11:02 ", " What does that mean, cherry pick the commit? In my case, I was on the wrong branch when I edited a file. I committed it then realized I was in the wrong branch. Using \"git reset --soft HEAD~1\" got me back to just before the commit, but now if I checkout the correct branch, how do I undo the changes to the file in wrong branch but instead make them (in the same named file) in the correct branch? \u2013 astronomerdave  Jan 13 '15 at 22:05 ", " I just utilized git revert commit-id worked like a charm.  Of course then you will need to push your changes. \u2013 Casey Robinson  Jan 25 '16 at 21:07  ", " I believe that would be git cherry-pick <<erroneous-commit-sha>> @astronomerdave. From, Mr. Almost-2-Years-Late-to-the-Party. \u2013 Tom Howard  Oct 20 '16 at 18:19 "], "answer_body": " Use git revert commit-id  To get the commit ID, just use git log ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "418", "answer_comments": [" @SMR, In your example, all are pointing into current HEAD only. HEAD^ = HEAD^1. As well as HEAD^1 = HEAD~1.  When you use HEAD~2, there is a difference between ~ and ^ symbols. If you use ~2 means \u201cthe first parent of the first parent,\u201d or \u201cthe grandparent\u201d. \u2013 Madhan Ayyasamy  Dec 14 '15 at 15:34  ", " clear and easy to understand, save my night ! \u2013 Vladimir Ch  Mar 14 at 19:10 ", " Apparently, I accidentally downvoted this answer, and it's too late for me to un-downvote it. Apologies. \u2013 Matt  Apr 9 at 17:20 "], "answer_body": " If you are planning undoing a local commit entirely, whatever you changes you did on the commit, and if you don't worry anything about that, just do the following command.  git reset --hard HEAD^1  (This command will ignore your entire commit and your changes will be lost completely from your local working tree). If you want to undo your commit, but you want your changes in the staging area (before commit just like after git add ) then do the following command.  git reset --soft HEAD^1  Now your committed files comes into the staging area. Suppose if you want to unstage the files, because you need to edit some wrong conent, then do the following command  git reset HEAD  Now committed files come from the staged area into the unstaged area. Now files are ready to edit, so whatever you changes, you want go edit and added it and make a fresh/new commit.  More ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "367", "answer_comments": null, "answer_body": " I prefer to use git rebase -i for this job, because a nice list pops up where I can choose the commits to get rid of. It might not be as direct as some other answers here, but it just feels right .  Choose how many commits you want to list, then invoke like this (to enlist last three)  git rebase -i HEAD~3  Sample list  pick aa28ba7 Sanity check for RtmpSrv port\npick c26c541 RtmpSrv version option\npick 58d6909 Better URL decoding support  Then git will remove commits for any line that you remove. ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "283", "answer_comments": [" I'm in the 2nd case, but when I do \"git revert HEAD\" it says \"error: Commit [ID] is a merge but no -m option was given.  fatal: revert failed\".  Any suggestions? \u2013 metaforge  Nov 12 '14 at 19:36 ", " Probably worth mentioning that instead of HEAD~1 you could use the actual hash as displayed by git log --stat or by git reflog - useful when you need to 'undo' more than one commit. \u2013 ccpizza  Dec 7 '14 at 0:38 "], "answer_body": " If you have committed junk but not pushed,  git reset --soft HEAD~1   HEAD~1 is a shorthand for the commit before head. Alternatively you can refer to the SHA-1 of the hash if you want to reset to. --soft option will delete the commit but it will leave all your changed files \"Changes to be committed\", as git status would put it.  If you want to get rid of any changes to tracked files in the working tree since the commit before head use \" --hard \" instead.   OR   If you already pushed and someone pulled which is usually my case, you can't use git reset . You can however do a git revert ,   git revert HEAD   This will create a new commit that reverses everything introduced by the accidental commit.  ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "238", "answer_comments": null, "answer_body": " On SourceTree (GUI for GitHub), you may right-click the commit and do a 'Reverse Commit'. This should undo your changes.  On the terminal:  You may alternatively use:  git revert  Or:  git reset --soft HEAD^ # Use --soft if you want to keep your changes.\ngit reset --hard HEAD^ # Use --hard if you don't care about keeping your changes. ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "189", "answer_comments": null, "answer_body": " Just reset it doing the command below using git :  git reset --soft HEAD~1  Explain: what git reset does, it's basically reset to any commit you'd like to go back to, then if you combine it with --soft key, it will go back, but keep the  changes in your file(s), so you get back to the stage which the file was just added, HEAD is the head of the branch and if you combine with ~1 (in this case you also use HEAD^ ), it will go back only one commit which what you want...  I create the steps in the image below in more details for you, including all steps that may happens in real situations and committing the code:  ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "120", "answer_comments": null, "answer_body": " In my case I accidentally committed some files I did not want to. So I did the following and it worked:  git reset --soft HEAD^\ngit rm --cached [files you do not need]\ngit add [files you need]\ngit commit -c ORIG_HEAD  Verify the results with gitk or git log --stat ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "105", "answer_comments": null, "answer_body": " Use SourceTree (graphical tool for Git) to see your commits and tree. You can manually reset it directly by right clicking it. ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "69", "answer_comments": [" After git reset --soft HEAD~1 , if you need to unstage files, use: git reset \u2013 MKatleast3  Feb 23 '17 at 0:32 "], "answer_body": " If you want remove files in the last commit, you can use this:  git reset --hard HEAD~1  And if need files in the last commit, you can use this:  git reset --soft HEAD~1 ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "67", "answer_comments": null, "answer_body": " For a local commit  git reset --soft HEAD~1  or if you do not remember exactly in which commit it is, you might use  git rm --cached <file>  For a pushed commit  The proper way of removing files from the repository history is using git filter-branch . That is,  git filter-branch --index-filter 'git rm --cached <file>' HEAD  But I recomnend you use this command with care. Read more at git-filter-branch(1) Manual Page . ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "53", "answer_comments": [" Or git reset @~ \u2013 Zaz  Aug 4 '16 at 8:36 "], "answer_body": " You can use:  git reset HEAD@{1}  This command will delete your wrong commit without a Git log. ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "49", "answer_comments": [" The very useful description about differences --soft VS --hard  atlassian.com/git/tutorials/\u2026 \u2013 Eugen Konkov  Dec 15 '16 at 16:29 ", " One doesn't really lose the commits on a --hard reset as they will be available in the ref log for 30 days git reflog . \u2013 Todd  Sep 11 '17 at 14:10 "], "answer_body": " WHAT TO USE, reset --soft or reset --hard ?  I am just adding two cents for @Kyralessa's answer:  If you are unsure what to use go for --soft (I used this convention to remember it -- s oft for safe).  Why ?  If you choose --hard by mistake you will LOSE your changes as it wasn't before.\nIf you choose --soft by mistake you can achieve the same results of --hard by applying additional commands  git reset HEAD file.html\ngit checkout -- file.html  Full example  echo \"some changes...\" > file.html\ngit add file.html\ngit commit -m \"wrong commit\"\n\n# I need to reset\ngit reset --hard HEAD~1 (cancel changes)\n# OR\ngit reset --soft HEAD~1 # Back to staging\ngit reset HEAD file.html # back to working directory\ngit checkout -- file.html # cancel changes  Credits goes to @Kyralessa. ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "42", "answer_comments": null, "answer_body": " Think we have code.txt file.\nWe make some changes on it and commit. We can undo this commit in three ways , but first you should know what is the staged file...\nAn staged file is a file that ready to commit and if you run git status this file will be shown with green color and if this is not staged for commit will be shown with red color:   It means if you commit your change, your changes on this file is not saved.\nYou can add this file in your stage with git add code.txt and then commit your change:   Undo last commit:   Now if we want just undo commit without any other changes, we can use  git reset --soft HEAD^    If we want undo commit and its changes ( THIS IS DANGEROUS, because your change will lost ), we can use  git reset --hard HEAD^   And if we want undo commit and remove changes from stage, we can use  git reset --mixed HEAD^ or in a short form git reset HEAD^   ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "41", "answer_comments": [" Be extra careful when reverting merge commits. You may lose your commits. Read about what Linus says about that: kernel.org/pub/software/scm/git/docs/howto/\u2026 \u2013 Eugen Konkov  Dec 15 '16 at 16:25  "], "answer_body": " To undo your local commit you use git reset <file> . Also that tutorial is very helpful to show you how it works.  Alternatively, you can use git revert <commit> : reverting should be used when you want to add another commit that rolls back the changes (but keeps them in the project history). ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "31", "answer_comments": [" \"Working copy\"? Is this a Git concept? Isn't it an SVN concept? \u2013 Peter Mortensen  Jan 28 at 21:36 "], "answer_body": " Undo the Last Commit  There are tons of situations where you really want to undo that last commit into your code. E.g. because you'd like to restructure it extensively - or even discard it altogether!  In these cases, the \"reset\" command is your best friend:  $ git reset --soft HEAD~1  The above command (reset) will rewind your current HEAD branch to the specified revision. In our example above, we'd like to return to the one before the current revision - effectively making our last commit undone.  Note the --soft flag: this makes sure that the changes in undone revisions are preserved. After running the command, you'll find the changes as uncommitted local modifications in your working copy.  If you don't want to keep these changes, simply use the --hard flag. Be sure to only do this when you're sure you don't need these changes any more.  $ git reset --hard HEAD~1  ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "25", "answer_comments": null, "answer_body": " Use this command  git checkout -b old-state 0d1d7fc32 ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "24", "answer_comments": null, "answer_body": " Use this command:  git checkout -b old-state number_commit ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "21", "answer_comments": null, "answer_body": " Use:  git reset HEAD~1 --soft  Make changes, add, and commit the changes. ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "15", "answer_comments": null, "answer_body": " Just use git reset --hard <last good SHA> to reset your changes and give new commit. You can also use git checkout -- <bad filename> . ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "14", "answer_comments": null, "answer_body": " You can undo your git commits in two ways:-\nFirst is you can use git revert, if you want to keep your commit history.  git revert HEAD~3\ngit revert <hashcode of commit>  Second is you can use git reset, which would delete all your commit history and bring your head to commit where you want it.  git reset <hashcode of commit>\ngit reset HEAD~3  You can also use --hard keyword if any of it start behaving otherwise. But , I would recommend until it's extremely necessary. ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "8", "answer_comments": null, "answer_body": " HEAD:  Before reset commit we should know about HEAD... HEAD is nothing but your current state in your working directory.. it is represented by commit number...  git commmit:  Each changes assigned under commit which is represented by unique tag.. Commits can't be deleted. so if you want your last commit you can simply dive into it using git reset  you can dive into last commit using 2 method,  Method 1: ( if you dont know commit number but want to move onto very first)  git reset HEAD~1  #it will move your head to last commit  Method 2: ( if you know commit you simply reset onto your known commit)  git reset 0xab3 # commit number  Note: if you want to know recent commit try this, git log -p -1   here is the graphical representation,  ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "4", "answer_comments": null, "answer_body": " You can undo your commits from the local repository, please follow the below scenario.  In below image I checkout test branch (using Git command git checkout -b test ) as a local and check status (using Git command git status ) of local branch there is nothing to commit.   In the next image image you can see here I made few changes in Filter1.txt and added that file to stage area than commit my changes with some message (using Git command git commit -m \"Doing commit to test revert back\" ).  \"-m is for commit message\"   In the next image you can see your commits log whatever you have made commits (Using Git command git log ).   So in above image you can see commit id with each commit and with your commit message now whatever commit you want to revert back or undo copy that commit id and hit below Git command. git revert {\"paste your commit id\"} . Example:  git revert 9ca304ed12b991f8251496b4ea452857b34353e7   I have reverted back my last commit. Now if you check your Git status. You can see the modified file which is Filter1.txt and yet to commit.  ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "834", "answer_comments": [" \"--hard\" will get rid of the modified .java files in the working directory that he wanted to commit. \u2013 Esko Luontola  May 29 '09 at 18:26 ", " You can \"git stash save\" working copy changes, do a hard reset and then \"git stash pop\" to get them back, though I suppose a soft reset would be simpler. \u2013 Asad R.  Apr 15 '11 at 13:33 ", " git commit -a -m \"\" or git commit -am \"\" naturally! :] \u2013 trejder  Jun 21 '14 at 16:31 ", " Another 'shortcut' use of stash; if you want to unstage everything (undo git add), just git stash , then git stash pop \u2013 seanriordan08  Dec 8 '15 at 22:30 "], "answer_body": " git rm yourfiles/*.class\ngit commit -a -m \"deleted all class files in folder 'yourfiles'\"  or  git reset --hard HEAD~1  Warning: The above command will permanently remove the modifications to the .java files (and any other files) that you wanted to commit.  The hard reset to HEAD-1 will set your working copy to the state of the commit before your wrong commit. ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "382", "answer_comments": [" Rewriting history on a shared repository is generally a very bad idea.  I assume you know what you're doing, I just hope future readers do too. \u2013 Brad Koch  Dec 7 '12 at 16:02  ", " Yes rollback is dangerous. Make sure that your working copy is in the desired state before you push. When pushing then the unwanted commits gets deleted permanently. \u2013 neoneye  Dec 8 '12 at 14:14 ", " \"Just like in the real world, if you want to rewrite history, you need a conspiracy: everybody has to be 'in' on the conspiracy (at least everybody who knows about the history, i.e. everybody who has ever pulled from the branch).\" Source: stackoverflow.com/a/2046748/334451 \u2013 Mikko Rantalainen  Aug 7 '13 at 10:10 ", " fantastic. This worked like a charm. There should be a git option for independently working developers - where one can use GitX, or a delete button next to a commit, and a confirmation - so this process is not so enigmatic :) \u2013 zero_cool  Jun 20 '14 at 15:31 "], "answer_body": " I wanted to undo the lastest 5 commits in our shared repository. I looked up the revision id that I wanted to rollback to. Then I typed in the following.  prompt> git reset --hard 5a7404742c85\nHEAD is now at 5a74047 Added one more page to catalogue\nprompt> git push origin master --force\nTotal 0 (delta 0), reused 0 (delta 0)\nremote: bb/acl: neoneye is allowed. accepted payload.\nTo git@bitbucket.org:thecompany/prometheus.git\n + 09a6480...5a74047 master -> master (forced update)\nprompt> ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "281", "answer_comments": [" Should be marked as answer, because you can specify which SHA you want. \u2013 Belfield  Jul 28 '17 at 10:49 ", " What if you do not use \"<commit_id>\" and simply use \"git reset --hard\"? I typically just want to get rid of my latest updates that I have not committed yet and got back to the latest commit I made, and I always use \"git reset --hard\". \u2013 Jaime Montoya  Sep 27 '17 at 23:30 ", " @JaimeMontoya To undo latest changes you can use git reset --hard , but if you have to hard remove last \"n\" commits you specify a SHA \u2013 poorva  Sep 28 '17 at 13:10 ", " Really like -f . This is what other answers lack \u2013 FreeLightman  Mar 1 at 8:58 "], "answer_body": " If you want to permanently undo it and you have cloned some repository  The commit id can be seen by  git log  Then you can do -  git reset --hard <commit_id>\n\ngit push origin <branch_name> -f ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "191", "answer_comments": null, "answer_body": " How to undo the last Git commit?  To restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD.   If you don't want to keep your changes that you made:  git reset --hard HEAD^  If you want to keep your changes:  git reset --soft HEAD^   Now check your git log. It will show that our last commit has been removed. ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "158", "answer_comments": null, "answer_body": " Use reflog to find a correct state  git reflog   REFLOG BEFORE RESET  Select the correct reflog (f3cb6e2 in my case) and type  git reset --hard f3cb6e2  After that the repo HEAD will be reset to that HEADid  LOG AFTER RESET  Finally the reflog looks like the picture below   REFLOG FINAL ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "145", "answer_comments": null, "answer_body": " \"Reset the working tree to the last commit\"  git reset --hard HEAD^  \"Clean unknown files from the working tree\"  git clean  see - Git Quick Reference  NOTE: This command will delete your previous commit, so use with caution! git reset --hard is safer \u2013 ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "142", "answer_comments": null, "answer_body": " First run:  git reflog  It will show you all the possible actions you have performed on your repository, for example, commit, merge, pull, etc.  Then do:  git reset --hard ActionIdFromRefLog ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "122", "answer_comments": null, "answer_body": " Type git log and find the last commit hash code and then enter:  git reset <the previous co> ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "85", "answer_comments": [" Maybe you could at a note/warning that his command will throw away the commit and the changes in the working directory without asking any further. \u2013 cr7pt0gr4ph7  Nov 24 '14 at 22:35  ", " If you happen to do this by accident, not all is lost, though. See stackoverflow.com/questions/10099258/\u2026 , stackoverflow.com/questions/15479501/\u2026 and stackoverflow.com/questions/7374069/undo-git-reset-hard/7376959 . \u2013 cr7pt0gr4ph7  Nov 24 '14 at 22:40 ", " Use --soft to keep your changes as uncommitted changes , --hard to nuke the commit completely and revert back by one. Remember to do such operations only on changes, that are not pushed yet. \u2013 Yunus Nedim Mehel  Mar 9 '15 at 9:11 ", " @Zaz: You are right; maybe I should have clarified that. Only files/changes that have been either added to index (/staged) or have been committed can possibly be recovered. Uncommitted, unstaged changes are , as you said, completely thrown away by git reset --hard . \u2013 cr7pt0gr4ph7  Sep 13 '16 at 21:17 ", " As a sidenote: Everytime a file is staged, git stores its contents in its object database. The stored contents are only removed when garbage collection is executed. It is therefore possible to recover the last staged version of a file that was not currently staged when git reset --hard was executed (see the posts linked above for more information). \u2013 cr7pt0gr4ph7  Sep 13 '16 at 21:22  "], "answer_body": " To reset to the previous revision, permanently deleting all uncommitted changes:  git reset --hard HEAD~1 ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "73", "answer_comments": [" git reset --hard HEAD~1 is too dangerous ! This will not just 'cancel last commit', but will revert repo completely back to the previous commit. So you will LOOSE all changes committed in the last commit! \u2013 Arnis Juraga  Mar 21 '17 at 12:09  ", " You right, to undo this you can use git push -f <remote> HEAD@{1}:<branch> \u2013 Benny  Apr 24 '17 at 13:07 "], "answer_body": " There are many ways to do it:  Git command to undo the last commit/ previous commits:  Basic command to revert the commit in Git is:  $ git reset --hard <COMMIT -ID>  or  $ git reset --hard HEAD~<n>  COMMIT-ID : ID for the commit  n: is number of last commits you want to revert  You can get the commit id as shown below:  $ **git log --oneline**\n\nd81d3f1 function to subtract two numbers\n\nbe20eb8 function to add two numbers\n\nbedgfgg function to mulitply two numbers  where d81d3f1 and be20eb8 are commit id.  Now let's see some cases:  Suppose you want to revert the last commit 'd81d3f1'. Below are the ways:  $ git reset --hard d81d3f1  or  $ git reset --hard HEAD~1  Suppose you want to revert the commit 'be20eb8'. Below are the way:  $ git reset --hard be20eb8  For more detailed information you can refer and try out some other commands too for resetting head to a specified state:  $ git reset --help ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "21", "answer_comments": null, "answer_body": " In order to get rid of (all the changes in) last commit, last 2 commits and last n commits:  git reset --hard HEAD~1\ngit reset --hard HEAD~2\n...\ngit reset --hard HEAD~n  And, to get rid of anything after a specific commit:  git reset --hard <commit sha>  e.g.,  git reset --hard 0d12345   PS: 1- Be careful, because of \"hard\" option, it deletes the local changes\n  in your repo as well and reverts to the previous mentioned commit. You\n  should run this if you are sure you messed up in your last commit(s)\n  and would like to go back in time.  2- Usually 7 letters of \"commit sha\" is enough, but in bigger\n  projects, you may need up to 12 letters to guarantee be unique. You\n  also can mention the whole 40 letters sha.  3- The above commands work in Github for Windows as well.  ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "8", "answer_comments": null, "answer_body": " Find the last commit hash code by seeing the log by :  git log  Then  git reset <the previous co> ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "4", "answer_comments": null, "answer_body": " git reset --hard your_last_good_commit_hash_here\n\ngit push --force origin master ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "0", "answer_comments": null, "answer_body": " Try this, hard reset to previous commit where those files were not added, then:  git reset --hard <commit_hash>  Make sure you have a backup of your changes just in case, as it's a hard reset, which means they'll be lost (unless you stashed earlier) ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "338", "answer_comments": [" gitk --all $(git reflog | cut -c1-7)& may be helpful for finding the previous revision if you want to undo an '--amend' commit. \u2013 nobar  Oct 18 '14 at 23:38  ", " It should be noted that if you're attempting to remove secret information before pushing to a shared repository, doing a revert won't help you, because the information will still be in the history in the previous commit.  If you want to ensure the change is never visible to others you need to use git reset \u2013 Jherico  Sep 4 '15 at 4:52 ", " See also: stackoverflow.com/a/30598953 \u2013 nobar  Apr 5 '16 at 4:20 ", " I think 'private'/'public' would more correctly be 'local'/'remote'. \u2013 nobar  Mar 28 at 14:59 "], "answer_body": " How to fix the previous local commit  Use git-gui (or similar) to perform a git commit --amend . From the GUI you can add or remove individual files from the commit. You can also modify the commit message.  How to undo the previous local commit  Just reset your branch to the previous location (for example, using gitk or git rebase ). Then reapply your changes from a saved copy. After garbage collection in your local repository, it will be like the unwanted commit never happened. To do all of that in a single command, use git reset HEAD~1 .  Word of warning : Careless use of git reset is a good way to get your working copy into a confusing state. I recommend that Git novices avoid this if they can.  How to undo a public commit  Perform a reverse cherry pick ( git-revert ) to undo the changes.  If you haven't yet pulled other changes onto your branch, you can simply do...  git revert --no-edit HEAD  Then push your updated branch to the shared repository.  The commit history will show both commits, separately .   Advanced: Correction of private branch in public repository  This can be dangerous -- be sure you have a local copy of the branch to repush.  Also note: You don't want to do this if someone else may be working on the branch.  git push --delete (branch_name) ## remove public version of branch  Cleanup your branch locally then repush...  git push origin (branch_name)  In the normal case, you probably needn't worry about your private-branch commit history being pristine.  Just push a followup commit (see 'How to undo a public commit' above), and later, do a squash-merge to hide the history. ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "128", "answer_comments": null, "answer_body": " Another way:  Checkout the branch you want to revert, then reset your local working copy back to the commit that you want to be the latest one on the remote server (everything after it will go bye-bye). To do this, in SourceTree I right-clicked on the and selected \"Reset BRANCHNAME to this commit\".  Then navigate to your repository's local directory and run this command:  git -c diff.mnemonicprefix=false -c core.quotepath=false push -v -f --tags REPOSITORY_NAME BRANCHNAME:BRANCHNAME  This will erase all commits after the current one in your local repository but only for that one branch. ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "46", "answer_comments": null, "answer_body": " If you are working with SourceTree , this will help you.  Right click on the commit then select \" Reset (current branch)/master to this commit \" and last select  \"Soft\" reset .  ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "36", "answer_comments": null, "answer_body": " VISUAL STUDIO USERS (2015, etc.)  If you cannot synchronise in Visual Studio as you are not allowed to push to a branch like \"development\" then as much as I tried, in Visual Studio NEITHER the REVERT NOR the RESET (hard or soft) would work.  Per the answer with TONS OF VOTES:  Use this at the command prompt of root of your project to nuke anything that will attempt to get pushed:  git reset --hard HEAD~1  Backup or zip your files just in case you don't wish to lose any work, etc... ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "31", "answer_comments": null, "answer_body": " You need to do the easy and fast  git commit --amend  if it's a private branch or  git commit -m 'Replace .class files with .java files'  if it's a shared or public branch. ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "30", "answer_comments": null, "answer_body": " I got the commit ID from bitbucket and then did:  git checkout commitID .  Example:  git checkout 7991072 .  And it reverted it back up to that working copy of that commit. ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "26", "answer_comments": null, "answer_body": " In my case I committed and pushed to the wrong branch, so what I wanted was to have all my changes back so I can commit them to a new correct branch, so I did this:  On the same branch that you committed and pushed, if you type \"git status\" you wont't see anything new because you committed and pushed, now type:  git reset --soft HEAD~1  This will get all your changes(files) back in the stage area, now to get them back in the working directory(unstage) you just type:  git reset FILE  Where \"File\" is the file that you want to commit again. Now this FILE should be in the working directory(unstaged) with all the changes that you did. Now you can change to whatever branch that you want and commit the changes in that branch. Hope this helps other people that made the same mistake I did. Of course the initial branch that you committed is still there with all changes, but in my case that was ok, if it is not for you you can look for ways to revert that commit in that branch. ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "25", "answer_comments": null, "answer_body": " You have several options to undo your last commit. \nHere are some of your options summarize into a single answer with code snippets  First of all you need to figure which are the \"wrong\" commits which you wish to discard. We will use git reflog to find it.   git reflog  You can always use the reflog as well.  git reflog will display any change which updated the HEAD and checking out the desired reflog entry will set the HEAD back to this commit.  Every time the HEAD is modified there will be a new entry in the reflog . The reflog is similar to unix history command and is kept locally on your machine.  git reflog\ngit checkout HEAD@{...}\n# or\ngit checkout <sha-1>  Using the checkout you can go back to any desired commit and you can create branch or any other options that git checkout will allow you to do.    git reset HEAD --hard <commit_id>  \"Move\" your head back to the desired commit. Git reset will checkout the desired commit content to your staging area and/or to your working directory based upon the value --hard/--soft/--mixed you choose to pick. --hard will update both stage area and working directory with the given  content and will \"detach\" any other commits beyond this point on your local branch.  If those commits are not part of any other branch they will become \"dangle\". \"dangle\" content means that there is a un-reachable content in your local repository which is not part of any other branch and can be removed or will be removed by the gc .  # This will destroy any local modifications.\n# Don't do it if you have uncommitted work you want to keep.\ngit reset --hard 0d1d7fc32\n\n# Alternatively, if there's work to keep:\ngit stash\ngit reset --hard 0d1d7fc32\ngit stash pop\n# This saves the modifications, then reapplies that patch after resetting.\n# You could get merge conflicts, if you've modified things which were\n# changed since the commit you reset to.   This schema illustrate which command does what. As you can see there reset && checkout modify the HEAD .  ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "17", "answer_comments": null, "answer_body": " Reference: How to undo last commit in Git?  If you have Git Extensions installed you can easily undo/revert any commit (you can download git extensions from here ).  Open Git Extensions, right click on the commit you want to revert then select \"Revert commit\".   A popup will be opened (see the screenshot below)   Select \"Automatically create a commit\" if you want to directly commit the reverted changes or if you want to manually commit the reverted changes keep the box un-selected and click on \"Revert this commit\" button. ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "10", "answer_comments": null, "answer_body": " In IntelliJ IDEA you can just open Git Repository Log by pressing Alt + 9 , then right mouse button click at some tag from commits list and select: \"Reset Current Branch to Here...\" ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "9", "answer_comments": null, "answer_body": "  Assuming you're working in Visual Studio, if you go in to you branch history and look at all of your commits, simply select the event prior to the commit you want to undo, right-click it, and select Revert .  Easy as that. ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "8", "answer_comments": null, "answer_body": " Here is site: Oh shit, git! .  Here are many recipes how to undo things in git. Some of them:   Oh shit, I need to change the message on my last commit!   git commit --amend\n# follow prompts to change the commit message   Oh shit, I accidentally committed something to master that should have been on a brand new branch!   # create a new branch from the current state of master\ngit branch some-new-branch-name\n# remove the commit from the master branch\ngit reset HEAD~ --hard\ngit checkout some-new-branch-name\n# your commit lives in this branch now :) ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "413", "answer_comments": null, "answer_body": " If you have Git Extras installed, you can run git undo to undo the latest commit. git undo 3 will undo the last 3 commits. ", "question_id": 927358}, "0.41063295863568783", 4], [{"answer_votes": "224", "answer_comments": [" I needed to write git reset --soft \"HEAD^\" with double quotes, because I write it from Windows command prompt. \u2013 Ena  Apr 23 '14 at 9:13 ", " It should work without any quotes. \u2013 jkulak  Nov 10 '16 at 19:19 "], "answer_body": " A single command:  git reset --soft 'HEAD^'  It works great to undo the last local commit! ", "question_id": 927358}, "0.41063295863568783", 4], [{"answer_votes": "124", "answer_comments": null, "answer_body": " Undo last commit:  git reset --soft HEAD^ or git reset --soft HEAD~  This will undo the last commit.  Here --soft means reset into staging.  HEAD~ or HEAD^ means to move to commit before HEAD.   Replace last commit to new commit:  git commit --amend -m \"message\"  It will replace the last commit with the new commit. ", "question_id": 927358}, "0.41063295863568783", 4], [{"answer_votes": "92", "answer_comments": null, "answer_body": " Simple, run this in your command line:  git reset --soft HEAD~ ", "question_id": 927358}, "0.41063295863568783", 4], [{"answer_votes": "44", "answer_comments": null, "answer_body": " Just undo the last commit:  git reset --soft HEAD~  Or undo the time before last time commit:  git reset --soft HEAD~2  Or undo any previous commit:  git reset --soft <commitID>  (you can get the commitID using git reflog )  When you undo a previous commit, remember to clean the workplace with  git clean  More details can be found in the docs: git-reset ", "question_id": 927358}, "0.41063295863568783", 4], [{"answer_votes": "18", "answer_comments": null, "answer_body": " You just have to use a single command:  git reset --soft 'HEAD^'  It works to undo the last local commit to your Git repository. ", "question_id": 927358}, "0.41063295863568783", 4], [{"answer_votes": "10", "answer_comments": null, "answer_body": " Undo last commit:  git reset --soft HEAD^ or git reset --soft HEAD~  This will undo the last commit.  Here --soft means reset into staging.  HEAD~ or HEAD^ means to move to commit before HEAD.  Replace last commit to new commit:  git commit --amend -m \"message\"  It will replace the last commit with the new commit. ", "question_id": 927358}, "0.41063295863568783", 4], [{"answer_votes": "9", "answer_comments": null, "answer_body": " I have found this site which describes how to undo things that you have committed into the repository.  Some commands:  git commit --amend        # Change last commit\ngit reset HEAD~ --soft    # Undo last commit ", "question_id": 927358}, "0.41063295863568783", 4], [{"answer_votes": "1590", "answer_comments": [" Does this work when I did a git commit --amend and what I really meant to do is a git commit ? \u2013 dbm  May 18 '11 at 13:07 ", " @dbm, if you accidentally amended, use git reset --soft <oldref> , where oldref is the commit ID before the amend. You can use git reflog to identify the old commit ID. This will undo the effects of the amend, but leave changes staged. Then just do git commit to commit as a regular commit. \u2013 bdonlan  May 18 '11 at 14:20 ", " @Dennis, git commit --amend turns the current tree (ie, staged changes) into a commit, overwriting current HEAD. After that point, they're not considered staged anymore because they're part of the commit (ie, git diff --cached is blank), but they're not \"removed\" or \"lost\". \u2013 bdonlan  Feb 1 '12 at 3:08 "], "answer_body": " Add/remove files to get things the way you want:  git rm classdir\ngit add sourcedir  Then amend the commit:  git commit --amend  The previous, erroneous commit will be edited to reflect the new index state - in other words, it'll be like you never made the mistake in the first place.  Note that you should only do this if you haven't pushed yet. If you have pushed, then you'll just have to commit a fix normally. ", "question_id": 927358}, "0.3789089419879019", 0], [{"answer_votes": "106", "answer_comments": null, "answer_body": " There are two main scenarios  You haven't pushed the commit yet  If the problem was extra files you commited (and you don't want those on repository), you can remove them using git rm and then commiting with --amend  git rm <pathToFile>  You can also remove entire directories with -r , or even combine with other Bash commands  git rm -r <pathToDirectory>\ngit rm $(find -name '*.class')  After removing the files, you can commit, with --amend option  git commit --amend -C HEAD # the -C option is to use the same commit message  This will rewrite your recent local commit removing the extra files, so, these files will never be sent on push and also will be removed from your local .git repository by GC.  You already pushed the commit  You can apply the same solution of the other scenario and then doing git push with the -f option, but it is not recommended since it overwrites the remote history with a divergent change (it can mess your repository).  Instead, you have to do the commit without --amend (remember this about -amend`: That option rewrites the history on the last commit). ", "question_id": 927358}, "0.3789089419879019", 0], [{"answer_votes": "79", "answer_comments": null, "answer_body": " This article has an excellent explanation as to how to go about various scenarios (where a commit has been done as well as the push OR just a commit, before the push):  http://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html  From the article, the easiest command I saw to revert a previous commit by its commit id , was:  git revert dd61ab32 ", "question_id": 927358}, "0.3789089419879019", 0], [{"answer_votes": "54", "answer_comments": null, "answer_body": " Usually, you want to undo a commit because you made a mistake and you want to fix it - essentially what the OP did when he asked the question. So really, you actually want to redo a commit.  Most of the answers here focus on the command line. While the command line is the best way to use Git when you're comfortable with it, its probably a bit alien to those coming from other version control systems to Git.  Here's how to do it using a GUI. If you have Git installed, you already have everything you need to follow these instructions.  NOTE: I will assume here that you realised the commit was wrong before you pushed it. If you don't know what pushing is, you probably haven't pushed, so carry on with the instructions. If you have pushed the faulty commit, the least risky way is just to follow up the faulty commit with a new commit that fixes things, the way you would do it in a version control system that does not allow you to rewrite history.  That said, here's how to fix your most recent fault commit using a GUI:   Navigate to your repository on the command line and start the gui with git gui  Choose \"Amend last commit\". You will see your last commit message, the files you staged and the files you didn't.  Now change things to how you want them to look and click Commit.  ", "question_id": 927358}, "0.3789089419879019", 0], [{"answer_votes": "38", "answer_comments": null, "answer_body": " A Typical Git Cycle  In speaking of Git-related commands in the previous answers, I would like to share my typical Git cycles with all readers which may helpful. Here is how I work with Git,   Cloning the first time from the remote server  git clone $project  Pulling from remote (when I don't have a pending local commit to push)  git pull  Adding a new local file1 into $to_be_committed_list (just imagine $to_be_committed_list means staged area)  git add $file1  Removing mistakenly added file2 from $to_be_committed_list (assume that file2 is added like step 3, which I didn't want)  git reset $file2  Committing file1 which is in $to_be_committed_list  git commit -m \"commit message description\"  Syncing local commit with remote repository before pushing  git pull --rebase  Resolving when conflict occurs prerequisite configure mergetool  git mergetool #resolve merging here, also can manually merge  Adding conflict-resolved files, let's say file1 :  git add $file1  Continuing my previous rebase command  git rebase --continue  Pushing ready and already synced last local commit  git push origin head:refs/for/$branch # branch = master, dev, etc.  ", "question_id": 927358}, "0.3789089419879019", 0], [{"answer_votes": "27", "answer_comments": null, "answer_body": " Suppose you made a wrong commit locally and pushed it to remote repo. You can undo the mess with these two commands.  First we need to correct our local repo by going back to the commit that we desire:  git reset --hard <previous good commit id where you want local repo to go>  Now we forcefully push this good commit on the remote repo by using this command:  git push --force-with-lease  The 'with-lease' version of the force option will prevent accidental deletion of new commits you do not know about (i.e. coming from another source since your last pull). ", "question_id": 927358}, "0.3789089419879019", 0], [{"answer_votes": "22", "answer_comments": null, "answer_body": " Remove a wrong commit that is already pushed to Github  git push origin +(previous good commit id):(branch name)  Please specify the last good commit id you would like to reset back in Github.  For example. If latest commit id is wrong then specify the previous commit id in above git command with branch name.  You can get previous commit id using git log ", "question_id": 927358}, "0.3789089419879019", 0], [{"answer_votes": "22", "answer_comments": null, "answer_body": " You can always do a git checkout (SHA code) of the previous version and then commit again with the new code. ", "question_id": 927358}, "0.3789089419879019", 0], [{"answer_votes": "9", "answer_comments": null, "answer_body": " For the sake of completeness, I will give the one glaringly obvious method that was overlooked by the previous answers.  Since the commit was not pushed, the remote was unchanged, so:   Delete the local repo.  Clone the remote repo.   This is sometimes necessary if your fancy git client goes bye-bye. Don't forget to re-commit your saved changes since the last push. ", "question_id": 927358}, "0.3789089419879019", 0]], [[{"answer_votes": "18320", "answer_comments": [" And if the commit was to the wrong branch, you may git checkout theRightBranch with all the changes stages. As I just had to do. \u2013 Frank Shearar  Oct 5 '10 at 15:44 ", " If you're working in DOS, instead of git reset --soft HEAD^ you'll need to use git reset --soft HEAD~1 .  The ^ is a continuation character in DOS so it won't work properly.  Also, --soft is the default, so you can omit it if you like and just say git reset HEAD~1 . \u2013 Ryan Lundy  Apr 13 '11 at 14:15 ", " Also, in zsh you have to quote ^, so git reset --soft 'HEAD^' ... at least I did \u2013 jberryman  Oct 27 '11 at 18:24 ", " (Correction to what I wrote above; --mixed is the default. --mixed means to keep the changed files, but not keep them in the index. --soft would keep the changed files and keep them in the index as they were just before the changed commit.  Sorry for the confusion.) \u2013 Ryan Lundy  Nov 17 '11 at 2:40 ", " zsh users might get: zsh: no matches found: HEAD^ - you need to escape ^ i.e. git reset --soft HEAD\\^ \u2013 tnajdek  Feb 21 '13 at 17:47  "], "answer_body": " Undo a commit and redo  $ git commit -m \"Something terribly misguided\"              (1)\n$ git reset HEAD~                                           (2)\n<< edit files as necessary >>                               (3)\n$ git add ...                                               (4)\n$ git commit -c ORIG_HEAD                                   (5)   This is what you want to undo  This leaves your working tree (the state of your files on disk) unchanged but undoes the commit and leaves the changes you committed unstaged (so they'll appear as \"Changes not staged for commit\" in git status , and you'll need to add them again before committing). If you only want to add more changes to the previous commit, or change the commit message 1 , you could use git reset --soft HEAD~ instead, which is like git reset HEAD~ (where HEAD~ is the same as HEAD~1 ) but leaves your existing changes staged.  Make corrections to working tree files.  git add anything that you want to include in your new commit.  Commit the changes, reusing the old commit message. reset copied the old head to .git/ORIG_HEAD ; commit with -c ORIG_HEAD will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the -C option.    1 Note, however, that you don't need to reset to an earlier commit if you just made a mistake in your commit message . The easier option is to git reset (to upstage any changes you've made since) and then git commit --amend , which will open your default commit message editor pre-populated with the last commit message.  Beware however that if you have added any new changes to the index, using commit --amend will add them to your previous commit.  ---- Edit by Frank R. 2018-3-9  If pushed,  git push origin master --force ", "question_id": 927358}, "0.9181536268442869", 2], [{"answer_votes": "834", "answer_comments": [" \"--hard\" will get rid of the modified .java files in the working directory that he wanted to commit. \u2013 Esko Luontola  May 29 '09 at 18:26 ", " You can \"git stash save\" working copy changes, do a hard reset and then \"git stash pop\" to get them back, though I suppose a soft reset would be simpler. \u2013 Asad R.  Apr 15 '11 at 13:33 ", " git commit -a -m \"\" or git commit -am \"\" naturally! :] \u2013 trejder  Jun 21 '14 at 16:31 ", " Another 'shortcut' use of stash; if you want to unstage everything (undo git add), just git stash , then git stash pop \u2013 seanriordan08  Dec 8 '15 at 22:30 "], "answer_body": " git rm yourfiles/*.class\ngit commit -a -m \"deleted all class files in folder 'yourfiles'\"  or  git reset --hard HEAD~1  Warning: The above command will permanently remove the modifications to the .java files (and any other files) that you wanted to commit.  The hard reset to HEAD-1 will set your working copy to the state of the commit before your wrong commit. ", "question_id": 927358}, "0.5444118659943342", 1], [{"answer_votes": "338", "answer_comments": [" gitk --all $(git reflog | cut -c1-7)& may be helpful for finding the previous revision if you want to undo an '--amend' commit. \u2013 nobar  Oct 18 '14 at 23:38  ", " It should be noted that if you're attempting to remove secret information before pushing to a shared repository, doing a revert won't help you, because the information will still be in the history in the previous commit.  If you want to ensure the change is never visible to others you need to use git reset \u2013 Jherico  Sep 4 '15 at 4:52 ", " See also: stackoverflow.com/a/30598953 \u2013 nobar  Apr 5 '16 at 4:20 ", " I think 'private'/'public' would more correctly be 'local'/'remote'. \u2013 nobar  Mar 28 at 14:59 "], "answer_body": " How to fix the previous local commit  Use git-gui (or similar) to perform a git commit --amend . From the GUI you can add or remove individual files from the commit. You can also modify the commit message.  How to undo the previous local commit  Just reset your branch to the previous location (for example, using gitk or git rebase ). Then reapply your changes from a saved copy. After garbage collection in your local repository, it will be like the unwanted commit never happened. To do all of that in a single command, use git reset HEAD~1 .  Word of warning : Careless use of git reset is a good way to get your working copy into a confusing state. I recommend that Git novices avoid this if they can.  How to undo a public commit  Perform a reverse cherry pick ( git-revert ) to undo the changes.  If you haven't yet pulled other changes onto your branch, you can simply do...  git revert --no-edit HEAD  Then push your updated branch to the shared repository.  The commit history will show both commits, separately .   Advanced: Correction of private branch in public repository  This can be dangerous -- be sure you have a local copy of the branch to repush.  Also note: You don't want to do this if someone else may be working on the branch.  git push --delete (branch_name) ## remove public version of branch  Cleanup your branch locally then repush...  git push origin (branch_name)  In the normal case, you probably needn't worry about your private-branch commit history being pristine.  Just push a followup commit (see 'How to undo a public commit' above), and later, do a squash-merge to hide the history. ", "question_id": 927358}, "0.4546848681056872", 3], [{"answer_votes": "413", "answer_comments": null, "answer_body": " If you have Git Extras installed, you can run git undo to undo the latest commit. git undo 3 will undo the last 3 commits. ", "question_id": 927358}, "0.41063295863568783", 4], [{"answer_votes": "1590", "answer_comments": [" Does this work when I did a git commit --amend and what I really meant to do is a git commit ? \u2013 dbm  May 18 '11 at 13:07 ", " @dbm, if you accidentally amended, use git reset --soft <oldref> , where oldref is the commit ID before the amend. You can use git reflog to identify the old commit ID. This will undo the effects of the amend, but leave changes staged. Then just do git commit to commit as a regular commit. \u2013 bdonlan  May 18 '11 at 14:20 ", " @Dennis, git commit --amend turns the current tree (ie, staged changes) into a commit, overwriting current HEAD. After that point, they're not considered staged anymore because they're part of the commit (ie, git diff --cached is blank), but they're not \"removed\" or \"lost\". \u2013 bdonlan  Feb 1 '12 at 3:08 "], "answer_body": " Add/remove files to get things the way you want:  git rm classdir\ngit add sourcedir  Then amend the commit:  git commit --amend  The previous, erroneous commit will be edited to reflect the new index state - in other words, it'll be like you never made the mistake in the first place.  Note that you should only do this if you haven't pushed yet. If you have pushed, then you'll just have to commit a fix normally. ", "question_id": 927358}, "0.3789089419879019", 0]]], "gensim_similarity_tf_idf_code_result": [[{"answer_votes": "4", "answer_comments": null, "answer_body": " git reset --hard your_last_good_commit_hash_here\n\ngit push --force origin master ", "question_id": 927358}, "0.25903454"], [{"answer_votes": "79", "answer_comments": null, "answer_body": " This article has an excellent explanation as to how to go about various scenarios (where a commit has been done as well as the push OR just a commit, before the push):  http://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html  From the article, the easiest command I saw to revert a previous commit by its commit id , was:  git revert dd61ab32 ", "question_id": 927358}, "0.15917104"], [{"answer_votes": "338", "answer_comments": [" gitk --all $(git reflog | cut -c1-7)& may be helpful for finding the previous revision if you want to undo an '--amend' commit. \u2013 nobar  Oct 18 '14 at 23:38  ", " It should be noted that if you're attempting to remove secret information before pushing to a shared repository, doing a revert won't help you, because the information will still be in the history in the previous commit.  If you want to ensure the change is never visible to others you need to use git reset \u2013 Jherico  Sep 4 '15 at 4:52 ", " See also: stackoverflow.com/a/30598953 \u2013 nobar  Apr 5 '16 at 4:20 ", " I think 'private'/'public' would more correctly be 'local'/'remote'. \u2013 nobar  Mar 28 at 14:59 "], "answer_body": " How to fix the previous local commit  Use git-gui (or similar) to perform a git commit --amend . From the GUI you can add or remove individual files from the commit. You can also modify the commit message.  How to undo the previous local commit  Just reset your branch to the previous location (for example, using gitk or git rebase ). Then reapply your changes from a saved copy. After garbage collection in your local repository, it will be like the unwanted commit never happened. To do all of that in a single command, use git reset HEAD~1 .  Word of warning : Careless use of git reset is a good way to get your working copy into a confusing state. I recommend that Git novices avoid this if they can.  How to undo a public commit  Perform a reverse cherry pick ( git-revert ) to undo the changes.  If you haven't yet pulled other changes onto your branch, you can simply do...  git revert --no-edit HEAD  Then push your updated branch to the shared repository.  The commit history will show both commits, separately .   Advanced: Correction of private branch in public repository  This can be dangerous -- be sure you have a local copy of the branch to repush.  Also note: You don't want to do this if someone else may be working on the branch.  git push --delete (branch_name) ## remove public version of branch  Cleanup your branch locally then repush...  git push origin (branch_name)  In the normal case, you probably needn't worry about your private-branch commit history being pristine.  Just push a followup commit (see 'How to undo a public commit' above), and later, do a squash-merge to hide the history. ", "question_id": 927358}, "0.13953978"], [{"answer_votes": "281", "answer_comments": [" Should be marked as answer, because you can specify which SHA you want. \u2013 Belfield  Jul 28 '17 at 10:49 ", " What if you do not use \"<commit_id>\" and simply use \"git reset --hard\"? I typically just want to get rid of my latest updates that I have not committed yet and got back to the latest commit I made, and I always use \"git reset --hard\". \u2013 Jaime Montoya  Sep 27 '17 at 23:30 ", " @JaimeMontoya To undo latest changes you can use git reset --hard , but if you have to hard remove last \"n\" commits you specify a SHA \u2013 poorva  Sep 28 '17 at 13:10 ", " Really like -f . This is what other answers lack \u2013 FreeLightman  Mar 1 at 8:58 "], "answer_body": " If you want to permanently undo it and you have cloned some repository  The commit id can be seen by  git log  Then you can do -  git reset --hard <commit_id>\n\ngit push origin <branch_name> -f ", "question_id": 927358}, "0.13720241"], [{"answer_votes": "27", "answer_comments": null, "answer_body": " Suppose you made a wrong commit locally and pushed it to remote repo. You can undo the mess with these two commands.  First we need to correct our local repo by going back to the commit that we desire:  git reset --hard <previous good commit id where you want local repo to go>  Now we forcefully push this good commit on the remote repo by using this command:  git push --force-with-lease  The 'with-lease' version of the force option will prevent accidental deletion of new commits you do not know about (i.e. coming from another source since your last pull). ", "question_id": 927358}, "0.12948391"], [{"answer_votes": "106", "answer_comments": null, "answer_body": " There are two main scenarios  You haven't pushed the commit yet  If the problem was extra files you commited (and you don't want those on repository), you can remove them using git rm and then commiting with --amend  git rm <pathToFile>  You can also remove entire directories with -r , or even combine with other Bash commands  git rm -r <pathToDirectory>\ngit rm $(find -name '*.class')  After removing the files, you can commit, with --amend option  git commit --amend -C HEAD # the -C option is to use the same commit message  This will rewrite your recent local commit removing the extra files, so, these files will never be sent on push and also will be removed from your local .git repository by GC.  You already pushed the commit  You can apply the same solution of the other scenario and then doing git push with the -f option, but it is not recommended since it overwrites the remote history with a divergent change (it can mess your repository).  Instead, you have to do the commit without --amend (remember this about -amend`: That option rewrites the history on the last commit). ", "question_id": 927358}, "0.084637634"], [{"answer_votes": "9", "answer_comments": null, "answer_body": " For the sake of completeness, I will give the one glaringly obvious method that was overlooked by the previous answers.  Since the commit was not pushed, the remote was unchanged, so:   Delete the local repo.  Clone the remote repo.   This is sometimes necessary if your fancy git client goes bye-bye. Don't forget to re-commit your saved changes since the last push. ", "question_id": 927358}, "0.076436915"], [{"answer_votes": "22", "answer_comments": null, "answer_body": " Remove a wrong commit that is already pushed to Github  git push origin +(previous good commit id):(branch name)  Please specify the last good commit id you would like to reset back in Github.  For example. If latest commit id is wrong then specify the previous commit id in above git command with branch name.  You can get previous commit id using git log ", "question_id": 927358}, "0.07316664"], [{"answer_votes": "128", "answer_comments": null, "answer_body": " Another way:  Checkout the branch you want to revert, then reset your local working copy back to the commit that you want to be the latest one on the remote server (everything after it will go bye-bye). To do this, in SourceTree I right-clicked on the and selected \"Reset BRANCHNAME to this commit\".  Then navigate to your repository's local directory and run this command:  git -c diff.mnemonicprefix=false -c core.quotepath=false push -v -f --tags REPOSITORY_NAME BRANCHNAME:BRANCHNAME  This will erase all commits after the current one in your local repository but only for that one branch. ", "question_id": 927358}, "0.062998526"], [{"answer_votes": "38", "answer_comments": null, "answer_body": " A Typical Git Cycle  In speaking of Git-related commands in the previous answers, I would like to share my typical Git cycles with all readers which may helpful. Here is how I work with Git,   Cloning the first time from the remote server  git clone $project  Pulling from remote (when I don't have a pending local commit to push)  git pull  Adding a new local file1 into $to_be_committed_list (just imagine $to_be_committed_list means staged area)  git add $file1  Removing mistakenly added file2 from $to_be_committed_list (assume that file2 is added like step 3, which I didn't want)  git reset $file2  Committing file1 which is in $to_be_committed_list  git commit -m \"commit message description\"  Syncing local commit with remote repository before pushing  git pull --rebase  Resolving when conflict occurs prerequisite configure mergetool  git mergetool #resolve merging here, also can manually merge  Adding conflict-resolved files, let's say file1 :  git add $file1  Continuing my previous rebase command  git rebase --continue  Pushing ready and already synced last local commit  git push origin head:refs/for/$branch # branch = master, dev, etc.  ", "question_id": 927358}, "0.06191229"], [{"answer_votes": "36", "answer_comments": null, "answer_body": " VISUAL STUDIO USERS (2015, etc.)  If you cannot synchronise in Visual Studio as you are not allowed to push to a branch like \"development\" then as much as I tried, in Visual Studio NEITHER the REVERT NOR the RESET (hard or soft) would work.  Per the answer with TONS OF VOTES:  Use this at the command prompt of root of your project to nuke anything that will attempt to get pushed:  git reset --hard HEAD~1  Backup or zip your files just in case you don't wish to lose any work, etc... ", "question_id": 927358}, "0.061159305"], [{"answer_votes": "382", "answer_comments": [" Rewriting history on a shared repository is generally a very bad idea.  I assume you know what you're doing, I just hope future readers do too. \u2013 Brad Koch  Dec 7 '12 at 16:02  ", " Yes rollback is dangerous. Make sure that your working copy is in the desired state before you push. When pushing then the unwanted commits gets deleted permanently. \u2013 neoneye  Dec 8 '12 at 14:14 ", " \"Just like in the real world, if you want to rewrite history, you need a conspiracy: everybody has to be 'in' on the conspiracy (at least everybody who knows about the history, i.e. everybody who has ever pulled from the branch).\" Source: stackoverflow.com/a/2046748/334451 \u2013 Mikko Rantalainen  Aug 7 '13 at 10:10 ", " fantastic. This worked like a charm. There should be a git option for independently working developers - where one can use GitX, or a delete button next to a commit, and a confirmation - so this process is not so enigmatic :) \u2013 zero_cool  Jun 20 '14 at 15:31 "], "answer_body": " I wanted to undo the lastest 5 commits in our shared repository. I looked up the revision id that I wanted to rollback to. Then I typed in the following.  prompt> git reset --hard 5a7404742c85\nHEAD is now at 5a74047 Added one more page to catalogue\nprompt> git push origin master --force\nTotal 0 (delta 0), reused 0 (delta 0)\nremote: bb/acl: neoneye is allowed. accepted payload.\nTo git@bitbucket.org:thecompany/prometheus.git\n + 09a6480...5a74047 master -> master (forced update)\nprompt> ", "question_id": 927358}, "0.049988545"], [{"answer_votes": "18320", "answer_comments": [" And if the commit was to the wrong branch, you may git checkout theRightBranch with all the changes stages. As I just had to do. \u2013 Frank Shearar  Oct 5 '10 at 15:44 ", " If you're working in DOS, instead of git reset --soft HEAD^ you'll need to use git reset --soft HEAD~1 .  The ^ is a continuation character in DOS so it won't work properly.  Also, --soft is the default, so you can omit it if you like and just say git reset HEAD~1 . \u2013 Ryan Lundy  Apr 13 '11 at 14:15 ", " Also, in zsh you have to quote ^, so git reset --soft 'HEAD^' ... at least I did \u2013 jberryman  Oct 27 '11 at 18:24 ", " (Correction to what I wrote above; --mixed is the default. --mixed means to keep the changed files, but not keep them in the index. --soft would keep the changed files and keep them in the index as they were just before the changed commit.  Sorry for the confusion.) \u2013 Ryan Lundy  Nov 17 '11 at 2:40 ", " zsh users might get: zsh: no matches found: HEAD^ - you need to escape ^ i.e. git reset --soft HEAD\\^ \u2013 tnajdek  Feb 21 '13 at 17:47  "], "answer_body": " Undo a commit and redo  $ git commit -m \"Something terribly misguided\"              (1)\n$ git reset HEAD~                                           (2)\n<< edit files as necessary >>                               (3)\n$ git add ...                                               (4)\n$ git commit -c ORIG_HEAD                                   (5)   This is what you want to undo  This leaves your working tree (the state of your files on disk) unchanged but undoes the commit and leaves the changes you committed unstaged (so they'll appear as \"Changes not staged for commit\" in git status , and you'll need to add them again before committing). If you only want to add more changes to the previous commit, or change the commit message 1 , you could use git reset --soft HEAD~ instead, which is like git reset HEAD~ (where HEAD~ is the same as HEAD~1 ) but leaves your existing changes staged.  Make corrections to working tree files.  git add anything that you want to include in your new commit.  Commit the changes, reusing the old commit message. reset copied the old head to .git/ORIG_HEAD ; commit with -c ORIG_HEAD will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the -C option.    1 Note, however, that you don't need to reset to an earlier commit if you just made a mistake in your commit message . The easier option is to git reset (to upstage any changes you've made since) and then git commit --amend , which will open your default commit message editor pre-populated with the last commit message.  Beware however that if you have added any new changes to the index, using commit --amend will add them to your previous commit.  ---- Edit by Frank R. 2018-3-9  If pushed,  git push origin master --force ", "question_id": 927358}, "0.031974018"], [{"answer_votes": "9502", "answer_comments": [" @dma_k, yes.  Or you could do git reset --hard HEAD^^ once.  I use the tilde (~) notation because the caret (^) notation doesn't work in DOS. \u2013 Ryan Lundy  Feb 25 '12 at 15:02 ", " Another nice tip: You can re-attach the branch to the commit that you removed it from with git branch -f <branch> <commit-id> . Saves having to re-create commits! \u2013 naught101  Jun 22 '12 at 13:11  ", " For a git beginner, it isn't obvious what the difference is between the last two options (--soft and the one above it). Mentioning the index doesn't help, we don't really know what that means yet. @nessur's connection between soft and Ctrl-Z really helped! But I still don't quite understand the difference between the two options. \u2013 Stomp  Jun 26 '12 at 15:56 ", " It's much better to be told 'why' something works, than just to be told the answer. Kudos to this description - it helped be 'get' git. \u2013 Chris Nash  Jul 3 '12 at 19:13 ", " Missing a crucial point: If the said commit was previously 'pushed' to the remote, any 'undo' operation, no matter how simple, will cause enormous pain and suffering to the rest of the users who have this commit in their local copy, when they do a 'git pull' in the future.  So, if the commit was already 'pushed', do this instead:      git revert <bad-commit-sha1-id>     git push origin : \u2013 FractalSpace  Nov 8 '13 at 23:43  "], "answer_body": " Undoing a commit is a little scary if you don't know how it works.  But it's actually amazingly easy if you do understand.  Say you have this, where C is your HEAD and (F) is the state of your files.  (F)\nA-B-C\n    \u2191\n  master  You want to nuke commit C and never see it again .  You do this:  git reset --hard HEAD~1  The result is:  (F)\nA-B\n  \u2191\nmaster  Now B is the HEAD.  Because you used --hard , your files are reset to their state at commit B.  Ah, but suppose commit C wasn't a disaster, but just a bit off.  You want to undo the commit but keep your changes for a bit of editing before you do a better commit.  Starting again from here, with C as your HEAD:  (F)\nA-B-C\n    \u2191\n  master  You can do this, leaving off the --hard :  git reset HEAD~1  In this case the result is:  (F)\nA-B-C\n  \u2191\nmaster  In both cases, HEAD is just a pointer to the latest commit.  When you do a git reset HEAD~1 , you tell Git to move the HEAD pointer back one commit.  But (unless you use --hard ) you leave your files as they were.  So now git status shows the changes you had checked into C.  You haven't lost a thing!  For the lightest touch, you can even undo your commit but leave your files and your index :  git reset --soft HEAD~1  This not only leaves your files alone, it even leaves your index alone.  When you do git status , you'll see that the same files are in the index as before.  In fact, right after this command, you could do git commit and you'd be redoing the same commit you just had.  One more thing: Suppose you destroy a commit as in the first example, but then discover you needed it after all ?  Tough luck, right?  Nope, there's still a way to get it back.  Type git reflog and you'll see a list of (partial) commit shas that you've moved around in.  Find the commit you destroyed, and do this:  git checkout -b someNewBranchName shaYouDestroyed  You've now resurrected that commit.  Commits don't actually get destroyed in Git for some 90 days, so you can usually go back and rescue one you didn't mean to get rid of. ", "question_id": 927358}, "0.0"], [{"answer_votes": "1647", "answer_comments": [" I found this answer the clearest. git revert HEAD^ is not the previous, is the previous of the previous. I did : git revert HEAD and then push again and it worked :) \u2013 nacho4d  Jul 14 '11 at 8:32  ", " @riezebosch: your warning is in the wrong place. THIS answer doesn't mess up things, cause it correctly creates a new commit 102: \"restoring the file I removed on accident\" \u2013 rubo77  Jan 6 '14 at 8:37  ", " This was most helpful to me. I needed to know how to revert a public commit. Thanks! \u2013 FearlessFuture  Jan 25 at 22:25 "], "answer_body": " This took me a while to figure out, so maybe this will help someone...  There are two ways to \"undo\" your last commit, depending on whether or not you have already made your commit public (pushed to your remote repository):  How to undo a local commit  Let's say I committed locally, but now want to remove that commit.  git log\n    commit 101: bad commit    # latest commit, this would be called 'HEAD'\n    commit 100: good commit   # second to last commit, this is the one we want  To restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD :  git reset --soft HEAD^     # use --soft if you want to keep your changes\ngit reset --hard HEAD^     # use --hard if you don't care about keeping the changes you made  Now git log will show that our last commit has been removed.  How to undo a public commit  If you have already made your commits public, you will want to create a new commit which will \"revert\" the changes you made in your previous commit (current HEAD).  git revert HEAD  Your changes will now be reverted and ready for you to commit:  git commit -m 'restoring the file I removed by accident'\ngit log\n    commit 102: restoring the file I removed by accident\n    commit 101: removing a file we don't need\n    commit 100: adding a file that we need  For more info, check out Git Basics - Undoing Things ", "question_id": 927358}, "0.0"], [{"answer_votes": "1590", "answer_comments": [" Does this work when I did a git commit --amend and what I really meant to do is a git commit ? \u2013 dbm  May 18 '11 at 13:07 ", " @dbm, if you accidentally amended, use git reset --soft <oldref> , where oldref is the commit ID before the amend. You can use git reflog to identify the old commit ID. This will undo the effects of the amend, but leave changes staged. Then just do git commit to commit as a regular commit. \u2013 bdonlan  May 18 '11 at 14:20 ", " @Dennis, git commit --amend turns the current tree (ie, staged changes) into a commit, overwriting current HEAD. After that point, they're not considered staged anymore because they're part of the commit (ie, git diff --cached is blank), but they're not \"removed\" or \"lost\". \u2013 bdonlan  Feb 1 '12 at 3:08 "], "answer_body": " Add/remove files to get things the way you want:  git rm classdir\ngit add sourcedir  Then amend the commit:  git commit --amend  The previous, erroneous commit will be edited to reflect the new index state - in other words, it'll be like you never made the mistake in the first place.  Note that you should only do this if you haven't pushed yet. If you have pushed, then you'll just have to commit a fix normally. ", "question_id": 927358}, "0.0"], [{"answer_votes": "834", "answer_comments": [" \"--hard\" will get rid of the modified .java files in the working directory that he wanted to commit. \u2013 Esko Luontola  May 29 '09 at 18:26 ", " You can \"git stash save\" working copy changes, do a hard reset and then \"git stash pop\" to get them back, though I suppose a soft reset would be simpler. \u2013 Asad R.  Apr 15 '11 at 13:33 ", " git commit -a -m \"\" or git commit -am \"\" naturally! :] \u2013 trejder  Jun 21 '14 at 16:31 ", " Another 'shortcut' use of stash; if you want to unstage everything (undo git add), just git stash , then git stash pop \u2013 seanriordan08  Dec 8 '15 at 22:30 "], "answer_body": " git rm yourfiles/*.class\ngit commit -a -m \"deleted all class files in folder 'yourfiles'\"  or  git reset --hard HEAD~1  Warning: The above command will permanently remove the modifications to the .java files (and any other files) that you wanted to commit.  The hard reset to HEAD-1 will set your working copy to the state of the commit before your wrong commit. ", "question_id": 927358}, "0.0"], [{"answer_votes": "655", "answer_comments": null, "answer_body": " To change the last commit  Replace the files in the index:  git rm --cached *.class\ngit add *.java  Then, if it's a private branch, amend the commit:  git commit --amend  Or, if it's a shared branch, make a new commit:  git commit -m 'Replace .class files with .java files'   ( to change a previous commit , use the awesome interactive rebase )   ProTip\u2122: \u00a0 Add *.class to a gitignore to stop this happening again.   To revert a commit  Amending a commit is the ideal solution if you need to change the last commit, but a more general solution is reset .  You can reset git to any commit with:  git reset @~N  Where N is the number of commits before HEAD , and @~ resets to the previous commit.  So, instead of amending the commit, you could use:  git reset @~\ngit add *.java\ngit commit -m \"Add .java files\"  Check out git help reset , specifically the sections on --soft  --mixed and --hard , for a better understanding of what this does.  Reflog  If you mess up, you can always use the reflog to find dropped commits:  $ git reset @~\n$ git reflog\nc4f708b HEAD@{0}: reset: moving to @~\n2c52489 HEAD@{1}: commit: added some .class files\n$ git reset 2c52489\n... and you're back where you started  ", "question_id": 927358}, "0.0"], [{"answer_votes": "525", "answer_comments": [" If you committed to the wrong branch: once reverted, switch to the correct branch and cherry-pick the commit. \u2013 Kris  Jun 27 '12 at 11:02 ", " What does that mean, cherry pick the commit? In my case, I was on the wrong branch when I edited a file. I committed it then realized I was in the wrong branch. Using \"git reset --soft HEAD~1\" got me back to just before the commit, but now if I checkout the correct branch, how do I undo the changes to the file in wrong branch but instead make them (in the same named file) in the correct branch? \u2013 astronomerdave  Jan 13 '15 at 22:05 ", " I just utilized git revert commit-id worked like a charm.  Of course then you will need to push your changes. \u2013 Casey Robinson  Jan 25 '16 at 21:07  ", " I believe that would be git cherry-pick <<erroneous-commit-sha>> @astronomerdave. From, Mr. Almost-2-Years-Late-to-the-Party. \u2013 Tom Howard  Oct 20 '16 at 18:19 "], "answer_body": " Use git revert commit-id  To get the commit ID, just use git log ", "question_id": 927358}, "0.0"], [{"answer_votes": "418", "answer_comments": [" @SMR, In your example, all are pointing into current HEAD only. HEAD^ = HEAD^1. As well as HEAD^1 = HEAD~1.  When you use HEAD~2, there is a difference between ~ and ^ symbols. If you use ~2 means \u201cthe first parent of the first parent,\u201d or \u201cthe grandparent\u201d. \u2013 Madhan Ayyasamy  Dec 14 '15 at 15:34  ", " clear and easy to understand, save my night ! \u2013 Vladimir Ch  Mar 14 at 19:10 ", " Apparently, I accidentally downvoted this answer, and it's too late for me to un-downvote it. Apologies. \u2013 Matt  Apr 9 at 17:20 "], "answer_body": " If you are planning undoing a local commit entirely, whatever you changes you did on the commit, and if you don't worry anything about that, just do the following command.  git reset --hard HEAD^1  (This command will ignore your entire commit and your changes will be lost completely from your local working tree). If you want to undo your commit, but you want your changes in the staging area (before commit just like after git add ) then do the following command.  git reset --soft HEAD^1  Now your committed files comes into the staging area. Suppose if you want to unstage the files, because you need to edit some wrong conent, then do the following command  git reset HEAD  Now committed files come from the staged area into the unstaged area. Now files are ready to edit, so whatever you changes, you want go edit and added it and make a fresh/new commit.  More ", "question_id": 927358}, "0.0"], [{"answer_votes": "413", "answer_comments": null, "answer_body": " If you have Git Extras installed, you can run git undo to undo the latest commit. git undo 3 will undo the last 3 commits. ", "question_id": 927358}, "0.0"], [{"answer_votes": "367", "answer_comments": null, "answer_body": " I prefer to use git rebase -i for this job, because a nice list pops up where I can choose the commits to get rid of. It might not be as direct as some other answers here, but it just feels right .  Choose how many commits you want to list, then invoke like this (to enlist last three)  git rebase -i HEAD~3  Sample list  pick aa28ba7 Sanity check for RtmpSrv port\npick c26c541 RtmpSrv version option\npick 58d6909 Better URL decoding support  Then git will remove commits for any line that you remove. ", "question_id": 927358}, "0.0"], [{"answer_votes": "283", "answer_comments": [" I'm in the 2nd case, but when I do \"git revert HEAD\" it says \"error: Commit [ID] is a merge but no -m option was given.  fatal: revert failed\".  Any suggestions? \u2013 metaforge  Nov 12 '14 at 19:36 ", " Probably worth mentioning that instead of HEAD~1 you could use the actual hash as displayed by git log --stat or by git reflog - useful when you need to 'undo' more than one commit. \u2013 ccpizza  Dec 7 '14 at 0:38 "], "answer_body": " If you have committed junk but not pushed,  git reset --soft HEAD~1   HEAD~1 is a shorthand for the commit before head. Alternatively you can refer to the SHA-1 of the hash if you want to reset to. --soft option will delete the commit but it will leave all your changed files \"Changes to be committed\", as git status would put it.  If you want to get rid of any changes to tracked files in the working tree since the commit before head use \" --hard \" instead.   OR   If you already pushed and someone pulled which is usually my case, you can't use git reset . You can however do a git revert ,   git revert HEAD   This will create a new commit that reverses everything introduced by the accidental commit.  ", "question_id": 927358}, "0.0"], [{"answer_votes": "238", "answer_comments": null, "answer_body": " On SourceTree (GUI for GitHub), you may right-click the commit and do a 'Reverse Commit'. This should undo your changes.  On the terminal:  You may alternatively use:  git revert  Or:  git reset --soft HEAD^ # Use --soft if you want to keep your changes.\ngit reset --hard HEAD^ # Use --hard if you don't care about keeping your changes. ", "question_id": 927358}, "0.0"], [{"answer_votes": "224", "answer_comments": [" I needed to write git reset --soft \"HEAD^\" with double quotes, because I write it from Windows command prompt. \u2013 Ena  Apr 23 '14 at 9:13 ", " It should work without any quotes. \u2013 jkulak  Nov 10 '16 at 19:19 "], "answer_body": " A single command:  git reset --soft 'HEAD^'  It works great to undo the last local commit! ", "question_id": 927358}, "0.0"], [{"answer_votes": "191", "answer_comments": null, "answer_body": " How to undo the last Git commit?  To restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD.   If you don't want to keep your changes that you made:  git reset --hard HEAD^  If you want to keep your changes:  git reset --soft HEAD^   Now check your git log. It will show that our last commit has been removed. ", "question_id": 927358}, "0.0"], [{"answer_votes": "189", "answer_comments": null, "answer_body": " Just reset it doing the command below using git :  git reset --soft HEAD~1  Explain: what git reset does, it's basically reset to any commit you'd like to go back to, then if you combine it with --soft key, it will go back, but keep the  changes in your file(s), so you get back to the stage which the file was just added, HEAD is the head of the branch and if you combine with ~1 (in this case you also use HEAD^ ), it will go back only one commit which what you want...  I create the steps in the image below in more details for you, including all steps that may happens in real situations and committing the code:  ", "question_id": 927358}, "0.0"], [{"answer_votes": "158", "answer_comments": null, "answer_body": " Use reflog to find a correct state  git reflog   REFLOG BEFORE RESET  Select the correct reflog (f3cb6e2 in my case) and type  git reset --hard f3cb6e2  After that the repo HEAD will be reset to that HEADid  LOG AFTER RESET  Finally the reflog looks like the picture below   REFLOG FINAL ", "question_id": 927358}, "0.0"], [{"answer_votes": "145", "answer_comments": null, "answer_body": " \"Reset the working tree to the last commit\"  git reset --hard HEAD^  \"Clean unknown files from the working tree\"  git clean  see - Git Quick Reference  NOTE: This command will delete your previous commit, so use with caution! git reset --hard is safer \u2013 ", "question_id": 927358}, "0.0"], [{"answer_votes": "142", "answer_comments": null, "answer_body": " First run:  git reflog  It will show you all the possible actions you have performed on your repository, for example, commit, merge, pull, etc.  Then do:  git reset --hard ActionIdFromRefLog ", "question_id": 927358}, "0.0"], [{"answer_votes": "124", "answer_comments": null, "answer_body": " Undo last commit:  git reset --soft HEAD^ or git reset --soft HEAD~  This will undo the last commit.  Here --soft means reset into staging.  HEAD~ or HEAD^ means to move to commit before HEAD.   Replace last commit to new commit:  git commit --amend -m \"message\"  It will replace the last commit with the new commit. ", "question_id": 927358}, "0.0"], [{"answer_votes": "122", "answer_comments": null, "answer_body": " Type git log and find the last commit hash code and then enter:  git reset <the previous co> ", "question_id": 927358}, "0.0"], [{"answer_votes": "120", "answer_comments": null, "answer_body": " In my case I accidentally committed some files I did not want to. So I did the following and it worked:  git reset --soft HEAD^\ngit rm --cached [files you do not need]\ngit add [files you need]\ngit commit -c ORIG_HEAD  Verify the results with gitk or git log --stat ", "question_id": 927358}, "0.0"], [{"answer_votes": "105", "answer_comments": null, "answer_body": " Use SourceTree (graphical tool for Git) to see your commits and tree. You can manually reset it directly by right clicking it. ", "question_id": 927358}, "0.0"], [{"answer_votes": "92", "answer_comments": null, "answer_body": " Simple, run this in your command line:  git reset --soft HEAD~ ", "question_id": 927358}, "0.0"], [{"answer_votes": "85", "answer_comments": [" Maybe you could at a note/warning that his command will throw away the commit and the changes in the working directory without asking any further. \u2013 cr7pt0gr4ph7  Nov 24 '14 at 22:35  ", " If you happen to do this by accident, not all is lost, though. See stackoverflow.com/questions/10099258/\u2026 , stackoverflow.com/questions/15479501/\u2026 and stackoverflow.com/questions/7374069/undo-git-reset-hard/7376959 . \u2013 cr7pt0gr4ph7  Nov 24 '14 at 22:40 ", " Use --soft to keep your changes as uncommitted changes , --hard to nuke the commit completely and revert back by one. Remember to do such operations only on changes, that are not pushed yet. \u2013 Yunus Nedim Mehel  Mar 9 '15 at 9:11 ", " @Zaz: You are right; maybe I should have clarified that. Only files/changes that have been either added to index (/staged) or have been committed can possibly be recovered. Uncommitted, unstaged changes are , as you said, completely thrown away by git reset --hard . \u2013 cr7pt0gr4ph7  Sep 13 '16 at 21:17 ", " As a sidenote: Everytime a file is staged, git stores its contents in its object database. The stored contents are only removed when garbage collection is executed. It is therefore possible to recover the last staged version of a file that was not currently staged when git reset --hard was executed (see the posts linked above for more information). \u2013 cr7pt0gr4ph7  Sep 13 '16 at 21:22  "], "answer_body": " To reset to the previous revision, permanently deleting all uncommitted changes:  git reset --hard HEAD~1 ", "question_id": 927358}, "0.0"], [{"answer_votes": "73", "answer_comments": [" git reset --hard HEAD~1 is too dangerous ! This will not just 'cancel last commit', but will revert repo completely back to the previous commit. So you will LOOSE all changes committed in the last commit! \u2013 Arnis Juraga  Mar 21 '17 at 12:09  ", " You right, to undo this you can use git push -f <remote> HEAD@{1}:<branch> \u2013 Benny  Apr 24 '17 at 13:07 "], "answer_body": " There are many ways to do it:  Git command to undo the last commit/ previous commits:  Basic command to revert the commit in Git is:  $ git reset --hard <COMMIT -ID>  or  $ git reset --hard HEAD~<n>  COMMIT-ID : ID for the commit  n: is number of last commits you want to revert  You can get the commit id as shown below:  $ **git log --oneline**\n\nd81d3f1 function to subtract two numbers\n\nbe20eb8 function to add two numbers\n\nbedgfgg function to mulitply two numbers  where d81d3f1 and be20eb8 are commit id.  Now let's see some cases:  Suppose you want to revert the last commit 'd81d3f1'. Below are the ways:  $ git reset --hard d81d3f1  or  $ git reset --hard HEAD~1  Suppose you want to revert the commit 'be20eb8'. Below are the way:  $ git reset --hard be20eb8  For more detailed information you can refer and try out some other commands too for resetting head to a specified state:  $ git reset --help ", "question_id": 927358}, "0.0"], [{"answer_votes": "69", "answer_comments": [" After git reset --soft HEAD~1 , if you need to unstage files, use: git reset \u2013 MKatleast3  Feb 23 '17 at 0:32 "], "answer_body": " If you want remove files in the last commit, you can use this:  git reset --hard HEAD~1  And if need files in the last commit, you can use this:  git reset --soft HEAD~1 ", "question_id": 927358}, "0.0"], [{"answer_votes": "67", "answer_comments": null, "answer_body": " For a local commit  git reset --soft HEAD~1  or if you do not remember exactly in which commit it is, you might use  git rm --cached <file>  For a pushed commit  The proper way of removing files from the repository history is using git filter-branch . That is,  git filter-branch --index-filter 'git rm --cached <file>' HEAD  But I recomnend you use this command with care. Read more at git-filter-branch(1) Manual Page . ", "question_id": 927358}, "0.0"], [{"answer_votes": "54", "answer_comments": null, "answer_body": " Usually, you want to undo a commit because you made a mistake and you want to fix it - essentially what the OP did when he asked the question. So really, you actually want to redo a commit.  Most of the answers here focus on the command line. While the command line is the best way to use Git when you're comfortable with it, its probably a bit alien to those coming from other version control systems to Git.  Here's how to do it using a GUI. If you have Git installed, you already have everything you need to follow these instructions.  NOTE: I will assume here that you realised the commit was wrong before you pushed it. If you don't know what pushing is, you probably haven't pushed, so carry on with the instructions. If you have pushed the faulty commit, the least risky way is just to follow up the faulty commit with a new commit that fixes things, the way you would do it in a version control system that does not allow you to rewrite history.  That said, here's how to fix your most recent fault commit using a GUI:   Navigate to your repository on the command line and start the gui with git gui  Choose \"Amend last commit\". You will see your last commit message, the files you staged and the files you didn't.  Now change things to how you want them to look and click Commit.  ", "question_id": 927358}, "0.0"], [{"answer_votes": "53", "answer_comments": [" Or git reset @~ \u2013 Zaz  Aug 4 '16 at 8:36 "], "answer_body": " You can use:  git reset HEAD@{1}  This command will delete your wrong commit without a Git log. ", "question_id": 927358}, "0.0"], [{"answer_votes": "49", "answer_comments": [" The very useful description about differences --soft VS --hard  atlassian.com/git/tutorials/\u2026 \u2013 Eugen Konkov  Dec 15 '16 at 16:29 ", " One doesn't really lose the commits on a --hard reset as they will be available in the ref log for 30 days git reflog . \u2013 Todd  Sep 11 '17 at 14:10 "], "answer_body": " WHAT TO USE, reset --soft or reset --hard ?  I am just adding two cents for @Kyralessa's answer:  If you are unsure what to use go for --soft (I used this convention to remember it -- s oft for safe).  Why ?  If you choose --hard by mistake you will LOSE your changes as it wasn't before.\nIf you choose --soft by mistake you can achieve the same results of --hard by applying additional commands  git reset HEAD file.html\ngit checkout -- file.html  Full example  echo \"some changes...\" > file.html\ngit add file.html\ngit commit -m \"wrong commit\"\n\n# I need to reset\ngit reset --hard HEAD~1 (cancel changes)\n# OR\ngit reset --soft HEAD~1 # Back to staging\ngit reset HEAD file.html # back to working directory\ngit checkout -- file.html # cancel changes  Credits goes to @Kyralessa. ", "question_id": 927358}, "0.0"], [{"answer_votes": "46", "answer_comments": null, "answer_body": " If you are working with SourceTree , this will help you.  Right click on the commit then select \" Reset (current branch)/master to this commit \" and last select  \"Soft\" reset .  ", "question_id": 927358}, "0.0"], [{"answer_votes": "44", "answer_comments": null, "answer_body": " Just undo the last commit:  git reset --soft HEAD~  Or undo the time before last time commit:  git reset --soft HEAD~2  Or undo any previous commit:  git reset --soft <commitID>  (you can get the commitID using git reflog )  When you undo a previous commit, remember to clean the workplace with  git clean  More details can be found in the docs: git-reset ", "question_id": 927358}, "0.0"], [{"answer_votes": "42", "answer_comments": null, "answer_body": " Think we have code.txt file.\nWe make some changes on it and commit. We can undo this commit in three ways , but first you should know what is the staged file...\nAn staged file is a file that ready to commit and if you run git status this file will be shown with green color and if this is not staged for commit will be shown with red color:   It means if you commit your change, your changes on this file is not saved.\nYou can add this file in your stage with git add code.txt and then commit your change:   Undo last commit:   Now if we want just undo commit without any other changes, we can use  git reset --soft HEAD^    If we want undo commit and its changes ( THIS IS DANGEROUS, because your change will lost ), we can use  git reset --hard HEAD^   And if we want undo commit and remove changes from stage, we can use  git reset --mixed HEAD^ or in a short form git reset HEAD^   ", "question_id": 927358}, "0.0"], [{"answer_votes": "41", "answer_comments": [" Be extra careful when reverting merge commits. You may lose your commits. Read about what Linus says about that: kernel.org/pub/software/scm/git/docs/howto/\u2026 \u2013 Eugen Konkov  Dec 15 '16 at 16:25  "], "answer_body": " To undo your local commit you use git reset <file> . Also that tutorial is very helpful to show you how it works.  Alternatively, you can use git revert <commit> : reverting should be used when you want to add another commit that rolls back the changes (but keeps them in the project history). ", "question_id": 927358}, "0.0"], [{"answer_votes": "31", "answer_comments": null, "answer_body": " You need to do the easy and fast  git commit --amend  if it's a private branch or  git commit -m 'Replace .class files with .java files'  if it's a shared or public branch. ", "question_id": 927358}, "0.0"], [{"answer_votes": "31", "answer_comments": [" \"Working copy\"? Is this a Git concept? Isn't it an SVN concept? \u2013 Peter Mortensen  Jan 28 at 21:36 "], "answer_body": " Undo the Last Commit  There are tons of situations where you really want to undo that last commit into your code. E.g. because you'd like to restructure it extensively - or even discard it altogether!  In these cases, the \"reset\" command is your best friend:  $ git reset --soft HEAD~1  The above command (reset) will rewind your current HEAD branch to the specified revision. In our example above, we'd like to return to the one before the current revision - effectively making our last commit undone.  Note the --soft flag: this makes sure that the changes in undone revisions are preserved. After running the command, you'll find the changes as uncommitted local modifications in your working copy.  If you don't want to keep these changes, simply use the --hard flag. Be sure to only do this when you're sure you don't need these changes any more.  $ git reset --hard HEAD~1  ", "question_id": 927358}, "0.0"], [{"answer_votes": "30", "answer_comments": null, "answer_body": " I got the commit ID from bitbucket and then did:  git checkout commitID .  Example:  git checkout 7991072 .  And it reverted it back up to that working copy of that commit. ", "question_id": 927358}, "0.0"], [{"answer_votes": "26", "answer_comments": null, "answer_body": " In my case I committed and pushed to the wrong branch, so what I wanted was to have all my changes back so I can commit them to a new correct branch, so I did this:  On the same branch that you committed and pushed, if you type \"git status\" you wont't see anything new because you committed and pushed, now type:  git reset --soft HEAD~1  This will get all your changes(files) back in the stage area, now to get them back in the working directory(unstage) you just type:  git reset FILE  Where \"File\" is the file that you want to commit again. Now this FILE should be in the working directory(unstaged) with all the changes that you did. Now you can change to whatever branch that you want and commit the changes in that branch. Hope this helps other people that made the same mistake I did. Of course the initial branch that you committed is still there with all changes, but in my case that was ok, if it is not for you you can look for ways to revert that commit in that branch. ", "question_id": 927358}, "0.0"], [{"answer_votes": "25", "answer_comments": null, "answer_body": " Use this command  git checkout -b old-state 0d1d7fc32 ", "question_id": 927358}, "0.0"], [{"answer_votes": "25", "answer_comments": null, "answer_body": " You have several options to undo your last commit. \nHere are some of your options summarize into a single answer with code snippets  First of all you need to figure which are the \"wrong\" commits which you wish to discard. We will use git reflog to find it.   git reflog  You can always use the reflog as well.  git reflog will display any change which updated the HEAD and checking out the desired reflog entry will set the HEAD back to this commit.  Every time the HEAD is modified there will be a new entry in the reflog . The reflog is similar to unix history command and is kept locally on your machine.  git reflog\ngit checkout HEAD@{...}\n# or\ngit checkout <sha-1>  Using the checkout you can go back to any desired commit and you can create branch or any other options that git checkout will allow you to do.    git reset HEAD --hard <commit_id>  \"Move\" your head back to the desired commit. Git reset will checkout the desired commit content to your staging area and/or to your working directory based upon the value --hard/--soft/--mixed you choose to pick. --hard will update both stage area and working directory with the given  content and will \"detach\" any other commits beyond this point on your local branch.  If those commits are not part of any other branch they will become \"dangle\". \"dangle\" content means that there is a un-reachable content in your local repository which is not part of any other branch and can be removed or will be removed by the gc .  # This will destroy any local modifications.\n# Don't do it if you have uncommitted work you want to keep.\ngit reset --hard 0d1d7fc32\n\n# Alternatively, if there's work to keep:\ngit stash\ngit reset --hard 0d1d7fc32\ngit stash pop\n# This saves the modifications, then reapplies that patch after resetting.\n# You could get merge conflicts, if you've modified things which were\n# changed since the commit you reset to.   This schema illustrate which command does what. As you can see there reset && checkout modify the HEAD .  ", "question_id": 927358}, "0.0"], [{"answer_votes": "24", "answer_comments": null, "answer_body": " Use this command:  git checkout -b old-state number_commit ", "question_id": 927358}, "0.0"], [{"answer_votes": "22", "answer_comments": null, "answer_body": " You can always do a git checkout (SHA code) of the previous version and then commit again with the new code. ", "question_id": 927358}, "0.0"], [{"answer_votes": "21", "answer_comments": null, "answer_body": " In order to get rid of (all the changes in) last commit, last 2 commits and last n commits:  git reset --hard HEAD~1\ngit reset --hard HEAD~2\n...\ngit reset --hard HEAD~n  And, to get rid of anything after a specific commit:  git reset --hard <commit sha>  e.g.,  git reset --hard 0d12345   PS: 1- Be careful, because of \"hard\" option, it deletes the local changes\n  in your repo as well and reverts to the previous mentioned commit. You\n  should run this if you are sure you messed up in your last commit(s)\n  and would like to go back in time.  2- Usually 7 letters of \"commit sha\" is enough, but in bigger\n  projects, you may need up to 12 letters to guarantee be unique. You\n  also can mention the whole 40 letters sha.  3- The above commands work in Github for Windows as well.  ", "question_id": 927358}, "0.0"], [{"answer_votes": "21", "answer_comments": null, "answer_body": " Use:  git reset HEAD~1 --soft  Make changes, add, and commit the changes. ", "question_id": 927358}, "0.0"], [{"answer_votes": "18", "answer_comments": null, "answer_body": " You just have to use a single command:  git reset --soft 'HEAD^'  It works to undo the last local commit to your Git repository. ", "question_id": 927358}, "0.0"], [{"answer_votes": "17", "answer_comments": null, "answer_body": " Reference: How to undo last commit in Git?  If you have Git Extensions installed you can easily undo/revert any commit (you can download git extensions from here ).  Open Git Extensions, right click on the commit you want to revert then select \"Revert commit\".   A popup will be opened (see the screenshot below)   Select \"Automatically create a commit\" if you want to directly commit the reverted changes or if you want to manually commit the reverted changes keep the box un-selected and click on \"Revert this commit\" button. ", "question_id": 927358}, "0.0"], [{"answer_votes": "15", "answer_comments": null, "answer_body": " Just use git reset --hard <last good SHA> to reset your changes and give new commit. You can also use git checkout -- <bad filename> . ", "question_id": 927358}, "0.0"], [{"answer_votes": "14", "answer_comments": null, "answer_body": " You can undo your git commits in two ways:-\nFirst is you can use git revert, if you want to keep your commit history.  git revert HEAD~3\ngit revert <hashcode of commit>  Second is you can use git reset, which would delete all your commit history and bring your head to commit where you want it.  git reset <hashcode of commit>\ngit reset HEAD~3  You can also use --hard keyword if any of it start behaving otherwise. But , I would recommend until it's extremely necessary. ", "question_id": 927358}, "0.0"], [{"answer_votes": "10", "answer_comments": null, "answer_body": " In IntelliJ IDEA you can just open Git Repository Log by pressing Alt + 9 , then right mouse button click at some tag from commits list and select: \"Reset Current Branch to Here...\" ", "question_id": 927358}, "0.0"], [{"answer_votes": "10", "answer_comments": null, "answer_body": " Undo last commit:  git reset --soft HEAD^ or git reset --soft HEAD~  This will undo the last commit.  Here --soft means reset into staging.  HEAD~ or HEAD^ means to move to commit before HEAD.  Replace last commit to new commit:  git commit --amend -m \"message\"  It will replace the last commit with the new commit. ", "question_id": 927358}, "0.0"], [{"answer_votes": "9", "answer_comments": null, "answer_body": "  Assuming you're working in Visual Studio, if you go in to you branch history and look at all of your commits, simply select the event prior to the commit you want to undo, right-click it, and select Revert .  Easy as that. ", "question_id": 927358}, "0.0"], [{"answer_votes": "9", "answer_comments": null, "answer_body": " I have found this site which describes how to undo things that you have committed into the repository.  Some commands:  git commit --amend        # Change last commit\ngit reset HEAD~ --soft    # Undo last commit ", "question_id": 927358}, "0.0"], [{"answer_votes": "8", "answer_comments": null, "answer_body": " Find the last commit hash code by seeing the log by :  git log  Then  git reset <the previous co> ", "question_id": 927358}, "0.0"], [{"answer_votes": "8", "answer_comments": null, "answer_body": " HEAD:  Before reset commit we should know about HEAD... HEAD is nothing but your current state in your working directory.. it is represented by commit number...  git commmit:  Each changes assigned under commit which is represented by unique tag.. Commits can't be deleted. so if you want your last commit you can simply dive into it using git reset  you can dive into last commit using 2 method,  Method 1: ( if you dont know commit number but want to move onto very first)  git reset HEAD~1  #it will move your head to last commit  Method 2: ( if you know commit you simply reset onto your known commit)  git reset 0xab3 # commit number  Note: if you want to know recent commit try this, git log -p -1   here is the graphical representation,  ", "question_id": 927358}, "0.0"], [{"answer_votes": "8", "answer_comments": null, "answer_body": " Here is site: Oh shit, git! .  Here are many recipes how to undo things in git. Some of them:   Oh shit, I need to change the message on my last commit!   git commit --amend\n# follow prompts to change the commit message   Oh shit, I accidentally committed something to master that should have been on a brand new branch!   # create a new branch from the current state of master\ngit branch some-new-branch-name\n# remove the commit from the master branch\ngit reset HEAD~ --hard\ngit checkout some-new-branch-name\n# your commit lives in this branch now :) ", "question_id": 927358}, "0.0"], [{"answer_votes": "4", "answer_comments": null, "answer_body": " You can undo your commits from the local repository, please follow the below scenario.  In below image I checkout test branch (using Git command git checkout -b test ) as a local and check status (using Git command git status ) of local branch there is nothing to commit.   In the next image image you can see here I made few changes in Filter1.txt and added that file to stage area than commit my changes with some message (using Git command git commit -m \"Doing commit to test revert back\" ).  \"-m is for commit message\"   In the next image you can see your commits log whatever you have made commits (Using Git command git log ).   So in above image you can see commit id with each commit and with your commit message now whatever commit you want to revert back or undo copy that commit id and hit below Git command. git revert {\"paste your commit id\"} . Example:  git revert 9ca304ed12b991f8251496b4ea452857b34353e7   I have reverted back my last commit. Now if you check your Git status. You can see the modified file which is Filter1.txt and yet to commit.  ", "question_id": 927358}, "0.0"], [{"answer_votes": "0", "answer_comments": null, "answer_body": " Try this, hard reset to previous commit where those files were not added, then:  git reset --hard <commit_hash>  Make sure you have a backup of your changes just in case, as it's a hard reset, which means they'll be lost (unless you stashed earlier) ", "question_id": 927358}, "0.0"]], "gensim_similarity_tf_idf_body_result": [[{"answer_votes": "338", "answer_comments": [" gitk --all $(git reflog | cut -c1-7)& may be helpful for finding the previous revision if you want to undo an '--amend' commit. \u2013 nobar  Oct 18 '14 at 23:38  ", " It should be noted that if you're attempting to remove secret information before pushing to a shared repository, doing a revert won't help you, because the information will still be in the history in the previous commit.  If you want to ensure the change is never visible to others you need to use git reset \u2013 Jherico  Sep 4 '15 at 4:52 ", " See also: stackoverflow.com/a/30598953 \u2013 nobar  Apr 5 '16 at 4:20 ", " I think 'private'/'public' would more correctly be 'local'/'remote'. \u2013 nobar  Mar 28 at 14:59 "], "answer_body": " How to fix the previous local commit  Use git-gui (or similar) to perform a git commit --amend . From the GUI you can add or remove individual files from the commit. You can also modify the commit message.  How to undo the previous local commit  Just reset your branch to the previous location (for example, using gitk or git rebase ). Then reapply your changes from a saved copy. After garbage collection in your local repository, it will be like the unwanted commit never happened. To do all of that in a single command, use git reset HEAD~1 .  Word of warning : Careless use of git reset is a good way to get your working copy into a confusing state. I recommend that Git novices avoid this if they can.  How to undo a public commit  Perform a reverse cherry pick ( git-revert ) to undo the changes.  If you haven't yet pulled other changes onto your branch, you can simply do...  git revert --no-edit HEAD  Then push your updated branch to the shared repository.  The commit history will show both commits, separately .   Advanced: Correction of private branch in public repository  This can be dangerous -- be sure you have a local copy of the branch to repush.  Also note: You don't want to do this if someone else may be working on the branch.  git push --delete (branch_name) ## remove public version of branch  Cleanup your branch locally then repush...  git push origin (branch_name)  In the normal case, you probably needn't worry about your private-branch commit history being pristine.  Just push a followup commit (see 'How to undo a public commit' above), and later, do a squash-merge to hide the history. ", "question_id": 927358}, "0.17858486"], [{"answer_votes": "120", "answer_comments": null, "answer_body": " In my case I accidentally committed some files I did not want to. So I did the following and it worked:  git reset --soft HEAD^\ngit rm --cached [files you do not need]\ngit add [files you need]\ngit commit -c ORIG_HEAD  Verify the results with gitk or git log --stat ", "question_id": 927358}, "0.16240922"], [{"answer_votes": "191", "answer_comments": null, "answer_body": " How to undo the last Git commit?  To restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD.   If you don't want to keep your changes that you made:  git reset --hard HEAD^  If you want to keep your changes:  git reset --soft HEAD^   Now check your git log. It will show that our last commit has been removed. ", "question_id": 927358}, "0.15847671"], [{"answer_votes": "4", "answer_comments": null, "answer_body": " You can undo your commits from the local repository, please follow the below scenario.  In below image I checkout test branch (using Git command git checkout -b test ) as a local and check status (using Git command git status ) of local branch there is nothing to commit.   In the next image image you can see here I made few changes in Filter1.txt and added that file to stage area than commit my changes with some message (using Git command git commit -m \"Doing commit to test revert back\" ).  \"-m is for commit message\"   In the next image you can see your commits log whatever you have made commits (Using Git command git log ).   So in above image you can see commit id with each commit and with your commit message now whatever commit you want to revert back or undo copy that commit id and hit below Git command. git revert {\"paste your commit id\"} . Example:  git revert 9ca304ed12b991f8251496b4ea452857b34353e7   I have reverted back my last commit. Now if you check your Git status. You can see the modified file which is Filter1.txt and yet to commit.  ", "question_id": 927358}, "0.14888045"], [{"answer_votes": "106", "answer_comments": null, "answer_body": " There are two main scenarios  You haven't pushed the commit yet  If the problem was extra files you commited (and you don't want those on repository), you can remove them using git rm and then commiting with --amend  git rm <pathToFile>  You can also remove entire directories with -r , or even combine with other Bash commands  git rm -r <pathToDirectory>\ngit rm $(find -name '*.class')  After removing the files, you can commit, with --amend option  git commit --amend -C HEAD # the -C option is to use the same commit message  This will rewrite your recent local commit removing the extra files, so, these files will never be sent on push and also will be removed from your local .git repository by GC.  You already pushed the commit  You can apply the same solution of the other scenario and then doing git push with the -f option, but it is not recommended since it overwrites the remote history with a divergent change (it can mess your repository).  Instead, you have to do the commit without --amend (remember this about -amend`: That option rewrites the history on the last commit). ", "question_id": 927358}, "0.1356486"], [{"answer_votes": "128", "answer_comments": null, "answer_body": " Another way:  Checkout the branch you want to revert, then reset your local working copy back to the commit that you want to be the latest one on the remote server (everything after it will go bye-bye). To do this, in SourceTree I right-clicked on the and selected \"Reset BRANCHNAME to this commit\".  Then navigate to your repository's local directory and run this command:  git -c diff.mnemonicprefix=false -c core.quotepath=false push -v -f --tags REPOSITORY_NAME BRANCHNAME:BRANCHNAME  This will erase all commits after the current one in your local repository but only for that one branch. ", "question_id": 927358}, "0.13382545"], [{"answer_votes": "1647", "answer_comments": [" I found this answer the clearest. git revert HEAD^ is not the previous, is the previous of the previous. I did : git revert HEAD and then push again and it worked :) \u2013 nacho4d  Jul 14 '11 at 8:32  ", " @riezebosch: your warning is in the wrong place. THIS answer doesn't mess up things, cause it correctly creates a new commit 102: \"restoring the file I removed on accident\" \u2013 rubo77  Jan 6 '14 at 8:37  ", " This was most helpful to me. I needed to know how to revert a public commit. Thanks! \u2013 FearlessFuture  Jan 25 at 22:25 "], "answer_body": " This took me a while to figure out, so maybe this will help someone...  There are two ways to \"undo\" your last commit, depending on whether or not you have already made your commit public (pushed to your remote repository):  How to undo a local commit  Let's say I committed locally, but now want to remove that commit.  git log\n    commit 101: bad commit    # latest commit, this would be called 'HEAD'\n    commit 100: good commit   # second to last commit, this is the one we want  To restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD :  git reset --soft HEAD^     # use --soft if you want to keep your changes\ngit reset --hard HEAD^     # use --hard if you don't care about keeping the changes you made  Now git log will show that our last commit has been removed.  How to undo a public commit  If you have already made your commits public, you will want to create a new commit which will \"revert\" the changes you made in your previous commit (current HEAD).  git revert HEAD  Your changes will now be reverted and ready for you to commit:  git commit -m 'restoring the file I removed by accident'\ngit log\n    commit 102: restoring the file I removed by accident\n    commit 101: removing a file we don't need\n    commit 100: adding a file that we need  For more info, check out Git Basics - Undoing Things ", "question_id": 927358}, "0.13157593"], [{"answer_votes": "18", "answer_comments": null, "answer_body": " You just have to use a single command:  git reset --soft 'HEAD^'  It works to undo the last local commit to your Git repository. ", "question_id": 927358}, "0.13119724"], [{"answer_votes": "17", "answer_comments": null, "answer_body": " Reference: How to undo last commit in Git?  If you have Git Extensions installed you can easily undo/revert any commit (you can download git extensions from here ).  Open Git Extensions, right click on the commit you want to revert then select \"Revert commit\".   A popup will be opened (see the screenshot below)   Select \"Automatically create a commit\" if you want to directly commit the reverted changes or if you want to manually commit the reverted changes keep the box un-selected and click on \"Revert this commit\" button. ", "question_id": 927358}, "0.12149183"], [{"answer_votes": "38", "answer_comments": null, "answer_body": " A Typical Git Cycle  In speaking of Git-related commands in the previous answers, I would like to share my typical Git cycles with all readers which may helpful. Here is how I work with Git,   Cloning the first time from the remote server  git clone $project  Pulling from remote (when I don't have a pending local commit to push)  git pull  Adding a new local file1 into $to_be_committed_list (just imagine $to_be_committed_list means staged area)  git add $file1  Removing mistakenly added file2 from $to_be_committed_list (assume that file2 is added like step 3, which I didn't want)  git reset $file2  Committing file1 which is in $to_be_committed_list  git commit -m \"commit message description\"  Syncing local commit with remote repository before pushing  git pull --rebase  Resolving when conflict occurs prerequisite configure mergetool  git mergetool #resolve merging here, also can manually merge  Adding conflict-resolved files, let's say file1 :  git add $file1  Continuing my previous rebase command  git rebase --continue  Pushing ready and already synced last local commit  git push origin head:refs/for/$branch # branch = master, dev, etc.  ", "question_id": 927358}, "0.12143813"], [{"answer_votes": "54", "answer_comments": null, "answer_body": " Usually, you want to undo a commit because you made a mistake and you want to fix it - essentially what the OP did when he asked the question. So really, you actually want to redo a commit.  Most of the answers here focus on the command line. While the command line is the best way to use Git when you're comfortable with it, its probably a bit alien to those coming from other version control systems to Git.  Here's how to do it using a GUI. If you have Git installed, you already have everything you need to follow these instructions.  NOTE: I will assume here that you realised the commit was wrong before you pushed it. If you don't know what pushing is, you probably haven't pushed, so carry on with the instructions. If you have pushed the faulty commit, the least risky way is just to follow up the faulty commit with a new commit that fixes things, the way you would do it in a version control system that does not allow you to rewrite history.  That said, here's how to fix your most recent fault commit using a GUI:   Navigate to your repository on the command line and start the gui with git gui  Choose \"Amend last commit\". You will see your last commit message, the files you staged and the files you didn't.  Now change things to how you want them to look and click Commit.  ", "question_id": 927358}, "0.11117831"], [{"answer_votes": "413", "answer_comments": null, "answer_body": " If you have Git Extras installed, you can run git undo to undo the latest commit. git undo 3 will undo the last 3 commits. ", "question_id": 927358}, "0.10309367"], [{"answer_votes": "26", "answer_comments": null, "answer_body": " In my case I committed and pushed to the wrong branch, so what I wanted was to have all my changes back so I can commit them to a new correct branch, so I did this:  On the same branch that you committed and pushed, if you type \"git status\" you wont't see anything new because you committed and pushed, now type:  git reset --soft HEAD~1  This will get all your changes(files) back in the stage area, now to get them back in the working directory(unstage) you just type:  git reset FILE  Where \"File\" is the file that you want to commit again. Now this FILE should be in the working directory(unstaged) with all the changes that you did. Now you can change to whatever branch that you want and commit the changes in that branch. Hope this helps other people that made the same mistake I did. Of course the initial branch that you committed is still there with all changes, but in my case that was ok, if it is not for you you can look for ways to revert that commit in that branch. ", "question_id": 927358}, "0.102470025"], [{"answer_votes": "9502", "answer_comments": [" @dma_k, yes.  Or you could do git reset --hard HEAD^^ once.  I use the tilde (~) notation because the caret (^) notation doesn't work in DOS. \u2013 Ryan Lundy  Feb 25 '12 at 15:02 ", " Another nice tip: You can re-attach the branch to the commit that you removed it from with git branch -f <branch> <commit-id> . Saves having to re-create commits! \u2013 naught101  Jun 22 '12 at 13:11  ", " For a git beginner, it isn't obvious what the difference is between the last two options (--soft and the one above it). Mentioning the index doesn't help, we don't really know what that means yet. @nessur's connection between soft and Ctrl-Z really helped! But I still don't quite understand the difference between the two options. \u2013 Stomp  Jun 26 '12 at 15:56 ", " It's much better to be told 'why' something works, than just to be told the answer. Kudos to this description - it helped be 'get' git. \u2013 Chris Nash  Jul 3 '12 at 19:13 ", " Missing a crucial point: If the said commit was previously 'pushed' to the remote, any 'undo' operation, no matter how simple, will cause enormous pain and suffering to the rest of the users who have this commit in their local copy, when they do a 'git pull' in the future.  So, if the commit was already 'pushed', do this instead:      git revert <bad-commit-sha1-id>     git push origin : \u2013 FractalSpace  Nov 8 '13 at 23:43  "], "answer_body": " Undoing a commit is a little scary if you don't know how it works.  But it's actually amazingly easy if you do understand.  Say you have this, where C is your HEAD and (F) is the state of your files.  (F)\nA-B-C\n    \u2191\n  master  You want to nuke commit C and never see it again .  You do this:  git reset --hard HEAD~1  The result is:  (F)\nA-B\n  \u2191\nmaster  Now B is the HEAD.  Because you used --hard , your files are reset to their state at commit B.  Ah, but suppose commit C wasn't a disaster, but just a bit off.  You want to undo the commit but keep your changes for a bit of editing before you do a better commit.  Starting again from here, with C as your HEAD:  (F)\nA-B-C\n    \u2191\n  master  You can do this, leaving off the --hard :  git reset HEAD~1  In this case the result is:  (F)\nA-B-C\n  \u2191\nmaster  In both cases, HEAD is just a pointer to the latest commit.  When you do a git reset HEAD~1 , you tell Git to move the HEAD pointer back one commit.  But (unless you use --hard ) you leave your files as they were.  So now git status shows the changes you had checked into C.  You haven't lost a thing!  For the lightest touch, you can even undo your commit but leave your files and your index :  git reset --soft HEAD~1  This not only leaves your files alone, it even leaves your index alone.  When you do git status , you'll see that the same files are in the index as before.  In fact, right after this command, you could do git commit and you'd be redoing the same commit you just had.  One more thing: Suppose you destroy a commit as in the first example, but then discover you needed it after all ?  Tough luck, right?  Nope, there's still a way to get it back.  Type git reflog and you'll see a list of (partial) commit shas that you've moved around in.  Find the commit you destroyed, and do this:  git checkout -b someNewBranchName shaYouDestroyed  You've now resurrected that commit.  Commits don't actually get destroyed in Git for some 90 days, so you can usually go back and rescue one you didn't mean to get rid of. ", "question_id": 927358}, "0.100834705"], [{"answer_votes": "8", "answer_comments": null, "answer_body": " Here is site: Oh shit, git! .  Here are many recipes how to undo things in git. Some of them:   Oh shit, I need to change the message on my last commit!   git commit --amend\n# follow prompts to change the commit message   Oh shit, I accidentally committed something to master that should have been on a brand new branch!   # create a new branch from the current state of master\ngit branch some-new-branch-name\n# remove the commit from the master branch\ngit reset HEAD~ --hard\ngit checkout some-new-branch-name\n# your commit lives in this branch now :) ", "question_id": 927358}, "0.09795049"], [{"answer_votes": "9", "answer_comments": null, "answer_body": " I have found this site which describes how to undo things that you have committed into the repository.  Some commands:  git commit --amend        # Change last commit\ngit reset HEAD~ --soft    # Undo last commit ", "question_id": 927358}, "0.093641534"], [{"answer_votes": "49", "answer_comments": [" The very useful description about differences --soft VS --hard  atlassian.com/git/tutorials/\u2026 \u2013 Eugen Konkov  Dec 15 '16 at 16:29 ", " One doesn't really lose the commits on a --hard reset as they will be available in the ref log for 30 days git reflog . \u2013 Todd  Sep 11 '17 at 14:10 "], "answer_body": " WHAT TO USE, reset --soft or reset --hard ?  I am just adding two cents for @Kyralessa's answer:  If you are unsure what to use go for --soft (I used this convention to remember it -- s oft for safe).  Why ?  If you choose --hard by mistake you will LOSE your changes as it wasn't before.\nIf you choose --soft by mistake you can achieve the same results of --hard by applying additional commands  git reset HEAD file.html\ngit checkout -- file.html  Full example  echo \"some changes...\" > file.html\ngit add file.html\ngit commit -m \"wrong commit\"\n\n# I need to reset\ngit reset --hard HEAD~1 (cancel changes)\n# OR\ngit reset --soft HEAD~1 # Back to staging\ngit reset HEAD file.html # back to working directory\ngit checkout -- file.html # cancel changes  Credits goes to @Kyralessa. ", "question_id": 927358}, "0.093365505"], [{"answer_votes": "1590", "answer_comments": [" Does this work when I did a git commit --amend and what I really meant to do is a git commit ? \u2013 dbm  May 18 '11 at 13:07 ", " @dbm, if you accidentally amended, use git reset --soft <oldref> , where oldref is the commit ID before the amend. You can use git reflog to identify the old commit ID. This will undo the effects of the amend, but leave changes staged. Then just do git commit to commit as a regular commit. \u2013 bdonlan  May 18 '11 at 14:20 ", " @Dennis, git commit --amend turns the current tree (ie, staged changes) into a commit, overwriting current HEAD. After that point, they're not considered staged anymore because they're part of the commit (ie, git diff --cached is blank), but they're not \"removed\" or \"lost\". \u2013 bdonlan  Feb 1 '12 at 3:08 "], "answer_body": " Add/remove files to get things the way you want:  git rm classdir\ngit add sourcedir  Then amend the commit:  git commit --amend  The previous, erroneous commit will be edited to reflect the new index state - in other words, it'll be like you never made the mistake in the first place.  Note that you should only do this if you haven't pushed yet. If you have pushed, then you'll just have to commit a fix normally. ", "question_id": 927358}, "0.09065158"], [{"answer_votes": "53", "answer_comments": [" Or git reset @~ \u2013 Zaz  Aug 4 '16 at 8:36 "], "answer_body": " You can use:  git reset HEAD@{1}  This command will delete your wrong commit without a Git log. ", "question_id": 927358}, "0.08943549"], [{"answer_votes": "418", "answer_comments": [" @SMR, In your example, all are pointing into current HEAD only. HEAD^ = HEAD^1. As well as HEAD^1 = HEAD~1.  When you use HEAD~2, there is a difference between ~ and ^ symbols. If you use ~2 means \u201cthe first parent of the first parent,\u201d or \u201cthe grandparent\u201d. \u2013 Madhan Ayyasamy  Dec 14 '15 at 15:34  ", " clear and easy to understand, save my night ! \u2013 Vladimir Ch  Mar 14 at 19:10 ", " Apparently, I accidentally downvoted this answer, and it's too late for me to un-downvote it. Apologies. \u2013 Matt  Apr 9 at 17:20 "], "answer_body": " If you are planning undoing a local commit entirely, whatever you changes you did on the commit, and if you don't worry anything about that, just do the following command.  git reset --hard HEAD^1  (This command will ignore your entire commit and your changes will be lost completely from your local working tree). If you want to undo your commit, but you want your changes in the staging area (before commit just like after git add ) then do the following command.  git reset --soft HEAD^1  Now your committed files comes into the staging area. Suppose if you want to unstage the files, because you need to edit some wrong conent, then do the following command  git reset HEAD  Now committed files come from the staged area into the unstaged area. Now files are ready to edit, so whatever you changes, you want go edit and added it and make a fresh/new commit.  More ", "question_id": 927358}, "0.08530721"], [{"answer_votes": "0", "answer_comments": null, "answer_body": " Try this, hard reset to previous commit where those files were not added, then:  git reset --hard <commit_hash>  Make sure you have a backup of your changes just in case, as it's a hard reset, which means they'll be lost (unless you stashed earlier) ", "question_id": 927358}, "0.082775906"], [{"answer_votes": "382", "answer_comments": [" Rewriting history on a shared repository is generally a very bad idea.  I assume you know what you're doing, I just hope future readers do too. \u2013 Brad Koch  Dec 7 '12 at 16:02  ", " Yes rollback is dangerous. Make sure that your working copy is in the desired state before you push. When pushing then the unwanted commits gets deleted permanently. \u2013 neoneye  Dec 8 '12 at 14:14 ", " \"Just like in the real world, if you want to rewrite history, you need a conspiracy: everybody has to be 'in' on the conspiracy (at least everybody who knows about the history, i.e. everybody who has ever pulled from the branch).\" Source: stackoverflow.com/a/2046748/334451 \u2013 Mikko Rantalainen  Aug 7 '13 at 10:10 ", " fantastic. This worked like a charm. There should be a git option for independently working developers - where one can use GitX, or a delete button next to a commit, and a confirmation - so this process is not so enigmatic :) \u2013 zero_cool  Jun 20 '14 at 15:31 "], "answer_body": " I wanted to undo the lastest 5 commits in our shared repository. I looked up the revision id that I wanted to rollback to. Then I typed in the following.  prompt> git reset --hard 5a7404742c85\nHEAD is now at 5a74047 Added one more page to catalogue\nprompt> git push origin master --force\nTotal 0 (delta 0), reused 0 (delta 0)\nremote: bb/acl: neoneye is allowed. accepted payload.\nTo git@bitbucket.org:thecompany/prometheus.git\n + 09a6480...5a74047 master -> master (forced update)\nprompt> ", "question_id": 927358}, "0.07683292"], [{"answer_votes": "69", "answer_comments": [" After git reset --soft HEAD~1 , if you need to unstage files, use: git reset \u2013 MKatleast3  Feb 23 '17 at 0:32 "], "answer_body": " If you want remove files in the last commit, you can use this:  git reset --hard HEAD~1  And if need files in the last commit, you can use this:  git reset --soft HEAD~1 ", "question_id": 927358}, "0.07392499"], [{"answer_votes": "25", "answer_comments": null, "answer_body": " You have several options to undo your last commit. \nHere are some of your options summarize into a single answer with code snippets  First of all you need to figure which are the \"wrong\" commits which you wish to discard. We will use git reflog to find it.   git reflog  You can always use the reflog as well.  git reflog will display any change which updated the HEAD and checking out the desired reflog entry will set the HEAD back to this commit.  Every time the HEAD is modified there will be a new entry in the reflog . The reflog is similar to unix history command and is kept locally on your machine.  git reflog\ngit checkout HEAD@{...}\n# or\ngit checkout <sha-1>  Using the checkout you can go back to any desired commit and you can create branch or any other options that git checkout will allow you to do.    git reset HEAD --hard <commit_id>  \"Move\" your head back to the desired commit. Git reset will checkout the desired commit content to your staging area and/or to your working directory based upon the value --hard/--soft/--mixed you choose to pick. --hard will update both stage area and working directory with the given  content and will \"detach\" any other commits beyond this point on your local branch.  If those commits are not part of any other branch they will become \"dangle\". \"dangle\" content means that there is a un-reachable content in your local repository which is not part of any other branch and can be removed or will be removed by the gc .  # This will destroy any local modifications.\n# Don't do it if you have uncommitted work you want to keep.\ngit reset --hard 0d1d7fc32\n\n# Alternatively, if there's work to keep:\ngit stash\ngit reset --hard 0d1d7fc32\ngit stash pop\n# This saves the modifications, then reapplies that patch after resetting.\n# You could get merge conflicts, if you've modified things which were\n# changed since the commit you reset to.   This schema illustrate which command does what. As you can see there reset && checkout modify the HEAD .  ", "question_id": 927358}, "0.06804587"], [{"answer_votes": "367", "answer_comments": null, "answer_body": " I prefer to use git rebase -i for this job, because a nice list pops up where I can choose the commits to get rid of. It might not be as direct as some other answers here, but it just feels right .  Choose how many commits you want to list, then invoke like this (to enlist last three)  git rebase -i HEAD~3  Sample list  pick aa28ba7 Sanity check for RtmpSrv port\npick c26c541 RtmpSrv version option\npick 58d6909 Better URL decoding support  Then git will remove commits for any line that you remove. ", "question_id": 927358}, "0.06595373"], [{"answer_votes": "283", "answer_comments": [" I'm in the 2nd case, but when I do \"git revert HEAD\" it says \"error: Commit [ID] is a merge but no -m option was given.  fatal: revert failed\".  Any suggestions? \u2013 metaforge  Nov 12 '14 at 19:36 ", " Probably worth mentioning that instead of HEAD~1 you could use the actual hash as displayed by git log --stat or by git reflog - useful when you need to 'undo' more than one commit. \u2013 ccpizza  Dec 7 '14 at 0:38 "], "answer_body": " If you have committed junk but not pushed,  git reset --soft HEAD~1   HEAD~1 is a shorthand for the commit before head. Alternatively you can refer to the SHA-1 of the hash if you want to reset to. --soft option will delete the commit but it will leave all your changed files \"Changes to be committed\", as git status would put it.  If you want to get rid of any changes to tracked files in the working tree since the commit before head use \" --hard \" instead.   OR   If you already pushed and someone pulled which is usually my case, you can't use git reset . You can however do a git revert ,   git revert HEAD   This will create a new commit that reverses everything introduced by the accidental commit.  ", "question_id": 927358}, "0.064351484"], [{"answer_votes": "67", "answer_comments": null, "answer_body": " For a local commit  git reset --soft HEAD~1  or if you do not remember exactly in which commit it is, you might use  git rm --cached <file>  For a pushed commit  The proper way of removing files from the repository history is using git filter-branch . That is,  git filter-branch --index-filter 'git rm --cached <file>' HEAD  But I recomnend you use this command with care. Read more at git-filter-branch(1) Manual Page . ", "question_id": 927358}, "0.06273867"], [{"answer_votes": "27", "answer_comments": null, "answer_body": " Suppose you made a wrong commit locally and pushed it to remote repo. You can undo the mess with these two commands.  First we need to correct our local repo by going back to the commit that we desire:  git reset --hard <previous good commit id where you want local repo to go>  Now we forcefully push this good commit on the remote repo by using this command:  git push --force-with-lease  The 'with-lease' version of the force option will prevent accidental deletion of new commits you do not know about (i.e. coming from another source since your last pull). ", "question_id": 927358}, "0.060949072"], [{"answer_votes": "834", "answer_comments": [" \"--hard\" will get rid of the modified .java files in the working directory that he wanted to commit. \u2013 Esko Luontola  May 29 '09 at 18:26 ", " You can \"git stash save\" working copy changes, do a hard reset and then \"git stash pop\" to get them back, though I suppose a soft reset would be simpler. \u2013 Asad R.  Apr 15 '11 at 13:33 ", " git commit -a -m \"\" or git commit -am \"\" naturally! :] \u2013 trejder  Jun 21 '14 at 16:31 ", " Another 'shortcut' use of stash; if you want to unstage everything (undo git add), just git stash , then git stash pop \u2013 seanriordan08  Dec 8 '15 at 22:30 "], "answer_body": " git rm yourfiles/*.class\ngit commit -a -m \"deleted all class files in folder 'yourfiles'\"  or  git reset --hard HEAD~1  Warning: The above command will permanently remove the modifications to the .java files (and any other files) that you wanted to commit.  The hard reset to HEAD-1 will set your working copy to the state of the commit before your wrong commit. ", "question_id": 927358}, "0.060709987"], [{"answer_votes": "30", "answer_comments": null, "answer_body": " I got the commit ID from bitbucket and then did:  git checkout commitID .  Example:  git checkout 7991072 .  And it reverted it back up to that working copy of that commit. ", "question_id": 927358}, "0.059524536"], [{"answer_votes": "281", "answer_comments": [" Should be marked as answer, because you can specify which SHA you want. \u2013 Belfield  Jul 28 '17 at 10:49 ", " What if you do not use \"<commit_id>\" and simply use \"git reset --hard\"? I typically just want to get rid of my latest updates that I have not committed yet and got back to the latest commit I made, and I always use \"git reset --hard\". \u2013 Jaime Montoya  Sep 27 '17 at 23:30 ", " @JaimeMontoya To undo latest changes you can use git reset --hard , but if you have to hard remove last \"n\" commits you specify a SHA \u2013 poorva  Sep 28 '17 at 13:10 ", " Really like -f . This is what other answers lack \u2013 FreeLightman  Mar 1 at 8:58 "], "answer_body": " If you want to permanently undo it and you have cloned some repository  The commit id can be seen by  git log  Then you can do -  git reset --hard <commit_id>\n\ngit push origin <branch_name> -f ", "question_id": 927358}, "0.052662134"], [{"answer_votes": "14", "answer_comments": null, "answer_body": " You can undo your git commits in two ways:-\nFirst is you can use git revert, if you want to keep your commit history.  git revert HEAD~3\ngit revert <hashcode of commit>  Second is you can use git reset, which would delete all your commit history and bring your head to commit where you want it.  git reset <hashcode of commit>\ngit reset HEAD~3  You can also use --hard keyword if any of it start behaving otherwise. But , I would recommend until it's extremely necessary. ", "question_id": 927358}, "0.052357037"], [{"answer_votes": "105", "answer_comments": null, "answer_body": " Use SourceTree (graphical tool for Git) to see your commits and tree. You can manually reset it directly by right clicking it. ", "question_id": 927358}, "0.049669478"], [{"answer_votes": "9", "answer_comments": null, "answer_body": " For the sake of completeness, I will give the one glaringly obvious method that was overlooked by the previous answers.  Since the commit was not pushed, the remote was unchanged, so:   Delete the local repo.  Clone the remote repo.   This is sometimes necessary if your fancy git client goes bye-bye. Don't forget to re-commit your saved changes since the last push. ", "question_id": 927358}, "0.04829509"], [{"answer_votes": "655", "answer_comments": null, "answer_body": " To change the last commit  Replace the files in the index:  git rm --cached *.class\ngit add *.java  Then, if it's a private branch, amend the commit:  git commit --amend  Or, if it's a shared branch, make a new commit:  git commit -m 'Replace .class files with .java files'   ( to change a previous commit , use the awesome interactive rebase )   ProTip\u2122: \u00a0 Add *.class to a gitignore to stop this happening again.   To revert a commit  Amending a commit is the ideal solution if you need to change the last commit, but a more general solution is reset .  You can reset git to any commit with:  git reset @~N  Where N is the number of commits before HEAD , and @~ resets to the previous commit.  So, instead of amending the commit, you could use:  git reset @~\ngit add *.java\ngit commit -m \"Add .java files\"  Check out git help reset , specifically the sections on --soft  --mixed and --hard , for a better understanding of what this does.  Reflog  If you mess up, you can always use the reflog to find dropped commits:  $ git reset @~\n$ git reflog\nc4f708b HEAD@{0}: reset: moving to @~\n2c52489 HEAD@{1}: commit: added some .class files\n$ git reset 2c52489\n... and you're back where you started  ", "question_id": 927358}, "0.04476807"], [{"answer_votes": "41", "answer_comments": [" Be extra careful when reverting merge commits. You may lose your commits. Read about what Linus says about that: kernel.org/pub/software/scm/git/docs/howto/\u2026 \u2013 Eugen Konkov  Dec 15 '16 at 16:25  "], "answer_body": " To undo your local commit you use git reset <file> . Also that tutorial is very helpful to show you how it works.  Alternatively, you can use git revert <commit> : reverting should be used when you want to add another commit that rolls back the changes (but keeps them in the project history). ", "question_id": 927358}, "0.04389416"], [{"answer_votes": "22", "answer_comments": null, "answer_body": " Remove a wrong commit that is already pushed to Github  git push origin +(previous good commit id):(branch name)  Please specify the last good commit id you would like to reset back in Github.  For example. If latest commit id is wrong then specify the previous commit id in above git command with branch name.  You can get previous commit id using git log ", "question_id": 927358}, "0.04385011"], [{"answer_votes": "145", "answer_comments": null, "answer_body": " \"Reset the working tree to the last commit\"  git reset --hard HEAD^  \"Clean unknown files from the working tree\"  git clean  see - Git Quick Reference  NOTE: This command will delete your previous commit, so use with caution! git reset --hard is safer \u2013 ", "question_id": 927358}, "0.04352199"], [{"answer_votes": "18320", "answer_comments": [" And if the commit was to the wrong branch, you may git checkout theRightBranch with all the changes stages. As I just had to do. \u2013 Frank Shearar  Oct 5 '10 at 15:44 ", " If you're working in DOS, instead of git reset --soft HEAD^ you'll need to use git reset --soft HEAD~1 .  The ^ is a continuation character in DOS so it won't work properly.  Also, --soft is the default, so you can omit it if you like and just say git reset HEAD~1 . \u2013 Ryan Lundy  Apr 13 '11 at 14:15 ", " Also, in zsh you have to quote ^, so git reset --soft 'HEAD^' ... at least I did \u2013 jberryman  Oct 27 '11 at 18:24 ", " (Correction to what I wrote above; --mixed is the default. --mixed means to keep the changed files, but not keep them in the index. --soft would keep the changed files and keep them in the index as they were just before the changed commit.  Sorry for the confusion.) \u2013 Ryan Lundy  Nov 17 '11 at 2:40 ", " zsh users might get: zsh: no matches found: HEAD^ - you need to escape ^ i.e. git reset --soft HEAD\\^ \u2013 tnajdek  Feb 21 '13 at 17:47  "], "answer_body": " Undo a commit and redo  $ git commit -m \"Something terribly misguided\"              (1)\n$ git reset HEAD~                                           (2)\n<< edit files as necessary >>                               (3)\n$ git add ...                                               (4)\n$ git commit -c ORIG_HEAD                                   (5)   This is what you want to undo  This leaves your working tree (the state of your files on disk) unchanged but undoes the commit and leaves the changes you committed unstaged (so they'll appear as \"Changes not staged for commit\" in git status , and you'll need to add them again before committing). If you only want to add more changes to the previous commit, or change the commit message 1 , you could use git reset --soft HEAD~ instead, which is like git reset HEAD~ (where HEAD~ is the same as HEAD~1 ) but leaves your existing changes staged.  Make corrections to working tree files.  git add anything that you want to include in your new commit.  Commit the changes, reusing the old commit message. reset copied the old head to .git/ORIG_HEAD ; commit with -c ORIG_HEAD will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the -C option.    1 Note, however, that you don't need to reset to an earlier commit if you just made a mistake in your commit message . The easier option is to git reset (to upstage any changes you've made since) and then git commit --amend , which will open your default commit message editor pre-populated with the last commit message.  Beware however that if you have added any new changes to the index, using commit --amend will add them to your previous commit.  ---- Edit by Frank R. 2018-3-9  If pushed,  git push origin master --force ", "question_id": 927358}, "0.04283705"], [{"answer_votes": "10", "answer_comments": null, "answer_body": " In IntelliJ IDEA you can just open Git Repository Log by pressing Alt + 9 , then right mouse button click at some tag from commits list and select: \"Reset Current Branch to Here...\" ", "question_id": 927358}, "0.042537224"], [{"answer_votes": "142", "answer_comments": null, "answer_body": " First run:  git reflog  It will show you all the possible actions you have performed on your repository, for example, commit, merge, pull, etc.  Then do:  git reset --hard ActionIdFromRefLog ", "question_id": 927358}, "0.040009066"], [{"answer_votes": "36", "answer_comments": null, "answer_body": " VISUAL STUDIO USERS (2015, etc.)  If you cannot synchronise in Visual Studio as you are not allowed to push to a branch like \"development\" then as much as I tried, in Visual Studio NEITHER the REVERT NOR the RESET (hard or soft) would work.  Per the answer with TONS OF VOTES:  Use this at the command prompt of root of your project to nuke anything that will attempt to get pushed:  git reset --hard HEAD~1  Backup or zip your files just in case you don't wish to lose any work, etc... ", "question_id": 927358}, "0.038280964"], [{"answer_votes": "189", "answer_comments": null, "answer_body": " Just reset it doing the command below using git :  git reset --soft HEAD~1  Explain: what git reset does, it's basically reset to any commit you'd like to go back to, then if you combine it with --soft key, it will go back, but keep the  changes in your file(s), so you get back to the stage which the file was just added, HEAD is the head of the branch and if you combine with ~1 (in this case you also use HEAD^ ), it will go back only one commit which what you want...  I create the steps in the image below in more details for you, including all steps that may happens in real situations and committing the code:  ", "question_id": 927358}, "0.036811147"], [{"answer_votes": "42", "answer_comments": null, "answer_body": " Think we have code.txt file.\nWe make some changes on it and commit. We can undo this commit in three ways , but first you should know what is the staged file...\nAn staged file is a file that ready to commit and if you run git status this file will be shown with green color and if this is not staged for commit will be shown with red color:   It means if you commit your change, your changes on this file is not saved.\nYou can add this file in your stage with git add code.txt and then commit your change:   Undo last commit:   Now if we want just undo commit without any other changes, we can use  git reset --soft HEAD^    If we want undo commit and its changes ( THIS IS DANGEROUS, because your change will lost ), we can use  git reset --hard HEAD^   And if we want undo commit and remove changes from stage, we can use  git reset --mixed HEAD^ or in a short form git reset HEAD^   ", "question_id": 927358}, "0.036761787"], [{"answer_votes": "224", "answer_comments": [" I needed to write git reset --soft \"HEAD^\" with double quotes, because I write it from Windows command prompt. \u2013 Ena  Apr 23 '14 at 9:13 ", " It should work without any quotes. \u2013 jkulak  Nov 10 '16 at 19:19 "], "answer_body": " A single command:  git reset --soft 'HEAD^'  It works great to undo the last local commit! ", "question_id": 927358}, "0.03660795"], [{"answer_votes": "21", "answer_comments": null, "answer_body": " In order to get rid of (all the changes in) last commit, last 2 commits and last n commits:  git reset --hard HEAD~1\ngit reset --hard HEAD~2\n...\ngit reset --hard HEAD~n  And, to get rid of anything after a specific commit:  git reset --hard <commit sha>  e.g.,  git reset --hard 0d12345   PS: 1- Be careful, because of \"hard\" option, it deletes the local changes\n  in your repo as well and reverts to the previous mentioned commit. You\n  should run this if you are sure you messed up in your last commit(s)\n  and would like to go back in time.  2- Usually 7 letters of \"commit sha\" is enough, but in bigger\n  projects, you may need up to 12 letters to guarantee be unique. You\n  also can mention the whole 40 letters sha.  3- The above commands work in Github for Windows as well.  ", "question_id": 927358}, "0.034997363"], [{"answer_votes": "31", "answer_comments": null, "answer_body": " You need to do the easy and fast  git commit --amend  if it's a private branch or  git commit -m 'Replace .class files with .java files'  if it's a shared or public branch. ", "question_id": 927358}, "0.03004224"], [{"answer_votes": "73", "answer_comments": [" git reset --hard HEAD~1 is too dangerous ! This will not just 'cancel last commit', but will revert repo completely back to the previous commit. So you will LOOSE all changes committed in the last commit! \u2013 Arnis Juraga  Mar 21 '17 at 12:09  ", " You right, to undo this you can use git push -f <remote> HEAD@{1}:<branch> \u2013 Benny  Apr 24 '17 at 13:07 "], "answer_body": " There are many ways to do it:  Git command to undo the last commit/ previous commits:  Basic command to revert the commit in Git is:  $ git reset --hard <COMMIT -ID>  or  $ git reset --hard HEAD~<n>  COMMIT-ID : ID for the commit  n: is number of last commits you want to revert  You can get the commit id as shown below:  $ **git log --oneline**\n\nd81d3f1 function to subtract two numbers\n\nbe20eb8 function to add two numbers\n\nbedgfgg function to mulitply two numbers  where d81d3f1 and be20eb8 are commit id.  Now let's see some cases:  Suppose you want to revert the last commit 'd81d3f1'. Below are the ways:  $ git reset --hard d81d3f1  or  $ git reset --hard HEAD~1  Suppose you want to revert the commit 'be20eb8'. Below are the way:  $ git reset --hard be20eb8  For more detailed information you can refer and try out some other commands too for resetting head to a specified state:  $ git reset --help ", "question_id": 927358}, "0.029816933"], [{"answer_votes": "9", "answer_comments": null, "answer_body": "  Assuming you're working in Visual Studio, if you go in to you branch history and look at all of your commits, simply select the event prior to the commit you want to undo, right-click it, and select Revert .  Easy as that. ", "question_id": 927358}, "0.02970982"], [{"answer_votes": "44", "answer_comments": null, "answer_body": " Just undo the last commit:  git reset --soft HEAD~  Or undo the time before last time commit:  git reset --soft HEAD~2  Or undo any previous commit:  git reset --soft <commitID>  (you can get the commitID using git reflog )  When you undo a previous commit, remember to clean the workplace with  git clean  More details can be found in the docs: git-reset ", "question_id": 927358}, "0.02881122"], [{"answer_votes": "79", "answer_comments": null, "answer_body": " This article has an excellent explanation as to how to go about various scenarios (where a commit has been done as well as the push OR just a commit, before the push):  http://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html  From the article, the easiest command I saw to revert a previous commit by its commit id , was:  git revert dd61ab32 ", "question_id": 927358}, "0.028408116"], [{"answer_votes": "31", "answer_comments": [" \"Working copy\"? Is this a Git concept? Isn't it an SVN concept? \u2013 Peter Mortensen  Jan 28 at 21:36 "], "answer_body": " Undo the Last Commit  There are tons of situations where you really want to undo that last commit into your code. E.g. because you'd like to restructure it extensively - or even discard it altogether!  In these cases, the \"reset\" command is your best friend:  $ git reset --soft HEAD~1  The above command (reset) will rewind your current HEAD branch to the specified revision. In our example above, we'd like to return to the one before the current revision - effectively making our last commit undone.  Note the --soft flag: this makes sure that the changes in undone revisions are preserved. After running the command, you'll find the changes as uncommitted local modifications in your working copy.  If you don't want to keep these changes, simply use the --hard flag. Be sure to only do this when you're sure you don't need these changes any more.  $ git reset --hard HEAD~1  ", "question_id": 927358}, "0.028165728"], [{"answer_votes": "8", "answer_comments": null, "answer_body": " HEAD:  Before reset commit we should know about HEAD... HEAD is nothing but your current state in your working directory.. it is represented by commit number...  git commmit:  Each changes assigned under commit which is represented by unique tag.. Commits can't be deleted. so if you want your last commit you can simply dive into it using git reset  you can dive into last commit using 2 method,  Method 1: ( if you dont know commit number but want to move onto very first)  git reset HEAD~1  #it will move your head to last commit  Method 2: ( if you know commit you simply reset onto your known commit)  git reset 0xab3 # commit number  Note: if you want to know recent commit try this, git log -p -1   here is the graphical representation,  ", "question_id": 927358}, "0.027110714"], [{"answer_votes": "238", "answer_comments": null, "answer_body": " On SourceTree (GUI for GitHub), you may right-click the commit and do a 'Reverse Commit'. This should undo your changes.  On the terminal:  You may alternatively use:  git revert  Or:  git reset --soft HEAD^ # Use --soft if you want to keep your changes.\ngit reset --hard HEAD^ # Use --hard if you don't care about keeping your changes. ", "question_id": 927358}, "0.01914144"], [{"answer_votes": "124", "answer_comments": null, "answer_body": " Undo last commit:  git reset --soft HEAD^ or git reset --soft HEAD~  This will undo the last commit.  Here --soft means reset into staging.  HEAD~ or HEAD^ means to move to commit before HEAD.   Replace last commit to new commit:  git commit --amend -m \"message\"  It will replace the last commit with the new commit. ", "question_id": 927358}, "0.014744551"], [{"answer_votes": "10", "answer_comments": null, "answer_body": " Undo last commit:  git reset --soft HEAD^ or git reset --soft HEAD~  This will undo the last commit.  Here --soft means reset into staging.  HEAD~ or HEAD^ means to move to commit before HEAD.  Replace last commit to new commit:  git commit --amend -m \"message\"  It will replace the last commit with the new commit. ", "question_id": 927358}, "0.014744551"], [{"answer_votes": "22", "answer_comments": null, "answer_body": " You can always do a git checkout (SHA code) of the previous version and then commit again with the new code. ", "question_id": 927358}, "0.011605498"], [{"answer_votes": "21", "answer_comments": null, "answer_body": " Use:  git reset HEAD~1 --soft  Make changes, add, and commit the changes. ", "question_id": 927358}, "0.010741262"], [{"answer_votes": "15", "answer_comments": null, "answer_body": " Just use git reset --hard <last good SHA> to reset your changes and give new commit. You can also use git checkout -- <bad filename> . ", "question_id": 927358}, "0.009655314"], [{"answer_votes": "46", "answer_comments": null, "answer_body": " If you are working with SourceTree , this will help you.  Right click on the commit then select \" Reset (current branch)/master to this commit \" and last select  \"Soft\" reset .  ", "question_id": 927358}, "0.0047134203"], [{"answer_votes": "85", "answer_comments": [" Maybe you could at a note/warning that his command will throw away the commit and the changes in the working directory without asking any further. \u2013 cr7pt0gr4ph7  Nov 24 '14 at 22:35  ", " If you happen to do this by accident, not all is lost, though. See stackoverflow.com/questions/10099258/\u2026 , stackoverflow.com/questions/15479501/\u2026 and stackoverflow.com/questions/7374069/undo-git-reset-hard/7376959 . \u2013 cr7pt0gr4ph7  Nov 24 '14 at 22:40 ", " Use --soft to keep your changes as uncommitted changes , --hard to nuke the commit completely and revert back by one. Remember to do such operations only on changes, that are not pushed yet. \u2013 Yunus Nedim Mehel  Mar 9 '15 at 9:11 ", " @Zaz: You are right; maybe I should have clarified that. Only files/changes that have been either added to index (/staged) or have been committed can possibly be recovered. Uncommitted, unstaged changes are , as you said, completely thrown away by git reset --hard . \u2013 cr7pt0gr4ph7  Sep 13 '16 at 21:17 ", " As a sidenote: Everytime a file is staged, git stores its contents in its object database. The stored contents are only removed when garbage collection is executed. It is therefore possible to recover the last staged version of a file that was not currently staged when git reset --hard was executed (see the posts linked above for more information). \u2013 cr7pt0gr4ph7  Sep 13 '16 at 21:22  "], "answer_body": " To reset to the previous revision, permanently deleting all uncommitted changes:  git reset --hard HEAD~1 ", "question_id": 927358}, "0.0044860216"], [{"answer_votes": "525", "answer_comments": [" If you committed to the wrong branch: once reverted, switch to the correct branch and cherry-pick the commit. \u2013 Kris  Jun 27 '12 at 11:02 ", " What does that mean, cherry pick the commit? In my case, I was on the wrong branch when I edited a file. I committed it then realized I was in the wrong branch. Using \"git reset --soft HEAD~1\" got me back to just before the commit, but now if I checkout the correct branch, how do I undo the changes to the file in wrong branch but instead make them (in the same named file) in the correct branch? \u2013 astronomerdave  Jan 13 '15 at 22:05 ", " I just utilized git revert commit-id worked like a charm.  Of course then you will need to push your changes. \u2013 Casey Robinson  Jan 25 '16 at 21:07  ", " I believe that would be git cherry-pick <<erroneous-commit-sha>> @astronomerdave. From, Mr. Almost-2-Years-Late-to-the-Party. \u2013 Tom Howard  Oct 20 '16 at 18:19 "], "answer_body": " Use git revert commit-id  To get the commit ID, just use git log ", "question_id": 927358}, "0.004232118"], [{"answer_votes": "8", "answer_comments": null, "answer_body": " Find the last commit hash code by seeing the log by :  git log  Then  git reset <the previous co> ", "question_id": 927358}, "0.0032222427"], [{"answer_votes": "92", "answer_comments": null, "answer_body": " Simple, run this in your command line:  git reset --soft HEAD~ ", "question_id": 927358}, "0.0025681113"], [{"answer_votes": "122", "answer_comments": null, "answer_body": " Type git log and find the last commit hash code and then enter:  git reset <the previous co> ", "question_id": 927358}, "0.0024458184"], [{"answer_votes": "158", "answer_comments": null, "answer_body": " Use reflog to find a correct state  git reflog   REFLOG BEFORE RESET  Select the correct reflog (f3cb6e2 in my case) and type  git reset --hard f3cb6e2  After that the repo HEAD will be reset to that HEADid  LOG AFTER RESET  Finally the reflog looks like the picture below   REFLOG FINAL ", "question_id": 927358}, "0.0023175362"], [{"answer_votes": "25", "answer_comments": null, "answer_body": " Use this command  git checkout -b old-state 0d1d7fc32 ", "question_id": 927358}, "0.0"], [{"answer_votes": "24", "answer_comments": null, "answer_body": " Use this command:  git checkout -b old-state number_commit ", "question_id": 927358}, "0.0"], [{"answer_votes": "4", "answer_comments": null, "answer_body": " git reset --hard your_last_good_commit_hash_here\n\ngit push --force origin master ", "question_id": 927358}, "0.0"]], "nltk_title_analyze_code_result": [[{"answer_votes": "338", "answer_comments": [" gitk --all $(git reflog | cut -c1-7)& may be helpful for finding the previous revision if you want to undo an '--amend' commit. \u2013 nobar  Oct 18 '14 at 23:38  ", " It should be noted that if you're attempting to remove secret information before pushing to a shared repository, doing a revert won't help you, because the information will still be in the history in the previous commit.  If you want to ensure the change is never visible to others you need to use git reset \u2013 Jherico  Sep 4 '15 at 4:52 ", " See also: stackoverflow.com/a/30598953 \u2013 nobar  Apr 5 '16 at 4:20 ", " I think 'private'/'public' would more correctly be 'local'/'remote'. \u2013 nobar  Mar 28 at 14:59 "], "answer_body": " How to fix the previous local commit  Use git-gui (or similar) to perform a git commit --amend . From the GUI you can add or remove individual files from the commit. You can also modify the commit message.  How to undo the previous local commit  Just reset your branch to the previous location (for example, using gitk or git rebase ). Then reapply your changes from a saved copy. After garbage collection in your local repository, it will be like the unwanted commit never happened. To do all of that in a single command, use git reset HEAD~1 .  Word of warning : Careless use of git reset is a good way to get your working copy into a confusing state. I recommend that Git novices avoid this if they can.  How to undo a public commit  Perform a reverse cherry pick ( git-revert ) to undo the changes.  If you haven't yet pulled other changes onto your branch, you can simply do...  git revert --no-edit HEAD  Then push your updated branch to the shared repository.  The commit history will show both commits, separately .   Advanced: Correction of private branch in public repository  This can be dangerous -- be sure you have a local copy of the branch to repush.  Also note: You don't want to do this if someone else may be working on the branch.  git push --delete (branch_name) ## remove public version of branch  Cleanup your branch locally then repush...  git push origin (branch_name)  In the normal case, you probably needn't worry about your private-branch commit history being pristine.  Just push a followup commit (see 'How to undo a public commit' above), and later, do a squash-merge to hide the history. ", "question_id": 927358}, 4], [{"answer_votes": "106", "answer_comments": null, "answer_body": " There are two main scenarios  You haven't pushed the commit yet  If the problem was extra files you commited (and you don't want those on repository), you can remove them using git rm and then commiting with --amend  git rm <pathToFile>  You can also remove entire directories with -r , or even combine with other Bash commands  git rm -r <pathToDirectory>\ngit rm $(find -name '*.class')  After removing the files, you can commit, with --amend option  git commit --amend -C HEAD # the -C option is to use the same commit message  This will rewrite your recent local commit removing the extra files, so, these files will never be sent on push and also will be removed from your local .git repository by GC.  You already pushed the commit  You can apply the same solution of the other scenario and then doing git push with the -f option, but it is not recommended since it overwrites the remote history with a divergent change (it can mess your repository).  Instead, you have to do the commit without --amend (remember this about -amend`: That option rewrites the history on the last commit). ", "question_id": 927358}, 2], [{"answer_votes": "79", "answer_comments": null, "answer_body": " This article has an excellent explanation as to how to go about various scenarios (where a commit has been done as well as the push OR just a commit, before the push):  http://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html  From the article, the easiest command I saw to revert a previous commit by its commit id , was:  git revert dd61ab32 ", "question_id": 927358}, 2], [{"answer_votes": "38", "answer_comments": null, "answer_body": " A Typical Git Cycle  In speaking of Git-related commands in the previous answers, I would like to share my typical Git cycles with all readers which may helpful. Here is how I work with Git,   Cloning the first time from the remote server  git clone $project  Pulling from remote (when I don't have a pending local commit to push)  git pull  Adding a new local file1 into $to_be_committed_list (just imagine $to_be_committed_list means staged area)  git add $file1  Removing mistakenly added file2 from $to_be_committed_list (assume that file2 is added like step 3, which I didn't want)  git reset $file2  Committing file1 which is in $to_be_committed_list  git commit -m \"commit message description\"  Syncing local commit with remote repository before pushing  git pull --rebase  Resolving when conflict occurs prerequisite configure mergetool  git mergetool #resolve merging here, also can manually merge  Adding conflict-resolved files, let's say file1 :  git add $file1  Continuing my previous rebase command  git rebase --continue  Pushing ready and already synced last local commit  git push origin head:refs/for/$branch # branch = master, dev, etc.  ", "question_id": 927358}, 2], [{"answer_votes": "27", "answer_comments": null, "answer_body": " Suppose you made a wrong commit locally and pushed it to remote repo. You can undo the mess with these two commands.  First we need to correct our local repo by going back to the commit that we desire:  git reset --hard <previous good commit id where you want local repo to go>  Now we forcefully push this good commit on the remote repo by using this command:  git push --force-with-lease  The 'with-lease' version of the force option will prevent accidental deletion of new commits you do not know about (i.e. coming from another source since your last pull). ", "question_id": 927358}, 2], [{"answer_votes": "18320", "answer_comments": [" And if the commit was to the wrong branch, you may git checkout theRightBranch with all the changes stages. As I just had to do. \u2013 Frank Shearar  Oct 5 '10 at 15:44 ", " If you're working in DOS, instead of git reset --soft HEAD^ you'll need to use git reset --soft HEAD~1 .  The ^ is a continuation character in DOS so it won't work properly.  Also, --soft is the default, so you can omit it if you like and just say git reset HEAD~1 . \u2013 Ryan Lundy  Apr 13 '11 at 14:15 ", " Also, in zsh you have to quote ^, so git reset --soft 'HEAD^' ... at least I did \u2013 jberryman  Oct 27 '11 at 18:24 ", " (Correction to what I wrote above; --mixed is the default. --mixed means to keep the changed files, but not keep them in the index. --soft would keep the changed files and keep them in the index as they were just before the changed commit.  Sorry for the confusion.) \u2013 Ryan Lundy  Nov 17 '11 at 2:40 ", " zsh users might get: zsh: no matches found: HEAD^ - you need to escape ^ i.e. git reset --soft HEAD\\^ \u2013 tnajdek  Feb 21 '13 at 17:47  "], "answer_body": " Undo a commit and redo  $ git commit -m \"Something terribly misguided\"              (1)\n$ git reset HEAD~                                           (2)\n<< edit files as necessary >>                               (3)\n$ git add ...                                               (4)\n$ git commit -c ORIG_HEAD                                   (5)   This is what you want to undo  This leaves your working tree (the state of your files on disk) unchanged but undoes the commit and leaves the changes you committed unstaged (so they'll appear as \"Changes not staged for commit\" in git status , and you'll need to add them again before committing). If you only want to add more changes to the previous commit, or change the commit message 1 , you could use git reset --soft HEAD~ instead, which is like git reset HEAD~ (where HEAD~ is the same as HEAD~1 ) but leaves your existing changes staged.  Make corrections to working tree files.  git add anything that you want to include in your new commit.  Commit the changes, reusing the old commit message. reset copied the old head to .git/ORIG_HEAD ; commit with -c ORIG_HEAD will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the -C option.    1 Note, however, that you don't need to reset to an earlier commit if you just made a mistake in your commit message . The easier option is to git reset (to upstage any changes you've made since) and then git commit --amend , which will open your default commit message editor pre-populated with the last commit message.  Beware however that if you have added any new changes to the index, using commit --amend will add them to your previous commit.  ---- Edit by Frank R. 2018-3-9  If pushed,  git push origin master --force ", "question_id": 927358}, 1], [{"answer_votes": "382", "answer_comments": [" Rewriting history on a shared repository is generally a very bad idea.  I assume you know what you're doing, I just hope future readers do too. \u2013 Brad Koch  Dec 7 '12 at 16:02  ", " Yes rollback is dangerous. Make sure that your working copy is in the desired state before you push. When pushing then the unwanted commits gets deleted permanently. \u2013 neoneye  Dec 8 '12 at 14:14 ", " \"Just like in the real world, if you want to rewrite history, you need a conspiracy: everybody has to be 'in' on the conspiracy (at least everybody who knows about the history, i.e. everybody who has ever pulled from the branch).\" Source: stackoverflow.com/a/2046748/334451 \u2013 Mikko Rantalainen  Aug 7 '13 at 10:10 ", " fantastic. This worked like a charm. There should be a git option for independently working developers - where one can use GitX, or a delete button next to a commit, and a confirmation - so this process is not so enigmatic :) \u2013 zero_cool  Jun 20 '14 at 15:31 "], "answer_body": " I wanted to undo the lastest 5 commits in our shared repository. I looked up the revision id that I wanted to rollback to. Then I typed in the following.  prompt> git reset --hard 5a7404742c85\nHEAD is now at 5a74047 Added one more page to catalogue\nprompt> git push origin master --force\nTotal 0 (delta 0), reused 0 (delta 0)\nremote: bb/acl: neoneye is allowed. accepted payload.\nTo git@bitbucket.org:thecompany/prometheus.git\n + 09a6480...5a74047 master -> master (forced update)\nprompt> ", "question_id": 927358}, 1], [{"answer_votes": "281", "answer_comments": [" Should be marked as answer, because you can specify which SHA you want. \u2013 Belfield  Jul 28 '17 at 10:49 ", " What if you do not use \"<commit_id>\" and simply use \"git reset --hard\"? I typically just want to get rid of my latest updates that I have not committed yet and got back to the latest commit I made, and I always use \"git reset --hard\". \u2013 Jaime Montoya  Sep 27 '17 at 23:30 ", " @JaimeMontoya To undo latest changes you can use git reset --hard , but if you have to hard remove last \"n\" commits you specify a SHA \u2013 poorva  Sep 28 '17 at 13:10 ", " Really like -f . This is what other answers lack \u2013 FreeLightman  Mar 1 at 8:58 "], "answer_body": " If you want to permanently undo it and you have cloned some repository  The commit id can be seen by  git log  Then you can do -  git reset --hard <commit_id>\n\ngit push origin <branch_name> -f ", "question_id": 927358}, 1], [{"answer_votes": "128", "answer_comments": null, "answer_body": " Another way:  Checkout the branch you want to revert, then reset your local working copy back to the commit that you want to be the latest one on the remote server (everything after it will go bye-bye). To do this, in SourceTree I right-clicked on the and selected \"Reset BRANCHNAME to this commit\".  Then navigate to your repository's local directory and run this command:  git -c diff.mnemonicprefix=false -c core.quotepath=false push -v -f --tags REPOSITORY_NAME BRANCHNAME:BRANCHNAME  This will erase all commits after the current one in your local repository but only for that one branch. ", "question_id": 927358}, 1], [{"answer_votes": "36", "answer_comments": null, "answer_body": " VISUAL STUDIO USERS (2015, etc.)  If you cannot synchronise in Visual Studio as you are not allowed to push to a branch like \"development\" then as much as I tried, in Visual Studio NEITHER the REVERT NOR the RESET (hard or soft) would work.  Per the answer with TONS OF VOTES:  Use this at the command prompt of root of your project to nuke anything that will attempt to get pushed:  git reset --hard HEAD~1  Backup or zip your files just in case you don't wish to lose any work, etc... ", "question_id": 927358}, 1], [{"answer_votes": "22", "answer_comments": null, "answer_body": " Remove a wrong commit that is already pushed to Github  git push origin +(previous good commit id):(branch name)  Please specify the last good commit id you would like to reset back in Github.  For example. If latest commit id is wrong then specify the previous commit id in above git command with branch name.  You can get previous commit id using git log ", "question_id": 927358}, 1], [{"answer_votes": "9", "answer_comments": null, "answer_body": " For the sake of completeness, I will give the one glaringly obvious method that was overlooked by the previous answers.  Since the commit was not pushed, the remote was unchanged, so:   Delete the local repo.  Clone the remote repo.   This is sometimes necessary if your fancy git client goes bye-bye. Don't forget to re-commit your saved changes since the last push. ", "question_id": 927358}, 1], [{"answer_votes": "4", "answer_comments": null, "answer_body": " git reset --hard your_last_good_commit_hash_here\n\ngit push --force origin master ", "question_id": 927358}, 1], [{"answer_votes": "9502", "answer_comments": [" @dma_k, yes.  Or you could do git reset --hard HEAD^^ once.  I use the tilde (~) notation because the caret (^) notation doesn't work in DOS. \u2013 Ryan Lundy  Feb 25 '12 at 15:02 ", " Another nice tip: You can re-attach the branch to the commit that you removed it from with git branch -f <branch> <commit-id> . Saves having to re-create commits! \u2013 naught101  Jun 22 '12 at 13:11  ", " For a git beginner, it isn't obvious what the difference is between the last two options (--soft and the one above it). Mentioning the index doesn't help, we don't really know what that means yet. @nessur's connection between soft and Ctrl-Z really helped! But I still don't quite understand the difference between the two options. \u2013 Stomp  Jun 26 '12 at 15:56 ", " It's much better to be told 'why' something works, than just to be told the answer. Kudos to this description - it helped be 'get' git. \u2013 Chris Nash  Jul 3 '12 at 19:13 ", " Missing a crucial point: If the said commit was previously 'pushed' to the remote, any 'undo' operation, no matter how simple, will cause enormous pain and suffering to the rest of the users who have this commit in their local copy, when they do a 'git pull' in the future.  So, if the commit was already 'pushed', do this instead:      git revert <bad-commit-sha1-id>     git push origin : \u2013 FractalSpace  Nov 8 '13 at 23:43  "], "answer_body": " Undoing a commit is a little scary if you don't know how it works.  But it's actually amazingly easy if you do understand.  Say you have this, where C is your HEAD and (F) is the state of your files.  (F)\nA-B-C\n    \u2191\n  master  You want to nuke commit C and never see it again .  You do this:  git reset --hard HEAD~1  The result is:  (F)\nA-B\n  \u2191\nmaster  Now B is the HEAD.  Because you used --hard , your files are reset to their state at commit B.  Ah, but suppose commit C wasn't a disaster, but just a bit off.  You want to undo the commit but keep your changes for a bit of editing before you do a better commit.  Starting again from here, with C as your HEAD:  (F)\nA-B-C\n    \u2191\n  master  You can do this, leaving off the --hard :  git reset HEAD~1  In this case the result is:  (F)\nA-B-C\n  \u2191\nmaster  In both cases, HEAD is just a pointer to the latest commit.  When you do a git reset HEAD~1 , you tell Git to move the HEAD pointer back one commit.  But (unless you use --hard ) you leave your files as they were.  So now git status shows the changes you had checked into C.  You haven't lost a thing!  For the lightest touch, you can even undo your commit but leave your files and your index :  git reset --soft HEAD~1  This not only leaves your files alone, it even leaves your index alone.  When you do git status , you'll see that the same files are in the index as before.  In fact, right after this command, you could do git commit and you'd be redoing the same commit you just had.  One more thing: Suppose you destroy a commit as in the first example, but then discover you needed it after all ?  Tough luck, right?  Nope, there's still a way to get it back.  Type git reflog and you'll see a list of (partial) commit shas that you've moved around in.  Find the commit you destroyed, and do this:  git checkout -b someNewBranchName shaYouDestroyed  You've now resurrected that commit.  Commits don't actually get destroyed in Git for some 90 days, so you can usually go back and rescue one you didn't mean to get rid of. ", "question_id": 927358}, 0], [{"answer_votes": "1647", "answer_comments": [" I found this answer the clearest. git revert HEAD^ is not the previous, is the previous of the previous. I did : git revert HEAD and then push again and it worked :) \u2013 nacho4d  Jul 14 '11 at 8:32  ", " @riezebosch: your warning is in the wrong place. THIS answer doesn't mess up things, cause it correctly creates a new commit 102: \"restoring the file I removed on accident\" \u2013 rubo77  Jan 6 '14 at 8:37  ", " This was most helpful to me. I needed to know how to revert a public commit. Thanks! \u2013 FearlessFuture  Jan 25 at 22:25 "], "answer_body": " This took me a while to figure out, so maybe this will help someone...  There are two ways to \"undo\" your last commit, depending on whether or not you have already made your commit public (pushed to your remote repository):  How to undo a local commit  Let's say I committed locally, but now want to remove that commit.  git log\n    commit 101: bad commit    # latest commit, this would be called 'HEAD'\n    commit 100: good commit   # second to last commit, this is the one we want  To restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD :  git reset --soft HEAD^     # use --soft if you want to keep your changes\ngit reset --hard HEAD^     # use --hard if you don't care about keeping the changes you made  Now git log will show that our last commit has been removed.  How to undo a public commit  If you have already made your commits public, you will want to create a new commit which will \"revert\" the changes you made in your previous commit (current HEAD).  git revert HEAD  Your changes will now be reverted and ready for you to commit:  git commit -m 'restoring the file I removed by accident'\ngit log\n    commit 102: restoring the file I removed by accident\n    commit 101: removing a file we don't need\n    commit 100: adding a file that we need  For more info, check out Git Basics - Undoing Things ", "question_id": 927358}, 0], [{"answer_votes": "1590", "answer_comments": [" Does this work when I did a git commit --amend and what I really meant to do is a git commit ? \u2013 dbm  May 18 '11 at 13:07 ", " @dbm, if you accidentally amended, use git reset --soft <oldref> , where oldref is the commit ID before the amend. You can use git reflog to identify the old commit ID. This will undo the effects of the amend, but leave changes staged. Then just do git commit to commit as a regular commit. \u2013 bdonlan  May 18 '11 at 14:20 ", " @Dennis, git commit --amend turns the current tree (ie, staged changes) into a commit, overwriting current HEAD. After that point, they're not considered staged anymore because they're part of the commit (ie, git diff --cached is blank), but they're not \"removed\" or \"lost\". \u2013 bdonlan  Feb 1 '12 at 3:08 "], "answer_body": " Add/remove files to get things the way you want:  git rm classdir\ngit add sourcedir  Then amend the commit:  git commit --amend  The previous, erroneous commit will be edited to reflect the new index state - in other words, it'll be like you never made the mistake in the first place.  Note that you should only do this if you haven't pushed yet. If you have pushed, then you'll just have to commit a fix normally. ", "question_id": 927358}, 0], [{"answer_votes": "834", "answer_comments": [" \"--hard\" will get rid of the modified .java files in the working directory that he wanted to commit. \u2013 Esko Luontola  May 29 '09 at 18:26 ", " You can \"git stash save\" working copy changes, do a hard reset and then \"git stash pop\" to get them back, though I suppose a soft reset would be simpler. \u2013 Asad R.  Apr 15 '11 at 13:33 ", " git commit -a -m \"\" or git commit -am \"\" naturally! :] \u2013 trejder  Jun 21 '14 at 16:31 ", " Another 'shortcut' use of stash; if you want to unstage everything (undo git add), just git stash , then git stash pop \u2013 seanriordan08  Dec 8 '15 at 22:30 "], "answer_body": " git rm yourfiles/*.class\ngit commit -a -m \"deleted all class files in folder 'yourfiles'\"  or  git reset --hard HEAD~1  Warning: The above command will permanently remove the modifications to the .java files (and any other files) that you wanted to commit.  The hard reset to HEAD-1 will set your working copy to the state of the commit before your wrong commit. ", "question_id": 927358}, 0], [{"answer_votes": "655", "answer_comments": null, "answer_body": " To change the last commit  Replace the files in the index:  git rm --cached *.class\ngit add *.java  Then, if it's a private branch, amend the commit:  git commit --amend  Or, if it's a shared branch, make a new commit:  git commit -m 'Replace .class files with .java files'   ( to change a previous commit , use the awesome interactive rebase )   ProTip\u2122: \u00a0 Add *.class to a gitignore to stop this happening again.   To revert a commit  Amending a commit is the ideal solution if you need to change the last commit, but a more general solution is reset .  You can reset git to any commit with:  git reset @~N  Where N is the number of commits before HEAD , and @~ resets to the previous commit.  So, instead of amending the commit, you could use:  git reset @~\ngit add *.java\ngit commit -m \"Add .java files\"  Check out git help reset , specifically the sections on --soft  --mixed and --hard , for a better understanding of what this does.  Reflog  If you mess up, you can always use the reflog to find dropped commits:  $ git reset @~\n$ git reflog\nc4f708b HEAD@{0}: reset: moving to @~\n2c52489 HEAD@{1}: commit: added some .class files\n$ git reset 2c52489\n... and you're back where you started  ", "question_id": 927358}, 0], [{"answer_votes": "525", "answer_comments": [" If you committed to the wrong branch: once reverted, switch to the correct branch and cherry-pick the commit. \u2013 Kris  Jun 27 '12 at 11:02 ", " What does that mean, cherry pick the commit? In my case, I was on the wrong branch when I edited a file. I committed it then realized I was in the wrong branch. Using \"git reset --soft HEAD~1\" got me back to just before the commit, but now if I checkout the correct branch, how do I undo the changes to the file in wrong branch but instead make them (in the same named file) in the correct branch? \u2013 astronomerdave  Jan 13 '15 at 22:05 ", " I just utilized git revert commit-id worked like a charm.  Of course then you will need to push your changes. \u2013 Casey Robinson  Jan 25 '16 at 21:07  ", " I believe that would be git cherry-pick <<erroneous-commit-sha>> @astronomerdave. From, Mr. Almost-2-Years-Late-to-the-Party. \u2013 Tom Howard  Oct 20 '16 at 18:19 "], "answer_body": " Use git revert commit-id  To get the commit ID, just use git log ", "question_id": 927358}, 0], [{"answer_votes": "418", "answer_comments": [" @SMR, In your example, all are pointing into current HEAD only. HEAD^ = HEAD^1. As well as HEAD^1 = HEAD~1.  When you use HEAD~2, there is a difference between ~ and ^ symbols. If you use ~2 means \u201cthe first parent of the first parent,\u201d or \u201cthe grandparent\u201d. \u2013 Madhan Ayyasamy  Dec 14 '15 at 15:34  ", " clear and easy to understand, save my night ! \u2013 Vladimir Ch  Mar 14 at 19:10 ", " Apparently, I accidentally downvoted this answer, and it's too late for me to un-downvote it. Apologies. \u2013 Matt  Apr 9 at 17:20 "], "answer_body": " If you are planning undoing a local commit entirely, whatever you changes you did on the commit, and if you don't worry anything about that, just do the following command.  git reset --hard HEAD^1  (This command will ignore your entire commit and your changes will be lost completely from your local working tree). If you want to undo your commit, but you want your changes in the staging area (before commit just like after git add ) then do the following command.  git reset --soft HEAD^1  Now your committed files comes into the staging area. Suppose if you want to unstage the files, because you need to edit some wrong conent, then do the following command  git reset HEAD  Now committed files come from the staged area into the unstaged area. Now files are ready to edit, so whatever you changes, you want go edit and added it and make a fresh/new commit.  More ", "question_id": 927358}, 0], [{"answer_votes": "413", "answer_comments": null, "answer_body": " If you have Git Extras installed, you can run git undo to undo the latest commit. git undo 3 will undo the last 3 commits. ", "question_id": 927358}, 0], [{"answer_votes": "367", "answer_comments": null, "answer_body": " I prefer to use git rebase -i for this job, because a nice list pops up where I can choose the commits to get rid of. It might not be as direct as some other answers here, but it just feels right .  Choose how many commits you want to list, then invoke like this (to enlist last three)  git rebase -i HEAD~3  Sample list  pick aa28ba7 Sanity check for RtmpSrv port\npick c26c541 RtmpSrv version option\npick 58d6909 Better URL decoding support  Then git will remove commits for any line that you remove. ", "question_id": 927358}, 0], [{"answer_votes": "283", "answer_comments": [" I'm in the 2nd case, but when I do \"git revert HEAD\" it says \"error: Commit [ID] is a merge but no -m option was given.  fatal: revert failed\".  Any suggestions? \u2013 metaforge  Nov 12 '14 at 19:36 ", " Probably worth mentioning that instead of HEAD~1 you could use the actual hash as displayed by git log --stat or by git reflog - useful when you need to 'undo' more than one commit. \u2013 ccpizza  Dec 7 '14 at 0:38 "], "answer_body": " If you have committed junk but not pushed,  git reset --soft HEAD~1   HEAD~1 is a shorthand for the commit before head. Alternatively you can refer to the SHA-1 of the hash if you want to reset to. --soft option will delete the commit but it will leave all your changed files \"Changes to be committed\", as git status would put it.  If you want to get rid of any changes to tracked files in the working tree since the commit before head use \" --hard \" instead.   OR   If you already pushed and someone pulled which is usually my case, you can't use git reset . You can however do a git revert ,   git revert HEAD   This will create a new commit that reverses everything introduced by the accidental commit.  ", "question_id": 927358}, 0], [{"answer_votes": "238", "answer_comments": null, "answer_body": " On SourceTree (GUI for GitHub), you may right-click the commit and do a 'Reverse Commit'. This should undo your changes.  On the terminal:  You may alternatively use:  git revert  Or:  git reset --soft HEAD^ # Use --soft if you want to keep your changes.\ngit reset --hard HEAD^ # Use --hard if you don't care about keeping your changes. ", "question_id": 927358}, 0], [{"answer_votes": "224", "answer_comments": [" I needed to write git reset --soft \"HEAD^\" with double quotes, because I write it from Windows command prompt. \u2013 Ena  Apr 23 '14 at 9:13 ", " It should work without any quotes. \u2013 jkulak  Nov 10 '16 at 19:19 "], "answer_body": " A single command:  git reset --soft 'HEAD^'  It works great to undo the last local commit! ", "question_id": 927358}, 0], [{"answer_votes": "191", "answer_comments": null, "answer_body": " How to undo the last Git commit?  To restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD.   If you don't want to keep your changes that you made:  git reset --hard HEAD^  If you want to keep your changes:  git reset --soft HEAD^   Now check your git log. It will show that our last commit has been removed. ", "question_id": 927358}, 0], [{"answer_votes": "189", "answer_comments": null, "answer_body": " Just reset it doing the command below using git :  git reset --soft HEAD~1  Explain: what git reset does, it's basically reset to any commit you'd like to go back to, then if you combine it with --soft key, it will go back, but keep the  changes in your file(s), so you get back to the stage which the file was just added, HEAD is the head of the branch and if you combine with ~1 (in this case you also use HEAD^ ), it will go back only one commit which what you want...  I create the steps in the image below in more details for you, including all steps that may happens in real situations and committing the code:  ", "question_id": 927358}, 0], [{"answer_votes": "158", "answer_comments": null, "answer_body": " Use reflog to find a correct state  git reflog   REFLOG BEFORE RESET  Select the correct reflog (f3cb6e2 in my case) and type  git reset --hard f3cb6e2  After that the repo HEAD will be reset to that HEADid  LOG AFTER RESET  Finally the reflog looks like the picture below   REFLOG FINAL ", "question_id": 927358}, 0], [{"answer_votes": "145", "answer_comments": null, "answer_body": " \"Reset the working tree to the last commit\"  git reset --hard HEAD^  \"Clean unknown files from the working tree\"  git clean  see - Git Quick Reference  NOTE: This command will delete your previous commit, so use with caution! git reset --hard is safer \u2013 ", "question_id": 927358}, 0], [{"answer_votes": "142", "answer_comments": null, "answer_body": " First run:  git reflog  It will show you all the possible actions you have performed on your repository, for example, commit, merge, pull, etc.  Then do:  git reset --hard ActionIdFromRefLog ", "question_id": 927358}, 0], [{"answer_votes": "124", "answer_comments": null, "answer_body": " Undo last commit:  git reset --soft HEAD^ or git reset --soft HEAD~  This will undo the last commit.  Here --soft means reset into staging.  HEAD~ or HEAD^ means to move to commit before HEAD.   Replace last commit to new commit:  git commit --amend -m \"message\"  It will replace the last commit with the new commit. ", "question_id": 927358}, 0], [{"answer_votes": "122", "answer_comments": null, "answer_body": " Type git log and find the last commit hash code and then enter:  git reset <the previous co> ", "question_id": 927358}, 0], [{"answer_votes": "120", "answer_comments": null, "answer_body": " In my case I accidentally committed some files I did not want to. So I did the following and it worked:  git reset --soft HEAD^\ngit rm --cached [files you do not need]\ngit add [files you need]\ngit commit -c ORIG_HEAD  Verify the results with gitk or git log --stat ", "question_id": 927358}, 0], [{"answer_votes": "105", "answer_comments": null, "answer_body": " Use SourceTree (graphical tool for Git) to see your commits and tree. You can manually reset it directly by right clicking it. ", "question_id": 927358}, 0], [{"answer_votes": "92", "answer_comments": null, "answer_body": " Simple, run this in your command line:  git reset --soft HEAD~ ", "question_id": 927358}, 0], [{"answer_votes": "85", "answer_comments": [" Maybe you could at a note/warning that his command will throw away the commit and the changes in the working directory without asking any further. \u2013 cr7pt0gr4ph7  Nov 24 '14 at 22:35  ", " If you happen to do this by accident, not all is lost, though. See stackoverflow.com/questions/10099258/\u2026 , stackoverflow.com/questions/15479501/\u2026 and stackoverflow.com/questions/7374069/undo-git-reset-hard/7376959 . \u2013 cr7pt0gr4ph7  Nov 24 '14 at 22:40 ", " Use --soft to keep your changes as uncommitted changes , --hard to nuke the commit completely and revert back by one. Remember to do such operations only on changes, that are not pushed yet. \u2013 Yunus Nedim Mehel  Mar 9 '15 at 9:11 ", " @Zaz: You are right; maybe I should have clarified that. Only files/changes that have been either added to index (/staged) or have been committed can possibly be recovered. Uncommitted, unstaged changes are , as you said, completely thrown away by git reset --hard . \u2013 cr7pt0gr4ph7  Sep 13 '16 at 21:17 ", " As a sidenote: Everytime a file is staged, git stores its contents in its object database. The stored contents are only removed when garbage collection is executed. It is therefore possible to recover the last staged version of a file that was not currently staged when git reset --hard was executed (see the posts linked above for more information). \u2013 cr7pt0gr4ph7  Sep 13 '16 at 21:22  "], "answer_body": " To reset to the previous revision, permanently deleting all uncommitted changes:  git reset --hard HEAD~1 ", "question_id": 927358}, 0], [{"answer_votes": "73", "answer_comments": [" git reset --hard HEAD~1 is too dangerous ! This will not just 'cancel last commit', but will revert repo completely back to the previous commit. So you will LOOSE all changes committed in the last commit! \u2013 Arnis Juraga  Mar 21 '17 at 12:09  ", " You right, to undo this you can use git push -f <remote> HEAD@{1}:<branch> \u2013 Benny  Apr 24 '17 at 13:07 "], "answer_body": " There are many ways to do it:  Git command to undo the last commit/ previous commits:  Basic command to revert the commit in Git is:  $ git reset --hard <COMMIT -ID>  or  $ git reset --hard HEAD~<n>  COMMIT-ID : ID for the commit  n: is number of last commits you want to revert  You can get the commit id as shown below:  $ **git log --oneline**\n\nd81d3f1 function to subtract two numbers\n\nbe20eb8 function to add two numbers\n\nbedgfgg function to mulitply two numbers  where d81d3f1 and be20eb8 are commit id.  Now let's see some cases:  Suppose you want to revert the last commit 'd81d3f1'. Below are the ways:  $ git reset --hard d81d3f1  or  $ git reset --hard HEAD~1  Suppose you want to revert the commit 'be20eb8'. Below are the way:  $ git reset --hard be20eb8  For more detailed information you can refer and try out some other commands too for resetting head to a specified state:  $ git reset --help ", "question_id": 927358}, 0], [{"answer_votes": "69", "answer_comments": [" After git reset --soft HEAD~1 , if you need to unstage files, use: git reset \u2013 MKatleast3  Feb 23 '17 at 0:32 "], "answer_body": " If you want remove files in the last commit, you can use this:  git reset --hard HEAD~1  And if need files in the last commit, you can use this:  git reset --soft HEAD~1 ", "question_id": 927358}, 0], [{"answer_votes": "67", "answer_comments": null, "answer_body": " For a local commit  git reset --soft HEAD~1  or if you do not remember exactly in which commit it is, you might use  git rm --cached <file>  For a pushed commit  The proper way of removing files from the repository history is using git filter-branch . That is,  git filter-branch --index-filter 'git rm --cached <file>' HEAD  But I recomnend you use this command with care. Read more at git-filter-branch(1) Manual Page . ", "question_id": 927358}, 0], [{"answer_votes": "54", "answer_comments": null, "answer_body": " Usually, you want to undo a commit because you made a mistake and you want to fix it - essentially what the OP did when he asked the question. So really, you actually want to redo a commit.  Most of the answers here focus on the command line. While the command line is the best way to use Git when you're comfortable with it, its probably a bit alien to those coming from other version control systems to Git.  Here's how to do it using a GUI. If you have Git installed, you already have everything you need to follow these instructions.  NOTE: I will assume here that you realised the commit was wrong before you pushed it. If you don't know what pushing is, you probably haven't pushed, so carry on with the instructions. If you have pushed the faulty commit, the least risky way is just to follow up the faulty commit with a new commit that fixes things, the way you would do it in a version control system that does not allow you to rewrite history.  That said, here's how to fix your most recent fault commit using a GUI:   Navigate to your repository on the command line and start the gui with git gui  Choose \"Amend last commit\". You will see your last commit message, the files you staged and the files you didn't.  Now change things to how you want them to look and click Commit.  ", "question_id": 927358}, 0], [{"answer_votes": "53", "answer_comments": [" Or git reset @~ \u2013 Zaz  Aug 4 '16 at 8:36 "], "answer_body": " You can use:  git reset HEAD@{1}  This command will delete your wrong commit without a Git log. ", "question_id": 927358}, 0], [{"answer_votes": "49", "answer_comments": [" The very useful description about differences --soft VS --hard  atlassian.com/git/tutorials/\u2026 \u2013 Eugen Konkov  Dec 15 '16 at 16:29 ", " One doesn't really lose the commits on a --hard reset as they will be available in the ref log for 30 days git reflog . \u2013 Todd  Sep 11 '17 at 14:10 "], "answer_body": " WHAT TO USE, reset --soft or reset --hard ?  I am just adding two cents for @Kyralessa's answer:  If you are unsure what to use go for --soft (I used this convention to remember it -- s oft for safe).  Why ?  If you choose --hard by mistake you will LOSE your changes as it wasn't before.\nIf you choose --soft by mistake you can achieve the same results of --hard by applying additional commands  git reset HEAD file.html\ngit checkout -- file.html  Full example  echo \"some changes...\" > file.html\ngit add file.html\ngit commit -m \"wrong commit\"\n\n# I need to reset\ngit reset --hard HEAD~1 (cancel changes)\n# OR\ngit reset --soft HEAD~1 # Back to staging\ngit reset HEAD file.html # back to working directory\ngit checkout -- file.html # cancel changes  Credits goes to @Kyralessa. ", "question_id": 927358}, 0], [{"answer_votes": "46", "answer_comments": null, "answer_body": " If you are working with SourceTree , this will help you.  Right click on the commit then select \" Reset (current branch)/master to this commit \" and last select  \"Soft\" reset .  ", "question_id": 927358}, 0], [{"answer_votes": "44", "answer_comments": null, "answer_body": " Just undo the last commit:  git reset --soft HEAD~  Or undo the time before last time commit:  git reset --soft HEAD~2  Or undo any previous commit:  git reset --soft <commitID>  (you can get the commitID using git reflog )  When you undo a previous commit, remember to clean the workplace with  git clean  More details can be found in the docs: git-reset ", "question_id": 927358}, 0], [{"answer_votes": "42", "answer_comments": null, "answer_body": " Think we have code.txt file.\nWe make some changes on it and commit. We can undo this commit in three ways , but first you should know what is the staged file...\nAn staged file is a file that ready to commit and if you run git status this file will be shown with green color and if this is not staged for commit will be shown with red color:   It means if you commit your change, your changes on this file is not saved.\nYou can add this file in your stage with git add code.txt and then commit your change:   Undo last commit:   Now if we want just undo commit without any other changes, we can use  git reset --soft HEAD^    If we want undo commit and its changes ( THIS IS DANGEROUS, because your change will lost ), we can use  git reset --hard HEAD^   And if we want undo commit and remove changes from stage, we can use  git reset --mixed HEAD^ or in a short form git reset HEAD^   ", "question_id": 927358}, 0], [{"answer_votes": "41", "answer_comments": [" Be extra careful when reverting merge commits. You may lose your commits. Read about what Linus says about that: kernel.org/pub/software/scm/git/docs/howto/\u2026 \u2013 Eugen Konkov  Dec 15 '16 at 16:25  "], "answer_body": " To undo your local commit you use git reset <file> . Also that tutorial is very helpful to show you how it works.  Alternatively, you can use git revert <commit> : reverting should be used when you want to add another commit that rolls back the changes (but keeps them in the project history). ", "question_id": 927358}, 0], [{"answer_votes": "31", "answer_comments": null, "answer_body": " You need to do the easy and fast  git commit --amend  if it's a private branch or  git commit -m 'Replace .class files with .java files'  if it's a shared or public branch. ", "question_id": 927358}, 0], [{"answer_votes": "31", "answer_comments": [" \"Working copy\"? Is this a Git concept? Isn't it an SVN concept? \u2013 Peter Mortensen  Jan 28 at 21:36 "], "answer_body": " Undo the Last Commit  There are tons of situations where you really want to undo that last commit into your code. E.g. because you'd like to restructure it extensively - or even discard it altogether!  In these cases, the \"reset\" command is your best friend:  $ git reset --soft HEAD~1  The above command (reset) will rewind your current HEAD branch to the specified revision. In our example above, we'd like to return to the one before the current revision - effectively making our last commit undone.  Note the --soft flag: this makes sure that the changes in undone revisions are preserved. After running the command, you'll find the changes as uncommitted local modifications in your working copy.  If you don't want to keep these changes, simply use the --hard flag. Be sure to only do this when you're sure you don't need these changes any more.  $ git reset --hard HEAD~1  ", "question_id": 927358}, 0], [{"answer_votes": "30", "answer_comments": null, "answer_body": " I got the commit ID from bitbucket and then did:  git checkout commitID .  Example:  git checkout 7991072 .  And it reverted it back up to that working copy of that commit. ", "question_id": 927358}, 0], [{"answer_votes": "26", "answer_comments": null, "answer_body": " In my case I committed and pushed to the wrong branch, so what I wanted was to have all my changes back so I can commit them to a new correct branch, so I did this:  On the same branch that you committed and pushed, if you type \"git status\" you wont't see anything new because you committed and pushed, now type:  git reset --soft HEAD~1  This will get all your changes(files) back in the stage area, now to get them back in the working directory(unstage) you just type:  git reset FILE  Where \"File\" is the file that you want to commit again. Now this FILE should be in the working directory(unstaged) with all the changes that you did. Now you can change to whatever branch that you want and commit the changes in that branch. Hope this helps other people that made the same mistake I did. Of course the initial branch that you committed is still there with all changes, but in my case that was ok, if it is not for you you can look for ways to revert that commit in that branch. ", "question_id": 927358}, 0], [{"answer_votes": "25", "answer_comments": null, "answer_body": " Use this command  git checkout -b old-state 0d1d7fc32 ", "question_id": 927358}, 0], [{"answer_votes": "25", "answer_comments": null, "answer_body": " You have several options to undo your last commit. \nHere are some of your options summarize into a single answer with code snippets  First of all you need to figure which are the \"wrong\" commits which you wish to discard. We will use git reflog to find it.   git reflog  You can always use the reflog as well.  git reflog will display any change which updated the HEAD and checking out the desired reflog entry will set the HEAD back to this commit.  Every time the HEAD is modified there will be a new entry in the reflog . The reflog is similar to unix history command and is kept locally on your machine.  git reflog\ngit checkout HEAD@{...}\n# or\ngit checkout <sha-1>  Using the checkout you can go back to any desired commit and you can create branch or any other options that git checkout will allow you to do.    git reset HEAD --hard <commit_id>  \"Move\" your head back to the desired commit. Git reset will checkout the desired commit content to your staging area and/or to your working directory based upon the value --hard/--soft/--mixed you choose to pick. --hard will update both stage area and working directory with the given  content and will \"detach\" any other commits beyond this point on your local branch.  If those commits are not part of any other branch they will become \"dangle\". \"dangle\" content means that there is a un-reachable content in your local repository which is not part of any other branch and can be removed or will be removed by the gc .  # This will destroy any local modifications.\n# Don't do it if you have uncommitted work you want to keep.\ngit reset --hard 0d1d7fc32\n\n# Alternatively, if there's work to keep:\ngit stash\ngit reset --hard 0d1d7fc32\ngit stash pop\n# This saves the modifications, then reapplies that patch after resetting.\n# You could get merge conflicts, if you've modified things which were\n# changed since the commit you reset to.   This schema illustrate which command does what. As you can see there reset && checkout modify the HEAD .  ", "question_id": 927358}, 0], [{"answer_votes": "24", "answer_comments": null, "answer_body": " Use this command:  git checkout -b old-state number_commit ", "question_id": 927358}, 0], [{"answer_votes": "22", "answer_comments": null, "answer_body": " You can always do a git checkout (SHA code) of the previous version and then commit again with the new code. ", "question_id": 927358}, 0], [{"answer_votes": "21", "answer_comments": null, "answer_body": " In order to get rid of (all the changes in) last commit, last 2 commits and last n commits:  git reset --hard HEAD~1\ngit reset --hard HEAD~2\n...\ngit reset --hard HEAD~n  And, to get rid of anything after a specific commit:  git reset --hard <commit sha>  e.g.,  git reset --hard 0d12345   PS: 1- Be careful, because of \"hard\" option, it deletes the local changes\n  in your repo as well and reverts to the previous mentioned commit. You\n  should run this if you are sure you messed up in your last commit(s)\n  and would like to go back in time.  2- Usually 7 letters of \"commit sha\" is enough, but in bigger\n  projects, you may need up to 12 letters to guarantee be unique. You\n  also can mention the whole 40 letters sha.  3- The above commands work in Github for Windows as well.  ", "question_id": 927358}, 0], [{"answer_votes": "21", "answer_comments": null, "answer_body": " Use:  git reset HEAD~1 --soft  Make changes, add, and commit the changes. ", "question_id": 927358}, 0], [{"answer_votes": "18", "answer_comments": null, "answer_body": " You just have to use a single command:  git reset --soft 'HEAD^'  It works to undo the last local commit to your Git repository. ", "question_id": 927358}, 0], [{"answer_votes": "17", "answer_comments": null, "answer_body": " Reference: How to undo last commit in Git?  If you have Git Extensions installed you can easily undo/revert any commit (you can download git extensions from here ).  Open Git Extensions, right click on the commit you want to revert then select \"Revert commit\".   A popup will be opened (see the screenshot below)   Select \"Automatically create a commit\" if you want to directly commit the reverted changes or if you want to manually commit the reverted changes keep the box un-selected and click on \"Revert this commit\" button. ", "question_id": 927358}, 0], [{"answer_votes": "15", "answer_comments": null, "answer_body": " Just use git reset --hard <last good SHA> to reset your changes and give new commit. You can also use git checkout -- <bad filename> . ", "question_id": 927358}, 0], [{"answer_votes": "14", "answer_comments": null, "answer_body": " You can undo your git commits in two ways:-\nFirst is you can use git revert, if you want to keep your commit history.  git revert HEAD~3\ngit revert <hashcode of commit>  Second is you can use git reset, which would delete all your commit history and bring your head to commit where you want it.  git reset <hashcode of commit>\ngit reset HEAD~3  You can also use --hard keyword if any of it start behaving otherwise. But , I would recommend until it's extremely necessary. ", "question_id": 927358}, 0], [{"answer_votes": "10", "answer_comments": null, "answer_body": " In IntelliJ IDEA you can just open Git Repository Log by pressing Alt + 9 , then right mouse button click at some tag from commits list and select: \"Reset Current Branch to Here...\" ", "question_id": 927358}, 0], [{"answer_votes": "10", "answer_comments": null, "answer_body": " Undo last commit:  git reset --soft HEAD^ or git reset --soft HEAD~  This will undo the last commit.  Here --soft means reset into staging.  HEAD~ or HEAD^ means to move to commit before HEAD.  Replace last commit to new commit:  git commit --amend -m \"message\"  It will replace the last commit with the new commit. ", "question_id": 927358}, 0], [{"answer_votes": "9", "answer_comments": null, "answer_body": "  Assuming you're working in Visual Studio, if you go in to you branch history and look at all of your commits, simply select the event prior to the commit you want to undo, right-click it, and select Revert .  Easy as that. ", "question_id": 927358}, 0], [{"answer_votes": "9", "answer_comments": null, "answer_body": " I have found this site which describes how to undo things that you have committed into the repository.  Some commands:  git commit --amend        # Change last commit\ngit reset HEAD~ --soft    # Undo last commit ", "question_id": 927358}, 0], [{"answer_votes": "8", "answer_comments": null, "answer_body": " Find the last commit hash code by seeing the log by :  git log  Then  git reset <the previous co> ", "question_id": 927358}, 0], [{"answer_votes": "8", "answer_comments": null, "answer_body": " HEAD:  Before reset commit we should know about HEAD... HEAD is nothing but your current state in your working directory.. it is represented by commit number...  git commmit:  Each changes assigned under commit which is represented by unique tag.. Commits can't be deleted. so if you want your last commit you can simply dive into it using git reset  you can dive into last commit using 2 method,  Method 1: ( if you dont know commit number but want to move onto very first)  git reset HEAD~1  #it will move your head to last commit  Method 2: ( if you know commit you simply reset onto your known commit)  git reset 0xab3 # commit number  Note: if you want to know recent commit try this, git log -p -1   here is the graphical representation,  ", "question_id": 927358}, 0], [{"answer_votes": "8", "answer_comments": null, "answer_body": " Here is site: Oh shit, git! .  Here are many recipes how to undo things in git. Some of them:   Oh shit, I need to change the message on my last commit!   git commit --amend\n# follow prompts to change the commit message   Oh shit, I accidentally committed something to master that should have been on a brand new branch!   # create a new branch from the current state of master\ngit branch some-new-branch-name\n# remove the commit from the master branch\ngit reset HEAD~ --hard\ngit checkout some-new-branch-name\n# your commit lives in this branch now :) ", "question_id": 927358}, 0], [{"answer_votes": "4", "answer_comments": null, "answer_body": " You can undo your commits from the local repository, please follow the below scenario.  In below image I checkout test branch (using Git command git checkout -b test ) as a local and check status (using Git command git status ) of local branch there is nothing to commit.   In the next image image you can see here I made few changes in Filter1.txt and added that file to stage area than commit my changes with some message (using Git command git commit -m \"Doing commit to test revert back\" ).  \"-m is for commit message\"   In the next image you can see your commits log whatever you have made commits (Using Git command git log ).   So in above image you can see commit id with each commit and with your commit message now whatever commit you want to revert back or undo copy that commit id and hit below Git command. git revert {\"paste your commit id\"} . Example:  git revert 9ca304ed12b991f8251496b4ea452857b34353e7   I have reverted back my last commit. Now if you check your Git status. You can see the modified file which is Filter1.txt and yet to commit.  ", "question_id": 927358}, 0], [{"answer_votes": "0", "answer_comments": null, "answer_body": " Try this, hard reset to previous commit where those files were not added, then:  git reset --hard <commit_hash>  Make sure you have a backup of your changes just in case, as it's a hard reset, which means they'll be lost (unless you stashed earlier) ", "question_id": 927358}, 0]], "merge_gensim_nltk_title": [[{"answer_votes": "338", "answer_comments": [" gitk --all $(git reflog | cut -c1-7)& may be helpful for finding the previous revision if you want to undo an '--amend' commit. \u2013 nobar  Oct 18 '14 at 23:38  ", " It should be noted that if you're attempting to remove secret information before pushing to a shared repository, doing a revert won't help you, because the information will still be in the history in the previous commit.  If you want to ensure the change is never visible to others you need to use git reset \u2013 Jherico  Sep 4 '15 at 4:52 ", " See also: stackoverflow.com/a/30598953 \u2013 nobar  Apr 5 '16 at 4:20 ", " I think 'private'/'public' would more correctly be 'local'/'remote'. \u2013 nobar  Mar 28 at 14:59 "], "answer_body": " How to fix the previous local commit  Use git-gui (or similar) to perform a git commit --amend . From the GUI you can add or remove individual files from the commit. You can also modify the commit message.  How to undo the previous local commit  Just reset your branch to the previous location (for example, using gitk or git rebase ). Then reapply your changes from a saved copy. After garbage collection in your local repository, it will be like the unwanted commit never happened. To do all of that in a single command, use git reset HEAD~1 .  Word of warning : Careless use of git reset is a good way to get your working copy into a confusing state. I recommend that Git novices avoid this if they can.  How to undo a public commit  Perform a reverse cherry pick ( git-revert ) to undo the changes.  If you haven't yet pulled other changes onto your branch, you can simply do...  git revert --no-edit HEAD  Then push your updated branch to the shared repository.  The commit history will show both commits, separately .   Advanced: Correction of private branch in public repository  This can be dangerous -- be sure you have a local copy of the branch to repush.  Also note: You don't want to do this if someone else may be working on the branch.  git push --delete (branch_name) ## remove public version of branch  Cleanup your branch locally then repush...  git push origin (branch_name)  In the normal case, you probably needn't worry about your private-branch commit history being pristine.  Just push a followup commit (see 'How to undo a public commit' above), and later, do a squash-merge to hide the history. ", "question_id": 927358}, "0.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.178584860.17858486"], [{"answer_votes": "120", "answer_comments": null, "answer_body": " In my case I accidentally committed some files I did not want to. So I did the following and it worked:  git reset --soft HEAD^\ngit rm --cached [files you do not need]\ngit add [files you need]\ngit commit -c ORIG_HEAD  Verify the results with gitk or git log --stat ", "question_id": 927358}, "0.162409220.162409220.16240922"], [{"answer_votes": "191", "answer_comments": null, "answer_body": " How to undo the last Git commit?  To restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD.   If you don't want to keep your changes that you made:  git reset --hard HEAD^  If you want to keep your changes:  git reset --soft HEAD^   Now check your git log. It will show that our last commit has been removed. ", "question_id": 927358}, "0.158476710.158476710.158476710.158476710.158476710.158476710.158476710.158476710.158476710.158476710.158476710.158476710.158476710.158476710.15847671"], [{"answer_votes": "4", "answer_comments": null, "answer_body": " You can undo your commits from the local repository, please follow the below scenario.  In below image I checkout test branch (using Git command git checkout -b test ) as a local and check status (using Git command git status ) of local branch there is nothing to commit.   In the next image image you can see here I made few changes in Filter1.txt and added that file to stage area than commit my changes with some message (using Git command git commit -m \"Doing commit to test revert back\" ).  \"-m is for commit message\"   In the next image you can see your commits log whatever you have made commits (Using Git command git log ).   So in above image you can see commit id with each commit and with your commit message now whatever commit you want to revert back or undo copy that commit id and hit below Git command. git revert {\"paste your commit id\"} . Example:  git revert 9ca304ed12b991f8251496b4ea452857b34353e7   I have reverted back my last commit. Now if you check your Git status. You can see the modified file which is Filter1.txt and yet to commit.  ", "question_id": 927358}, "0.148880450.148880450.148880450.148880450.148880450.148880450.148880450.148880450.148880450.148880450.148880450.148880450.148880450.148880450.148880450.148880450.148880450.148880450.148880450.148880450.148880450.148880450.14888045"], [{"answer_votes": "106", "answer_comments": null, "answer_body": " There are two main scenarios  You haven't pushed the commit yet  If the problem was extra files you commited (and you don't want those on repository), you can remove them using git rm and then commiting with --amend  git rm <pathToFile>  You can also remove entire directories with -r , or even combine with other Bash commands  git rm -r <pathToDirectory>\ngit rm $(find -name '*.class')  After removing the files, you can commit, with --amend option  git commit --amend -C HEAD # the -C option is to use the same commit message  This will rewrite your recent local commit removing the extra files, so, these files will never be sent on push and also will be removed from your local .git repository by GC.  You already pushed the commit  You can apply the same solution of the other scenario and then doing git push with the -f option, but it is not recommended since it overwrites the remote history with a divergent change (it can mess your repository).  Instead, you have to do the commit without --amend (remember this about -amend`: That option rewrites the history on the last commit). ", "question_id": 927358}, "0.13564860.13564860.13564860.13564860.13564860.13564860.13564860.13564860.13564860.13564860.13564860.13564860.13564860.13564860.13564860.13564860.1356486"], [{"answer_votes": "128", "answer_comments": null, "answer_body": " Another way:  Checkout the branch you want to revert, then reset your local working copy back to the commit that you want to be the latest one on the remote server (everything after it will go bye-bye). To do this, in SourceTree I right-clicked on the and selected \"Reset BRANCHNAME to this commit\".  Then navigate to your repository's local directory and run this command:  git -c diff.mnemonicprefix=false -c core.quotepath=false push -v -f --tags REPOSITORY_NAME BRANCHNAME:BRANCHNAME  This will erase all commits after the current one in your local repository but only for that one branch. ", "question_id": 927358}, "0.133825450.133825450.133825450.133825450.133825450.133825450.133825450.133825450.133825450.133825450.133825450.133825450.133825450.13382545"], [{"answer_votes": "1647", "answer_comments": [" I found this answer the clearest. git revert HEAD^ is not the previous, is the previous of the previous. I did : git revert HEAD and then push again and it worked :) \u2013 nacho4d  Jul 14 '11 at 8:32  ", " @riezebosch: your warning is in the wrong place. THIS answer doesn't mess up things, cause it correctly creates a new commit 102: \"restoring the file I removed on accident\" \u2013 rubo77  Jan 6 '14 at 8:37  ", " This was most helpful to me. I needed to know how to revert a public commit. Thanks! \u2013 FearlessFuture  Jan 25 at 22:25 "], "answer_body": " This took me a while to figure out, so maybe this will help someone...  There are two ways to \"undo\" your last commit, depending on whether or not you have already made your commit public (pushed to your remote repository):  How to undo a local commit  Let's say I committed locally, but now want to remove that commit.  git log\n    commit 101: bad commit    # latest commit, this would be called 'HEAD'\n    commit 100: good commit   # second to last commit, this is the one we want  To restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD :  git reset --soft HEAD^     # use --soft if you want to keep your changes\ngit reset --hard HEAD^     # use --hard if you don't care about keeping the changes you made  Now git log will show that our last commit has been removed.  How to undo a public commit  If you have already made your commits public, you will want to create a new commit which will \"revert\" the changes you made in your previous commit (current HEAD).  git revert HEAD  Your changes will now be reverted and ready for you to commit:  git commit -m 'restoring the file I removed by accident'\ngit log\n    commit 102: restoring the file I removed by accident\n    commit 101: removing a file we don't need\n    commit 100: adding a file that we need  For more info, check out Git Basics - Undoing Things ", "question_id": 927358}, "0.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.131575930.13157593"], [{"answer_votes": "18", "answer_comments": null, "answer_body": " You just have to use a single command:  git reset --soft 'HEAD^'  It works to undo the last local commit to your Git repository. ", "question_id": 927358}, "0.131197240.131197240.131197240.131197240.131197240.13119724"], [{"answer_votes": "17", "answer_comments": null, "answer_body": " Reference: How to undo last commit in Git?  If you have Git Extensions installed you can easily undo/revert any commit (you can download git extensions from here ).  Open Git Extensions, right click on the commit you want to revert then select \"Revert commit\".   A popup will be opened (see the screenshot below)   Select \"Automatically create a commit\" if you want to directly commit the reverted changes or if you want to manually commit the reverted changes keep the box un-selected and click on \"Revert this commit\" button. ", "question_id": 927358}, "0.121491830.121491830.121491830.121491830.121491830.121491830.121491830.121491830.121491830.121491830.121491830.121491830.121491830.121491830.121491830.12149183"], [{"answer_votes": "38", "answer_comments": null, "answer_body": " A Typical Git Cycle  In speaking of Git-related commands in the previous answers, I would like to share my typical Git cycles with all readers which may helpful. Here is how I work with Git,   Cloning the first time from the remote server  git clone $project  Pulling from remote (when I don't have a pending local commit to push)  git pull  Adding a new local file1 into $to_be_committed_list (just imagine $to_be_committed_list means staged area)  git add $file1  Removing mistakenly added file2 from $to_be_committed_list (assume that file2 is added like step 3, which I didn't want)  git reset $file2  Committing file1 which is in $to_be_committed_list  git commit -m \"commit message description\"  Syncing local commit with remote repository before pushing  git pull --rebase  Resolving when conflict occurs prerequisite configure mergetool  git mergetool #resolve merging here, also can manually merge  Adding conflict-resolved files, let's say file1 :  git add $file1  Continuing my previous rebase command  git rebase --continue  Pushing ready and already synced last local commit  git push origin head:refs/for/$branch # branch = master, dev, etc.  ", "question_id": 927358}, "0.121438130.121438130.121438130.121438130.121438130.121438130.121438130.121438130.121438130.12143813"], [{"answer_votes": "54", "answer_comments": null, "answer_body": " Usually, you want to undo a commit because you made a mistake and you want to fix it - essentially what the OP did when he asked the question. So really, you actually want to redo a commit.  Most of the answers here focus on the command line. While the command line is the best way to use Git when you're comfortable with it, its probably a bit alien to those coming from other version control systems to Git.  Here's how to do it using a GUI. If you have Git installed, you already have everything you need to follow these instructions.  NOTE: I will assume here that you realised the commit was wrong before you pushed it. If you don't know what pushing is, you probably haven't pushed, so carry on with the instructions. If you have pushed the faulty commit, the least risky way is just to follow up the faulty commit with a new commit that fixes things, the way you would do it in a version control system that does not allow you to rewrite history.  That said, here's how to fix your most recent fault commit using a GUI:   Navigate to your repository on the command line and start the gui with git gui  Choose \"Amend last commit\". You will see your last commit message, the files you staged and the files you didn't.  Now change things to how you want them to look and click Commit.  ", "question_id": 927358}, "0.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.111178310.11117831"], [{"answer_votes": "413", "answer_comments": null, "answer_body": " If you have Git Extras installed, you can run git undo to undo the latest commit. git undo 3 will undo the last 3 commits. ", "question_id": 927358}, "0.103093670.103093670.103093670.103093670.103093670.103093670.103093670.103093670.10309367"], [{"answer_votes": "26", "answer_comments": null, "answer_body": " In my case I committed and pushed to the wrong branch, so what I wanted was to have all my changes back so I can commit them to a new correct branch, so I did this:  On the same branch that you committed and pushed, if you type \"git status\" you wont't see anything new because you committed and pushed, now type:  git reset --soft HEAD~1  This will get all your changes(files) back in the stage area, now to get them back in the working directory(unstage) you just type:  git reset FILE  Where \"File\" is the file that you want to commit again. Now this FILE should be in the working directory(unstaged) with all the changes that you did. Now you can change to whatever branch that you want and commit the changes in that branch. Hope this helps other people that made the same mistake I did. Of course the initial branch that you committed is still there with all changes, but in my case that was ok, if it is not for you you can look for ways to revert that commit in that branch. ", "question_id": 927358}, "0.1024700250.1024700250.1024700250.1024700250.1024700250.1024700250.1024700250.1024700250.1024700250.1024700250.1024700250.1024700250.1024700250.1024700250.1024700250.1024700250.1024700250.1024700250.1024700250.1024700250.1024700250.1024700250.102470025"], [{"answer_votes": "9502", "answer_comments": [" @dma_k, yes.  Or you could do git reset --hard HEAD^^ once.  I use the tilde (~) notation because the caret (^) notation doesn't work in DOS. \u2013 Ryan Lundy  Feb 25 '12 at 15:02 ", " Another nice tip: You can re-attach the branch to the commit that you removed it from with git branch -f <branch> <commit-id> . Saves having to re-create commits! \u2013 naught101  Jun 22 '12 at 13:11  ", " For a git beginner, it isn't obvious what the difference is between the last two options (--soft and the one above it). Mentioning the index doesn't help, we don't really know what that means yet. @nessur's connection between soft and Ctrl-Z really helped! But I still don't quite understand the difference between the two options. \u2013 Stomp  Jun 26 '12 at 15:56 ", " It's much better to be told 'why' something works, than just to be told the answer. Kudos to this description - it helped be 'get' git. \u2013 Chris Nash  Jul 3 '12 at 19:13 ", " Missing a crucial point: If the said commit was previously 'pushed' to the remote, any 'undo' operation, no matter how simple, will cause enormous pain and suffering to the rest of the users who have this commit in their local copy, when they do a 'git pull' in the future.  So, if the commit was already 'pushed', do this instead:      git revert <bad-commit-sha1-id>     git push origin : \u2013 FractalSpace  Nov 8 '13 at 23:43  "], "answer_body": " Undoing a commit is a little scary if you don't know how it works.  But it's actually amazingly easy if you do understand.  Say you have this, where C is your HEAD and (F) is the state of your files.  (F)\nA-B-C\n    \u2191\n  master  You want to nuke commit C and never see it again .  You do this:  git reset --hard HEAD~1  The result is:  (F)\nA-B\n  \u2191\nmaster  Now B is the HEAD.  Because you used --hard , your files are reset to their state at commit B.  Ah, but suppose commit C wasn't a disaster, but just a bit off.  You want to undo the commit but keep your changes for a bit of editing before you do a better commit.  Starting again from here, with C as your HEAD:  (F)\nA-B-C\n    \u2191\n  master  You can do this, leaving off the --hard :  git reset HEAD~1  In this case the result is:  (F)\nA-B-C\n  \u2191\nmaster  In both cases, HEAD is just a pointer to the latest commit.  When you do a git reset HEAD~1 , you tell Git to move the HEAD pointer back one commit.  But (unless you use --hard ) you leave your files as they were.  So now git status shows the changes you had checked into C.  You haven't lost a thing!  For the lightest touch, you can even undo your commit but leave your files and your index :  git reset --soft HEAD~1  This not only leaves your files alone, it even leaves your index alone.  When you do git status , you'll see that the same files are in the index as before.  In fact, right after this command, you could do git commit and you'd be redoing the same commit you just had.  One more thing: Suppose you destroy a commit as in the first example, but then discover you needed it after all ?  Tough luck, right?  Nope, there's still a way to get it back.  Type git reflog and you'll see a list of (partial) commit shas that you've moved around in.  Find the commit you destroyed, and do this:  git checkout -b someNewBranchName shaYouDestroyed  You've now resurrected that commit.  Commits don't actually get destroyed in Git for some 90 days, so you can usually go back and rescue one you didn't mean to get rid of. ", "question_id": 927358}, "0.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.1008347050.100834705"], [{"answer_votes": "8", "answer_comments": null, "answer_body": " Here is site: Oh shit, git! .  Here are many recipes how to undo things in git. Some of them:   Oh shit, I need to change the message on my last commit!   git commit --amend\n# follow prompts to change the commit message   Oh shit, I accidentally committed something to master that should have been on a brand new branch!   # create a new branch from the current state of master\ngit branch some-new-branch-name\n# remove the commit from the master branch\ngit reset HEAD~ --hard\ngit checkout some-new-branch-name\n# your commit lives in this branch now :) ", "question_id": 927358}, "0.097950490.097950490.097950490.097950490.097950490.097950490.097950490.097950490.097950490.097950490.097950490.09795049"], [{"answer_votes": "9", "answer_comments": null, "answer_body": " I have found this site which describes how to undo things that you have committed into the repository.  Some commands:  git commit --amend        # Change last commit\ngit reset HEAD~ --soft    # Undo last commit ", "question_id": 927358}, "0.0936415340.0936415340.093641534"], [{"answer_votes": "49", "answer_comments": [" The very useful description about differences --soft VS --hard  atlassian.com/git/tutorials/\u2026 \u2013 Eugen Konkov  Dec 15 '16 at 16:29 ", " One doesn't really lose the commits on a --hard reset as they will be available in the ref log for 30 days git reflog . \u2013 Todd  Sep 11 '17 at 14:10 "], "answer_body": " WHAT TO USE, reset --soft or reset --hard ?  I am just adding two cents for @Kyralessa's answer:  If you are unsure what to use go for --soft (I used this convention to remember it -- s oft for safe).  Why ?  If you choose --hard by mistake you will LOSE your changes as it wasn't before.\nIf you choose --soft by mistake you can achieve the same results of --hard by applying additional commands  git reset HEAD file.html\ngit checkout -- file.html  Full example  echo \"some changes...\" > file.html\ngit add file.html\ngit commit -m \"wrong commit\"\n\n# I need to reset\ngit reset --hard HEAD~1 (cancel changes)\n# OR\ngit reset --soft HEAD~1 # Back to staging\ngit reset HEAD file.html # back to working directory\ngit checkout -- file.html # cancel changes  Credits goes to @Kyralessa. ", "question_id": 927358}, "0.0933655050.0933655050.0933655050.0933655050.0933655050.0933655050.0933655050.0933655050.093365505"], [{"answer_votes": "1590", "answer_comments": [" Does this work when I did a git commit --amend and what I really meant to do is a git commit ? \u2013 dbm  May 18 '11 at 13:07 ", " @dbm, if you accidentally amended, use git reset --soft <oldref> , where oldref is the commit ID before the amend. You can use git reflog to identify the old commit ID. This will undo the effects of the amend, but leave changes staged. Then just do git commit to commit as a regular commit. \u2013 bdonlan  May 18 '11 at 14:20 ", " @Dennis, git commit --amend turns the current tree (ie, staged changes) into a commit, overwriting current HEAD. After that point, they're not considered staged anymore because they're part of the commit (ie, git diff --cached is blank), but they're not \"removed\" or \"lost\". \u2013 bdonlan  Feb 1 '12 at 3:08 "], "answer_body": " Add/remove files to get things the way you want:  git rm classdir\ngit add sourcedir  Then amend the commit:  git commit --amend  The previous, erroneous commit will be edited to reflect the new index state - in other words, it'll be like you never made the mistake in the first place.  Note that you should only do this if you haven't pushed yet. If you have pushed, then you'll just have to commit a fix normally. ", "question_id": 927358}, "0.090651580.090651580.090651580.090651580.090651580.090651580.090651580.090651580.090651580.09065158"], [{"answer_votes": "53", "answer_comments": [" Or git reset @~ \u2013 Zaz  Aug 4 '16 at 8:36 "], "answer_body": " You can use:  git reset HEAD@{1}  This command will delete your wrong commit without a Git log. ", "question_id": 927358}, "0.08943549"], [{"answer_votes": "418", "answer_comments": [" @SMR, In your example, all are pointing into current HEAD only. HEAD^ = HEAD^1. As well as HEAD^1 = HEAD~1.  When you use HEAD~2, there is a difference between ~ and ^ symbols. If you use ~2 means \u201cthe first parent of the first parent,\u201d or \u201cthe grandparent\u201d. \u2013 Madhan Ayyasamy  Dec 14 '15 at 15:34  ", " clear and easy to understand, save my night ! \u2013 Vladimir Ch  Mar 14 at 19:10 ", " Apparently, I accidentally downvoted this answer, and it's too late for me to un-downvote it. Apologies. \u2013 Matt  Apr 9 at 17:20 "], "answer_body": " If you are planning undoing a local commit entirely, whatever you changes you did on the commit, and if you don't worry anything about that, just do the following command.  git reset --hard HEAD^1  (This command will ignore your entire commit and your changes will be lost completely from your local working tree). If you want to undo your commit, but you want your changes in the staging area (before commit just like after git add ) then do the following command.  git reset --soft HEAD^1  Now your committed files comes into the staging area. Suppose if you want to unstage the files, because you need to edit some wrong conent, then do the following command  git reset HEAD  Now committed files come from the staged area into the unstaged area. Now files are ready to edit, so whatever you changes, you want go edit and added it and make a fresh/new commit.  More ", "question_id": 927358}, "0.085307210.085307210.085307210.085307210.085307210.085307210.085307210.085307210.085307210.085307210.085307210.085307210.085307210.085307210.08530721"], [{"answer_votes": "0", "answer_comments": null, "answer_body": " Try this, hard reset to previous commit where those files were not added, then:  git reset --hard <commit_hash>  Make sure you have a backup of your changes just in case, as it's a hard reset, which means they'll be lost (unless you stashed earlier) ", "question_id": 927358}, "0.0827759060.082775906"], [{"answer_votes": "382", "answer_comments": [" Rewriting history on a shared repository is generally a very bad idea.  I assume you know what you're doing, I just hope future readers do too. \u2013 Brad Koch  Dec 7 '12 at 16:02  ", " Yes rollback is dangerous. Make sure that your working copy is in the desired state before you push. When pushing then the unwanted commits gets deleted permanently. \u2013 neoneye  Dec 8 '12 at 14:14 ", " \"Just like in the real world, if you want to rewrite history, you need a conspiracy: everybody has to be 'in' on the conspiracy (at least everybody who knows about the history, i.e. everybody who has ever pulled from the branch).\" Source: stackoverflow.com/a/2046748/334451 \u2013 Mikko Rantalainen  Aug 7 '13 at 10:10 ", " fantastic. This worked like a charm. There should be a git option for independently working developers - where one can use GitX, or a delete button next to a commit, and a confirmation - so this process is not so enigmatic :) \u2013 zero_cool  Jun 20 '14 at 15:31 "], "answer_body": " I wanted to undo the lastest 5 commits in our shared repository. I looked up the revision id that I wanted to rollback to. Then I typed in the following.  prompt> git reset --hard 5a7404742c85\nHEAD is now at 5a74047 Added one more page to catalogue\nprompt> git push origin master --force\nTotal 0 (delta 0), reused 0 (delta 0)\nremote: bb/acl: neoneye is allowed. accepted payload.\nTo git@bitbucket.org:thecompany/prometheus.git\n + 09a6480...5a74047 master -> master (forced update)\nprompt> ", "question_id": 927358}, "0.076832920.076832920.076832920.076832920.076832920.076832920.076832920.076832920.076832920.076832920.07683292"], [{"answer_votes": "69", "answer_comments": [" After git reset --soft HEAD~1 , if you need to unstage files, use: git reset \u2013 MKatleast3  Feb 23 '17 at 0:32 "], "answer_body": " If you want remove files in the last commit, you can use this:  git reset --hard HEAD~1  And if need files in the last commit, you can use this:  git reset --soft HEAD~1 ", "question_id": 927358}, "0.073924990.073924990.073924990.07392499"], [{"answer_votes": "25", "answer_comments": null, "answer_body": " You have several options to undo your last commit. \nHere are some of your options summarize into a single answer with code snippets  First of all you need to figure which are the \"wrong\" commits which you wish to discard. We will use git reflog to find it.   git reflog  You can always use the reflog as well.  git reflog will display any change which updated the HEAD and checking out the desired reflog entry will set the HEAD back to this commit.  Every time the HEAD is modified there will be a new entry in the reflog . The reflog is similar to unix history command and is kept locally on your machine.  git reflog\ngit checkout HEAD@{...}\n# or\ngit checkout <sha-1>  Using the checkout you can go back to any desired commit and you can create branch or any other options that git checkout will allow you to do.    git reset HEAD --hard <commit_id>  \"Move\" your head back to the desired commit. Git reset will checkout the desired commit content to your staging area and/or to your working directory based upon the value --hard/--soft/--mixed you choose to pick. --hard will update both stage area and working directory with the given  content and will \"detach\" any other commits beyond this point on your local branch.  If those commits are not part of any other branch they will become \"dangle\". \"dangle\" content means that there is a un-reachable content in your local repository which is not part of any other branch and can be removed or will be removed by the gc .  # This will destroy any local modifications.\n# Don't do it if you have uncommitted work you want to keep.\ngit reset --hard 0d1d7fc32\n\n# Alternatively, if there's work to keep:\ngit stash\ngit reset --hard 0d1d7fc32\ngit stash pop\n# This saves the modifications, then reapplies that patch after resetting.\n# You could get merge conflicts, if you've modified things which were\n# changed since the commit you reset to.   This schema illustrate which command does what. As you can see there reset && checkout modify the HEAD .  ", "question_id": 927358}, "0.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.068045870.06804587"], [{"answer_votes": "367", "answer_comments": null, "answer_body": " I prefer to use git rebase -i for this job, because a nice list pops up where I can choose the commits to get rid of. It might not be as direct as some other answers here, but it just feels right .  Choose how many commits you want to list, then invoke like this (to enlist last three)  git rebase -i HEAD~3  Sample list  pick aa28ba7 Sanity check for RtmpSrv port\npick c26c541 RtmpSrv version option\npick 58d6909 Better URL decoding support  Then git will remove commits for any line that you remove. ", "question_id": 927358}, "0.065953730.065953730.065953730.065953730.065953730.065953730.065953730.06595373"], [{"answer_votes": "283", "answer_comments": [" I'm in the 2nd case, but when I do \"git revert HEAD\" it says \"error: Commit [ID] is a merge but no -m option was given.  fatal: revert failed\".  Any suggestions? \u2013 metaforge  Nov 12 '14 at 19:36 ", " Probably worth mentioning that instead of HEAD~1 you could use the actual hash as displayed by git log --stat or by git reflog - useful when you need to 'undo' more than one commit. \u2013 ccpizza  Dec 7 '14 at 0:38 "], "answer_body": " If you have committed junk but not pushed,  git reset --soft HEAD~1   HEAD~1 is a shorthand for the commit before head. Alternatively you can refer to the SHA-1 of the hash if you want to reset to. --soft option will delete the commit but it will leave all your changed files \"Changes to be committed\", as git status would put it.  If you want to get rid of any changes to tracked files in the working tree since the commit before head use \" --hard \" instead.   OR   If you already pushed and someone pulled which is usually my case, you can't use git reset . You can however do a git revert ,   git revert HEAD   This will create a new commit that reverses everything introduced by the accidental commit.  ", "question_id": 927358}, "0.0643514840.0643514840.0643514840.0643514840.0643514840.0643514840.0643514840.0643514840.0643514840.0643514840.0643514840.0643514840.0643514840.064351484"], [{"answer_votes": "67", "answer_comments": null, "answer_body": " For a local commit  git reset --soft HEAD~1  or if you do not remember exactly in which commit it is, you might use  git rm --cached <file>  For a pushed commit  The proper way of removing files from the repository history is using git filter-branch . That is,  git filter-branch --index-filter 'git rm --cached <file>' HEAD  But I recomnend you use this command with care. Read more at git-filter-branch(1) Manual Page . ", "question_id": 927358}, "0.062738670.06273867"], [{"answer_votes": "27", "answer_comments": null, "answer_body": " Suppose you made a wrong commit locally and pushed it to remote repo. You can undo the mess with these two commands.  First we need to correct our local repo by going back to the commit that we desire:  git reset --hard <previous good commit id where you want local repo to go>  Now we forcefully push this good commit on the remote repo by using this command:  git push --force-with-lease  The 'with-lease' version of the force option will prevent accidental deletion of new commits you do not know about (i.e. coming from another source since your last pull). ", "question_id": 927358}, "0.0609490720.0609490720.0609490720.0609490720.0609490720.0609490720.0609490720.0609490720.0609490720.060949072"], [{"answer_votes": "834", "answer_comments": [" \"--hard\" will get rid of the modified .java files in the working directory that he wanted to commit. \u2013 Esko Luontola  May 29 '09 at 18:26 ", " You can \"git stash save\" working copy changes, do a hard reset and then \"git stash pop\" to get them back, though I suppose a soft reset would be simpler. \u2013 Asad R.  Apr 15 '11 at 13:33 ", " git commit -a -m \"\" or git commit -am \"\" naturally! :] \u2013 trejder  Jun 21 '14 at 16:31 ", " Another 'shortcut' use of stash; if you want to unstage everything (undo git add), just git stash , then git stash pop \u2013 seanriordan08  Dec 8 '15 at 22:30 "], "answer_body": " git rm yourfiles/*.class\ngit commit -a -m \"deleted all class files in folder 'yourfiles'\"  or  git reset --hard HEAD~1  Warning: The above command will permanently remove the modifications to the .java files (and any other files) that you wanted to commit.  The hard reset to HEAD-1 will set your working copy to the state of the commit before your wrong commit. ", "question_id": 927358}, "0.0607099870.0607099870.0607099870.0607099870.0607099870.0607099870.0607099870.0607099870.060709987"], [{"answer_votes": "30", "answer_comments": null, "answer_body": " I got the commit ID from bitbucket and then did:  git checkout commitID .  Example:  git checkout 7991072 .  And it reverted it back up to that working copy of that commit. ", "question_id": 927358}, "0.0595245360.059524536"], [{"answer_votes": "281", "answer_comments": [" Should be marked as answer, because you can specify which SHA you want. \u2013 Belfield  Jul 28 '17 at 10:49 ", " What if you do not use \"<commit_id>\" and simply use \"git reset --hard\"? I typically just want to get rid of my latest updates that I have not committed yet and got back to the latest commit I made, and I always use \"git reset --hard\". \u2013 Jaime Montoya  Sep 27 '17 at 23:30 ", " @JaimeMontoya To undo latest changes you can use git reset --hard , but if you have to hard remove last \"n\" commits you specify a SHA \u2013 poorva  Sep 28 '17 at 13:10 ", " Really like -f . This is what other answers lack \u2013 FreeLightman  Mar 1 at 8:58 "], "answer_body": " If you want to permanently undo it and you have cloned some repository  The commit id can be seen by  git log  Then you can do -  git reset --hard <commit_id>\n\ngit push origin <branch_name> -f ", "question_id": 927358}, "0.0526621340.052662134"], [{"answer_votes": "14", "answer_comments": null, "answer_body": " You can undo your git commits in two ways:-\nFirst is you can use git revert, if you want to keep your commit history.  git revert HEAD~3\ngit revert <hashcode of commit>  Second is you can use git reset, which would delete all your commit history and bring your head to commit where you want it.  git reset <hashcode of commit>\ngit reset HEAD~3  You can also use --hard keyword if any of it start behaving otherwise. But , I would recommend until it's extremely necessary. ", "question_id": 927358}, "0.0523570370.0523570370.0523570370.0523570370.052357037"], [{"answer_votes": "105", "answer_comments": null, "answer_body": " Use SourceTree (graphical tool for Git) to see your commits and tree. You can manually reset it directly by right clicking it. ", "question_id": 927358}, "0.0496694780.0496694780.049669478"], [{"answer_votes": "9", "answer_comments": null, "answer_body": " For the sake of completeness, I will give the one glaringly obvious method that was overlooked by the previous answers.  Since the commit was not pushed, the remote was unchanged, so:   Delete the local repo.  Clone the remote repo.   This is sometimes necessary if your fancy git client goes bye-bye. Don't forget to re-commit your saved changes since the last push. ", "question_id": 927358}, "0.048295090.048295090.048295090.048295090.048295090.048295090.048295090.048295090.04829509"], [{"answer_votes": "655", "answer_comments": null, "answer_body": " To change the last commit  Replace the files in the index:  git rm --cached *.class\ngit add *.java  Then, if it's a private branch, amend the commit:  git commit --amend  Or, if it's a shared branch, make a new commit:  git commit -m 'Replace .class files with .java files'   ( to change a previous commit , use the awesome interactive rebase )   ProTip\u2122: \u00a0 Add *.class to a gitignore to stop this happening again.   To revert a commit  Amending a commit is the ideal solution if you need to change the last commit, but a more general solution is reset .  You can reset git to any commit with:  git reset @~N  Where N is the number of commits before HEAD , and @~ resets to the previous commit.  So, instead of amending the commit, you could use:  git reset @~\ngit add *.java\ngit commit -m \"Add .java files\"  Check out git help reset , specifically the sections on --soft  --mixed and --hard , for a better understanding of what this does.  Reflog  If you mess up, you can always use the reflog to find dropped commits:  $ git reset @~\n$ git reflog\nc4f708b HEAD@{0}: reset: moving to @~\n2c52489 HEAD@{1}: commit: added some .class files\n$ git reset 2c52489\n... and you're back where you started  ", "question_id": 927358}, "0.044768070.044768070.044768070.044768070.044768070.044768070.044768070.044768070.044768070.044768070.044768070.044768070.044768070.044768070.044768070.044768070.044768070.044768070.044768070.044768070.044768070.044768070.04476807"], [{"answer_votes": "41", "answer_comments": [" Be extra careful when reverting merge commits. You may lose your commits. Read about what Linus says about that: kernel.org/pub/software/scm/git/docs/howto/\u2026 \u2013 Eugen Konkov  Dec 15 '16 at 16:25  "], "answer_body": " To undo your local commit you use git reset <file> . Also that tutorial is very helpful to show you how it works.  Alternatively, you can use git revert <commit> : reverting should be used when you want to add another commit that rolls back the changes (but keeps them in the project history). ", "question_id": 927358}, "0.043894160.043894160.043894160.043894160.043894160.04389416"], [{"answer_votes": "22", "answer_comments": null, "answer_body": " Remove a wrong commit that is already pushed to Github  git push origin +(previous good commit id):(branch name)  Please specify the last good commit id you would like to reset back in Github.  For example. If latest commit id is wrong then specify the previous commit id in above git command with branch name.  You can get previous commit id using git log ", "question_id": 927358}, "0.043850110.043850110.043850110.043850110.043850110.04385011"], [{"answer_votes": "145", "answer_comments": null, "answer_body": " \"Reset the working tree to the last commit\"  git reset --hard HEAD^  \"Clean unknown files from the working tree\"  git clean  see - Git Quick Reference  NOTE: This command will delete your previous commit, so use with caution! git reset --hard is safer \u2013 ", "question_id": 927358}, "0.043521990.043521990.043521990.043521990.04352199"], [{"answer_votes": "18320", "answer_comments": [" And if the commit was to the wrong branch, you may git checkout theRightBranch with all the changes stages. As I just had to do. \u2013 Frank Shearar  Oct 5 '10 at 15:44 ", " If you're working in DOS, instead of git reset --soft HEAD^ you'll need to use git reset --soft HEAD~1 .  The ^ is a continuation character in DOS so it won't work properly.  Also, --soft is the default, so you can omit it if you like and just say git reset HEAD~1 . \u2013 Ryan Lundy  Apr 13 '11 at 14:15 ", " Also, in zsh you have to quote ^, so git reset --soft 'HEAD^' ... at least I did \u2013 jberryman  Oct 27 '11 at 18:24 ", " (Correction to what I wrote above; --mixed is the default. --mixed means to keep the changed files, but not keep them in the index. --soft would keep the changed files and keep them in the index as they were just before the changed commit.  Sorry for the confusion.) \u2013 Ryan Lundy  Nov 17 '11 at 2:40 ", " zsh users might get: zsh: no matches found: HEAD^ - you need to escape ^ i.e. git reset --soft HEAD\\^ \u2013 tnajdek  Feb 21 '13 at 17:47  "], "answer_body": " Undo a commit and redo  $ git commit -m \"Something terribly misguided\"              (1)\n$ git reset HEAD~                                           (2)\n<< edit files as necessary >>                               (3)\n$ git add ...                                               (4)\n$ git commit -c ORIG_HEAD                                   (5)   This is what you want to undo  This leaves your working tree (the state of your files on disk) unchanged but undoes the commit and leaves the changes you committed unstaged (so they'll appear as \"Changes not staged for commit\" in git status , and you'll need to add them again before committing). If you only want to add more changes to the previous commit, or change the commit message 1 , you could use git reset --soft HEAD~ instead, which is like git reset HEAD~ (where HEAD~ is the same as HEAD~1 ) but leaves your existing changes staged.  Make corrections to working tree files.  git add anything that you want to include in your new commit.  Commit the changes, reusing the old commit message. reset copied the old head to .git/ORIG_HEAD ; commit with -c ORIG_HEAD will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the -C option.    1 Note, however, that you don't need to reset to an earlier commit if you just made a mistake in your commit message . The easier option is to git reset (to upstage any changes you've made since) and then git commit --amend , which will open your default commit message editor pre-populated with the last commit message.  Beware however that if you have added any new changes to the index, using commit --amend will add them to your previous commit.  ---- Edit by Frank R. 2018-3-9  If pushed,  git push origin master --force ", "question_id": 927358}, "0.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.042837050.04283705"], [{"answer_votes": "10", "answer_comments": null, "answer_body": " In IntelliJ IDEA you can just open Git Repository Log by pressing Alt + 9 , then right mouse button click at some tag from commits list and select: \"Reset Current Branch to Here...\" ", "question_id": 927358}, "0.0425372240.0425372240.042537224"], [{"answer_votes": "142", "answer_comments": null, "answer_body": " First run:  git reflog  It will show you all the possible actions you have performed on your repository, for example, commit, merge, pull, etc.  Then do:  git reset --hard ActionIdFromRefLog ", "question_id": 927358}, "0.040009066"], [{"answer_votes": "36", "answer_comments": null, "answer_body": " VISUAL STUDIO USERS (2015, etc.)  If you cannot synchronise in Visual Studio as you are not allowed to push to a branch like \"development\" then as much as I tried, in Visual Studio NEITHER the REVERT NOR the RESET (hard or soft) would work.  Per the answer with TONS OF VOTES:  Use this at the command prompt of root of your project to nuke anything that will attempt to get pushed:  git reset --hard HEAD~1  Backup or zip your files just in case you don't wish to lose any work, etc... ", "question_id": 927358}, "0.0382809640.0382809640.0382809640.0382809640.0382809640.0382809640.0382809640.0382809640.0382809640.0382809640.0382809640.038280964"], [{"answer_votes": "189", "answer_comments": null, "answer_body": " Just reset it doing the command below using git :  git reset --soft HEAD~1  Explain: what git reset does, it's basically reset to any commit you'd like to go back to, then if you combine it with --soft key, it will go back, but keep the  changes in your file(s), so you get back to the stage which the file was just added, HEAD is the head of the branch and if you combine with ~1 (in this case you also use HEAD^ ), it will go back only one commit which what you want...  I create the steps in the image below in more details for you, including all steps that may happens in real situations and committing the code:  ", "question_id": 927358}, "0.0368111470.0368111470.0368111470.0368111470.0368111470.0368111470.0368111470.0368111470.0368111470.0368111470.0368111470.0368111470.0368111470.0368111470.0368111470.0368111470.0368111470.036811147"], [{"answer_votes": "42", "answer_comments": null, "answer_body": " Think we have code.txt file.\nWe make some changes on it and commit. We can undo this commit in three ways , but first you should know what is the staged file...\nAn staged file is a file that ready to commit and if you run git status this file will be shown with green color and if this is not staged for commit will be shown with red color:   It means if you commit your change, your changes on this file is not saved.\nYou can add this file in your stage with git add code.txt and then commit your change:   Undo last commit:   Now if we want just undo commit without any other changes, we can use  git reset --soft HEAD^    If we want undo commit and its changes ( THIS IS DANGEROUS, because your change will lost ), we can use  git reset --hard HEAD^   And if we want undo commit and remove changes from stage, we can use  git reset --mixed HEAD^ or in a short form git reset HEAD^   ", "question_id": 927358}, "0.0367617870.0367617870.0367617870.0367617870.0367617870.0367617870.0367617870.0367617870.036761787"], [{"answer_votes": "224", "answer_comments": [" I needed to write git reset --soft \"HEAD^\" with double quotes, because I write it from Windows command prompt. \u2013 Ena  Apr 23 '14 at 9:13 ", " It should work without any quotes. \u2013 jkulak  Nov 10 '16 at 19:19 "], "answer_body": " A single command:  git reset --soft 'HEAD^'  It works great to undo the last local commit! ", "question_id": 927358}, "0.036607950.036607950.03660795"], [{"answer_votes": "21", "answer_comments": null, "answer_body": " In order to get rid of (all the changes in) last commit, last 2 commits and last n commits:  git reset --hard HEAD~1\ngit reset --hard HEAD~2\n...\ngit reset --hard HEAD~n  And, to get rid of anything after a specific commit:  git reset --hard <commit sha>  e.g.,  git reset --hard 0d12345   PS: 1- Be careful, because of \"hard\" option, it deletes the local changes\n  in your repo as well and reverts to the previous mentioned commit. You\n  should run this if you are sure you messed up in your last commit(s)\n  and would like to go back in time.  2- Usually 7 letters of \"commit sha\" is enough, but in bigger\n  projects, you may need up to 12 letters to guarantee be unique. You\n  also can mention the whole 40 letters sha.  3- The above commands work in Github for Windows as well.  ", "question_id": 927358}, "0.0349973630.0349973630.0349973630.0349973630.0349973630.0349973630.0349973630.0349973630.0349973630.0349973630.0349973630.0349973630.0349973630.0349973630.0349973630.0349973630.0349973630.034997363"], [{"answer_votes": "31", "answer_comments": null, "answer_body": " You need to do the easy and fast  git commit --amend  if it's a private branch or  git commit -m 'Replace .class files with .java files'  if it's a shared or public branch. ", "question_id": 927358}, "0.030042240.03004224"], [{"answer_votes": "73", "answer_comments": [" git reset --hard HEAD~1 is too dangerous ! This will not just 'cancel last commit', but will revert repo completely back to the previous commit. So you will LOOSE all changes committed in the last commit! \u2013 Arnis Juraga  Mar 21 '17 at 12:09  ", " You right, to undo this you can use git push -f <remote> HEAD@{1}:<branch> \u2013 Benny  Apr 24 '17 at 13:07 "], "answer_body": " There are many ways to do it:  Git command to undo the last commit/ previous commits:  Basic command to revert the commit in Git is:  $ git reset --hard <COMMIT -ID>  or  $ git reset --hard HEAD~<n>  COMMIT-ID : ID for the commit  n: is number of last commits you want to revert  You can get the commit id as shown below:  $ **git log --oneline**\n\nd81d3f1 function to subtract two numbers\n\nbe20eb8 function to add two numbers\n\nbedgfgg function to mulitply two numbers  where d81d3f1 and be20eb8 are commit id.  Now let's see some cases:  Suppose you want to revert the last commit 'd81d3f1'. Below are the ways:  $ git reset --hard d81d3f1  or  $ git reset --hard HEAD~1  Suppose you want to revert the commit 'be20eb8'. Below are the way:  $ git reset --hard be20eb8  For more detailed information you can refer and try out some other commands too for resetting head to a specified state:  $ git reset --help ", "question_id": 927358}, "0.0298169330.0298169330.0298169330.0298169330.0298169330.0298169330.0298169330.0298169330.0298169330.0298169330.0298169330.0298169330.0298169330.0298169330.0298169330.0298169330.0298169330.0298169330.0298169330.0298169330.0298169330.0298169330.0298169330.029816933"], [{"answer_votes": "9", "answer_comments": null, "answer_body": "  Assuming you're working in Visual Studio, if you go in to you branch history and look at all of your commits, simply select the event prior to the commit you want to undo, right-click it, and select Revert .  Easy as that. ", "question_id": 927358}, "0.029709820.029709820.029709820.029709820.029709820.029709820.029709820.029709820.02970982"], [{"answer_votes": "44", "answer_comments": null, "answer_body": " Just undo the last commit:  git reset --soft HEAD~  Or undo the time before last time commit:  git reset --soft HEAD~2  Or undo any previous commit:  git reset --soft <commitID>  (you can get the commitID using git reflog )  When you undo a previous commit, remember to clean the workplace with  git clean  More details can be found in the docs: git-reset ", "question_id": 927358}, "0.028811220.028811220.028811220.028811220.028811220.028811220.028811220.028811220.028811220.028811220.02881122"], [{"answer_votes": "79", "answer_comments": null, "answer_body": " This article has an excellent explanation as to how to go about various scenarios (where a commit has been done as well as the push OR just a commit, before the push):  http://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html  From the article, the easiest command I saw to revert a previous commit by its commit id , was:  git revert dd61ab32 ", "question_id": 927358}, "0.0284081160.0284081160.0284081160.0284081160.0284081160.0284081160.028408116"], [{"answer_votes": "31", "answer_comments": [" \"Working copy\"? Is this a Git concept? Isn't it an SVN concept? \u2013 Peter Mortensen  Jan 28 at 21:36 "], "answer_body": " Undo the Last Commit  There are tons of situations where you really want to undo that last commit into your code. E.g. because you'd like to restructure it extensively - or even discard it altogether!  In these cases, the \"reset\" command is your best friend:  $ git reset --soft HEAD~1  The above command (reset) will rewind your current HEAD branch to the specified revision. In our example above, we'd like to return to the one before the current revision - effectively making our last commit undone.  Note the --soft flag: this makes sure that the changes in undone revisions are preserved. After running the command, you'll find the changes as uncommitted local modifications in your working copy.  If you don't want to keep these changes, simply use the --hard flag. Be sure to only do this when you're sure you don't need these changes any more.  $ git reset --hard HEAD~1  ", "question_id": 927358}, "0.0281657280.0281657280.0281657280.0281657280.0281657280.0281657280.0281657280.0281657280.0281657280.0281657280.0281657280.0281657280.0281657280.0281657280.0281657280.0281657280.0281657280.0281657280.0281657280.028165728"], [{"answer_votes": "8", "answer_comments": null, "answer_body": " HEAD:  Before reset commit we should know about HEAD... HEAD is nothing but your current state in your working directory.. it is represented by commit number...  git commmit:  Each changes assigned under commit which is represented by unique tag.. Commits can't be deleted. so if you want your last commit you can simply dive into it using git reset  you can dive into last commit using 2 method,  Method 1: ( if you dont know commit number but want to move onto very first)  git reset HEAD~1  #it will move your head to last commit  Method 2: ( if you know commit you simply reset onto your known commit)  git reset 0xab3 # commit number  Note: if you want to know recent commit try this, git log -p -1   here is the graphical representation,  ", "question_id": 927358}, "0.0271107140.0271107140.0271107140.0271107140.0271107140.027110714"], [{"answer_votes": "238", "answer_comments": null, "answer_body": " On SourceTree (GUI for GitHub), you may right-click the commit and do a 'Reverse Commit'. This should undo your changes.  On the terminal:  You may alternatively use:  git revert  Or:  git reset --soft HEAD^ # Use --soft if you want to keep your changes.\ngit reset --hard HEAD^ # Use --hard if you don't care about keeping your changes. ", "question_id": 927358}, "0.019141440.019141440.019141440.01914144"], [{"answer_votes": "124", "answer_comments": null, "answer_body": " Undo last commit:  git reset --soft HEAD^ or git reset --soft HEAD~  This will undo the last commit.  Here --soft means reset into staging.  HEAD~ or HEAD^ means to move to commit before HEAD.   Replace last commit to new commit:  git commit --amend -m \"message\"  It will replace the last commit with the new commit. ", "question_id": 927358}, "0.0147445510.0147445510.0147445510.0147445510.0147445510.0147445510.014744551"], [{"answer_votes": "10", "answer_comments": null, "answer_body": " Undo last commit:  git reset --soft HEAD^ or git reset --soft HEAD~  This will undo the last commit.  Here --soft means reset into staging.  HEAD~ or HEAD^ means to move to commit before HEAD.  Replace last commit to new commit:  git commit --amend -m \"message\"  It will replace the last commit with the new commit. ", "question_id": 927358}, "0.0147445510.0147445510.0147445510.0147445510.0147445510.0147445510.014744551"], [{"answer_votes": "22", "answer_comments": null, "answer_body": " You can always do a git checkout (SHA code) of the previous version and then commit again with the new code. ", "question_id": 927358}, "0.0116054980.011605498"], [{"answer_votes": "21", "answer_comments": null, "answer_body": " Use:  git reset HEAD~1 --soft  Make changes, add, and commit the changes. ", "question_id": 927358}, "0.010741262"], [{"answer_votes": "15", "answer_comments": null, "answer_body": " Just use git reset --hard <last good SHA> to reset your changes and give new commit. You can also use git checkout -- <bad filename> . ", "question_id": 927358}, "0.009655314"], [{"answer_votes": "46", "answer_comments": null, "answer_body": " If you are working with SourceTree , this will help you.  Right click on the commit then select \" Reset (current branch)/master to this commit \" and last select  \"Soft\" reset .  ", "question_id": 927358}, "0.00471342030.0047134203"], [{"answer_votes": "85", "answer_comments": [" Maybe you could at a note/warning that his command will throw away the commit and the changes in the working directory without asking any further. \u2013 cr7pt0gr4ph7  Nov 24 '14 at 22:35  ", " If you happen to do this by accident, not all is lost, though. See stackoverflow.com/questions/10099258/\u2026 , stackoverflow.com/questions/15479501/\u2026 and stackoverflow.com/questions/7374069/undo-git-reset-hard/7376959 . \u2013 cr7pt0gr4ph7  Nov 24 '14 at 22:40 ", " Use --soft to keep your changes as uncommitted changes , --hard to nuke the commit completely and revert back by one. Remember to do such operations only on changes, that are not pushed yet. \u2013 Yunus Nedim Mehel  Mar 9 '15 at 9:11 ", " @Zaz: You are right; maybe I should have clarified that. Only files/changes that have been either added to index (/staged) or have been committed can possibly be recovered. Uncommitted, unstaged changes are , as you said, completely thrown away by git reset --hard . \u2013 cr7pt0gr4ph7  Sep 13 '16 at 21:17 ", " As a sidenote: Everytime a file is staged, git stores its contents in its object database. The stored contents are only removed when garbage collection is executed. It is therefore possible to recover the last staged version of a file that was not currently staged when git reset --hard was executed (see the posts linked above for more information). \u2013 cr7pt0gr4ph7  Sep 13 '16 at 21:22  "], "answer_body": " To reset to the previous revision, permanently deleting all uncommitted changes:  git reset --hard HEAD~1 ", "question_id": 927358}, "0.00448602160.0044860216"], [{"answer_votes": "525", "answer_comments": [" If you committed to the wrong branch: once reverted, switch to the correct branch and cherry-pick the commit. \u2013 Kris  Jun 27 '12 at 11:02 ", " What does that mean, cherry pick the commit? In my case, I was on the wrong branch when I edited a file. I committed it then realized I was in the wrong branch. Using \"git reset --soft HEAD~1\" got me back to just before the commit, but now if I checkout the correct branch, how do I undo the changes to the file in wrong branch but instead make them (in the same named file) in the correct branch? \u2013 astronomerdave  Jan 13 '15 at 22:05 ", " I just utilized git revert commit-id worked like a charm.  Of course then you will need to push your changes. \u2013 Casey Robinson  Jan 25 '16 at 21:07  ", " I believe that would be git cherry-pick <<erroneous-commit-sha>> @astronomerdave. From, Mr. Almost-2-Years-Late-to-the-Party. \u2013 Tom Howard  Oct 20 '16 at 18:19 "], "answer_body": " Use git revert commit-id  To get the commit ID, just use git log ", "question_id": 927358}, "0.004232118"], [{"answer_votes": "8", "answer_comments": null, "answer_body": " Find the last commit hash code by seeing the log by :  git log  Then  git reset <the previous co> ", "question_id": 927358}, "0.00322224270.00322224270.0032222427"], [{"answer_votes": "92", "answer_comments": null, "answer_body": " Simple, run this in your command line:  git reset --soft HEAD~ ", "question_id": 927358}, "0.0025681113"], [{"answer_votes": "122", "answer_comments": null, "answer_body": " Type git log and find the last commit hash code and then enter:  git reset <the previous co> ", "question_id": 927358}, "0.00244581840.0024458184"], [{"answer_votes": "158", "answer_comments": null, "answer_body": " Use reflog to find a correct state  git reflog   REFLOG BEFORE RESET  Select the correct reflog (f3cb6e2 in my case) and type  git reset --hard f3cb6e2  After that the repo HEAD will be reset to that HEADid  LOG AFTER RESET  Finally the reflog looks like the picture below   REFLOG FINAL ", "question_id": 927358}, "0.00231753620.00231753620.00231753620.00231753620.00231753620.00231753620.0023175362"], [{"answer_votes": "25", "answer_comments": null, "answer_body": " Use this command  git checkout -b old-state 0d1d7fc32 ", "question_id": 927358}, ""], [{"answer_votes": "24", "answer_comments": null, "answer_body": " Use this command:  git checkout -b old-state number_commit ", "question_id": 927358}, ""], [{"answer_votes": "4", "answer_comments": null, "answer_body": " git reset --hard your_last_good_commit_hash_here\n\ngit push --force origin master ", "question_id": 927358}, ""]], "merge_gensim_nltk_code": [[{"answer_votes": "4", "answer_comments": null, "answer_body": " git reset --hard your_last_good_commit_hash_here\n\ngit push --force origin master ", "question_id": 927358}, "0.25903454"], [{"answer_votes": "79", "answer_comments": null, "answer_body": " This article has an excellent explanation as to how to go about various scenarios (where a commit has been done as well as the push OR just a commit, before the push):  http://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html  From the article, the easiest command I saw to revert a previous commit by its commit id , was:  git revert dd61ab32 ", "question_id": 927358}, "0.159171040.15917104"], [{"answer_votes": "338", "answer_comments": [" gitk --all $(git reflog | cut -c1-7)& may be helpful for finding the previous revision if you want to undo an '--amend' commit. \u2013 nobar  Oct 18 '14 at 23:38  ", " It should be noted that if you're attempting to remove secret information before pushing to a shared repository, doing a revert won't help you, because the information will still be in the history in the previous commit.  If you want to ensure the change is never visible to others you need to use git reset \u2013 Jherico  Sep 4 '15 at 4:52 ", " See also: stackoverflow.com/a/30598953 \u2013 nobar  Apr 5 '16 at 4:20 ", " I think 'private'/'public' would more correctly be 'local'/'remote'. \u2013 nobar  Mar 28 at 14:59 "], "answer_body": " How to fix the previous local commit  Use git-gui (or similar) to perform a git commit --amend . From the GUI you can add or remove individual files from the commit. You can also modify the commit message.  How to undo the previous local commit  Just reset your branch to the previous location (for example, using gitk or git rebase ). Then reapply your changes from a saved copy. After garbage collection in your local repository, it will be like the unwanted commit never happened. To do all of that in a single command, use git reset HEAD~1 .  Word of warning : Careless use of git reset is a good way to get your working copy into a confusing state. I recommend that Git novices avoid this if they can.  How to undo a public commit  Perform a reverse cherry pick ( git-revert ) to undo the changes.  If you haven't yet pulled other changes onto your branch, you can simply do...  git revert --no-edit HEAD  Then push your updated branch to the shared repository.  The commit history will show both commits, separately .   Advanced: Correction of private branch in public repository  This can be dangerous -- be sure you have a local copy of the branch to repush.  Also note: You don't want to do this if someone else may be working on the branch.  git push --delete (branch_name) ## remove public version of branch  Cleanup your branch locally then repush...  git push origin (branch_name)  In the normal case, you probably needn't worry about your private-branch commit history being pristine.  Just push a followup commit (see 'How to undo a public commit' above), and later, do a squash-merge to hide the history. ", "question_id": 927358}, "0.139539780.139539780.139539780.13953978"], [{"answer_votes": "281", "answer_comments": [" Should be marked as answer, because you can specify which SHA you want. \u2013 Belfield  Jul 28 '17 at 10:49 ", " What if you do not use \"<commit_id>\" and simply use \"git reset --hard\"? I typically just want to get rid of my latest updates that I have not committed yet and got back to the latest commit I made, and I always use \"git reset --hard\". \u2013 Jaime Montoya  Sep 27 '17 at 23:30 ", " @JaimeMontoya To undo latest changes you can use git reset --hard , but if you have to hard remove last \"n\" commits you specify a SHA \u2013 poorva  Sep 28 '17 at 13:10 ", " Really like -f . This is what other answers lack \u2013 FreeLightman  Mar 1 at 8:58 "], "answer_body": " If you want to permanently undo it and you have cloned some repository  The commit id can be seen by  git log  Then you can do -  git reset --hard <commit_id>\n\ngit push origin <branch_name> -f ", "question_id": 927358}, "0.13720241"], [{"answer_votes": "27", "answer_comments": null, "answer_body": " Suppose you made a wrong commit locally and pushed it to remote repo. You can undo the mess with these two commands.  First we need to correct our local repo by going back to the commit that we desire:  git reset --hard <previous good commit id where you want local repo to go>  Now we forcefully push this good commit on the remote repo by using this command:  git push --force-with-lease  The 'with-lease' version of the force option will prevent accidental deletion of new commits you do not know about (i.e. coming from another source since your last pull). ", "question_id": 927358}, "0.129483910.12948391"], [{"answer_votes": "106", "answer_comments": null, "answer_body": " There are two main scenarios  You haven't pushed the commit yet  If the problem was extra files you commited (and you don't want those on repository), you can remove them using git rm and then commiting with --amend  git rm <pathToFile>  You can also remove entire directories with -r , or even combine with other Bash commands  git rm -r <pathToDirectory>\ngit rm $(find -name '*.class')  After removing the files, you can commit, with --amend option  git commit --amend -C HEAD # the -C option is to use the same commit message  This will rewrite your recent local commit removing the extra files, so, these files will never be sent on push and also will be removed from your local .git repository by GC.  You already pushed the commit  You can apply the same solution of the other scenario and then doing git push with the -f option, but it is not recommended since it overwrites the remote history with a divergent change (it can mess your repository).  Instead, you have to do the commit without --amend (remember this about -amend`: That option rewrites the history on the last commit). ", "question_id": 927358}, "0.0846376340.084637634"], [{"answer_votes": "9", "answer_comments": null, "answer_body": " For the sake of completeness, I will give the one glaringly obvious method that was overlooked by the previous answers.  Since the commit was not pushed, the remote was unchanged, so:   Delete the local repo.  Clone the remote repo.   This is sometimes necessary if your fancy git client goes bye-bye. Don't forget to re-commit your saved changes since the last push. ", "question_id": 927358}, "0.076436915"], [{"answer_votes": "22", "answer_comments": null, "answer_body": " Remove a wrong commit that is already pushed to Github  git push origin +(previous good commit id):(branch name)  Please specify the last good commit id you would like to reset back in Github.  For example. If latest commit id is wrong then specify the previous commit id in above git command with branch name.  You can get previous commit id using git log ", "question_id": 927358}, "0.07316664"], [{"answer_votes": "128", "answer_comments": null, "answer_body": " Another way:  Checkout the branch you want to revert, then reset your local working copy back to the commit that you want to be the latest one on the remote server (everything after it will go bye-bye). To do this, in SourceTree I right-clicked on the and selected \"Reset BRANCHNAME to this commit\".  Then navigate to your repository's local directory and run this command:  git -c diff.mnemonicprefix=false -c core.quotepath=false push -v -f --tags REPOSITORY_NAME BRANCHNAME:BRANCHNAME  This will erase all commits after the current one in your local repository but only for that one branch. ", "question_id": 927358}, "0.062998526"], [{"answer_votes": "38", "answer_comments": null, "answer_body": " A Typical Git Cycle  In speaking of Git-related commands in the previous answers, I would like to share my typical Git cycles with all readers which may helpful. Here is how I work with Git,   Cloning the first time from the remote server  git clone $project  Pulling from remote (when I don't have a pending local commit to push)  git pull  Adding a new local file1 into $to_be_committed_list (just imagine $to_be_committed_list means staged area)  git add $file1  Removing mistakenly added file2 from $to_be_committed_list (assume that file2 is added like step 3, which I didn't want)  git reset $file2  Committing file1 which is in $to_be_committed_list  git commit -m \"commit message description\"  Syncing local commit with remote repository before pushing  git pull --rebase  Resolving when conflict occurs prerequisite configure mergetool  git mergetool #resolve merging here, also can manually merge  Adding conflict-resolved files, let's say file1 :  git add $file1  Continuing my previous rebase command  git rebase --continue  Pushing ready and already synced last local commit  git push origin head:refs/for/$branch # branch = master, dev, etc.  ", "question_id": 927358}, "0.061912290.06191229"], [{"answer_votes": "36", "answer_comments": null, "answer_body": " VISUAL STUDIO USERS (2015, etc.)  If you cannot synchronise in Visual Studio as you are not allowed to push to a branch like \"development\" then as much as I tried, in Visual Studio NEITHER the REVERT NOR the RESET (hard or soft) would work.  Per the answer with TONS OF VOTES:  Use this at the command prompt of root of your project to nuke anything that will attempt to get pushed:  git reset --hard HEAD~1  Backup or zip your files just in case you don't wish to lose any work, etc... ", "question_id": 927358}, "0.061159305"], [{"answer_votes": "382", "answer_comments": [" Rewriting history on a shared repository is generally a very bad idea.  I assume you know what you're doing, I just hope future readers do too. \u2013 Brad Koch  Dec 7 '12 at 16:02  ", " Yes rollback is dangerous. Make sure that your working copy is in the desired state before you push. When pushing then the unwanted commits gets deleted permanently. \u2013 neoneye  Dec 8 '12 at 14:14 ", " \"Just like in the real world, if you want to rewrite history, you need a conspiracy: everybody has to be 'in' on the conspiracy (at least everybody who knows about the history, i.e. everybody who has ever pulled from the branch).\" Source: stackoverflow.com/a/2046748/334451 \u2013 Mikko Rantalainen  Aug 7 '13 at 10:10 ", " fantastic. This worked like a charm. There should be a git option for independently working developers - where one can use GitX, or a delete button next to a commit, and a confirmation - so this process is not so enigmatic :) \u2013 zero_cool  Jun 20 '14 at 15:31 "], "answer_body": " I wanted to undo the lastest 5 commits in our shared repository. I looked up the revision id that I wanted to rollback to. Then I typed in the following.  prompt> git reset --hard 5a7404742c85\nHEAD is now at 5a74047 Added one more page to catalogue\nprompt> git push origin master --force\nTotal 0 (delta 0), reused 0 (delta 0)\nremote: bb/acl: neoneye is allowed. accepted payload.\nTo git@bitbucket.org:thecompany/prometheus.git\n + 09a6480...5a74047 master -> master (forced update)\nprompt> ", "question_id": 927358}, "0.049988545"], [{"answer_votes": "18320", "answer_comments": [" And if the commit was to the wrong branch, you may git checkout theRightBranch with all the changes stages. As I just had to do. \u2013 Frank Shearar  Oct 5 '10 at 15:44 ", " If you're working in DOS, instead of git reset --soft HEAD^ you'll need to use git reset --soft HEAD~1 .  The ^ is a continuation character in DOS so it won't work properly.  Also, --soft is the default, so you can omit it if you like and just say git reset HEAD~1 . \u2013 Ryan Lundy  Apr 13 '11 at 14:15 ", " Also, in zsh you have to quote ^, so git reset --soft 'HEAD^' ... at least I did \u2013 jberryman  Oct 27 '11 at 18:24 ", " (Correction to what I wrote above; --mixed is the default. --mixed means to keep the changed files, but not keep them in the index. --soft would keep the changed files and keep them in the index as they were just before the changed commit.  Sorry for the confusion.) \u2013 Ryan Lundy  Nov 17 '11 at 2:40 ", " zsh users might get: zsh: no matches found: HEAD^ - you need to escape ^ i.e. git reset --soft HEAD\\^ \u2013 tnajdek  Feb 21 '13 at 17:47  "], "answer_body": " Undo a commit and redo  $ git commit -m \"Something terribly misguided\"              (1)\n$ git reset HEAD~                                           (2)\n<< edit files as necessary >>                               (3)\n$ git add ...                                               (4)\n$ git commit -c ORIG_HEAD                                   (5)   This is what you want to undo  This leaves your working tree (the state of your files on disk) unchanged but undoes the commit and leaves the changes you committed unstaged (so they'll appear as \"Changes not staged for commit\" in git status , and you'll need to add them again before committing). If you only want to add more changes to the previous commit, or change the commit message 1 , you could use git reset --soft HEAD~ instead, which is like git reset HEAD~ (where HEAD~ is the same as HEAD~1 ) but leaves your existing changes staged.  Make corrections to working tree files.  git add anything that you want to include in your new commit.  Commit the changes, reusing the old commit message. reset copied the old head to .git/ORIG_HEAD ; commit with -c ORIG_HEAD will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the -C option.    1 Note, however, that you don't need to reset to an earlier commit if you just made a mistake in your commit message . The easier option is to git reset (to upstage any changes you've made since) and then git commit --amend , which will open your default commit message editor pre-populated with the last commit message.  Beware however that if you have added any new changes to the index, using commit --amend will add them to your previous commit.  ---- Edit by Frank R. 2018-3-9  If pushed,  git push origin master --force ", "question_id": 927358}, "0.031974018"], [{"answer_votes": "9502", "answer_comments": [" @dma_k, yes.  Or you could do git reset --hard HEAD^^ once.  I use the tilde (~) notation because the caret (^) notation doesn't work in DOS. \u2013 Ryan Lundy  Feb 25 '12 at 15:02 ", " Another nice tip: You can re-attach the branch to the commit that you removed it from with git branch -f <branch> <commit-id> . Saves having to re-create commits! \u2013 naught101  Jun 22 '12 at 13:11  ", " For a git beginner, it isn't obvious what the difference is between the last two options (--soft and the one above it). Mentioning the index doesn't help, we don't really know what that means yet. @nessur's connection between soft and Ctrl-Z really helped! But I still don't quite understand the difference between the two options. \u2013 Stomp  Jun 26 '12 at 15:56 ", " It's much better to be told 'why' something works, than just to be told the answer. Kudos to this description - it helped be 'get' git. \u2013 Chris Nash  Jul 3 '12 at 19:13 ", " Missing a crucial point: If the said commit was previously 'pushed' to the remote, any 'undo' operation, no matter how simple, will cause enormous pain and suffering to the rest of the users who have this commit in their local copy, when they do a 'git pull' in the future.  So, if the commit was already 'pushed', do this instead:      git revert <bad-commit-sha1-id>     git push origin : \u2013 FractalSpace  Nov 8 '13 at 23:43  "], "answer_body": " Undoing a commit is a little scary if you don't know how it works.  But it's actually amazingly easy if you do understand.  Say you have this, where C is your HEAD and (F) is the state of your files.  (F)\nA-B-C\n    \u2191\n  master  You want to nuke commit C and never see it again .  You do this:  git reset --hard HEAD~1  The result is:  (F)\nA-B\n  \u2191\nmaster  Now B is the HEAD.  Because you used --hard , your files are reset to their state at commit B.  Ah, but suppose commit C wasn't a disaster, but just a bit off.  You want to undo the commit but keep your changes for a bit of editing before you do a better commit.  Starting again from here, with C as your HEAD:  (F)\nA-B-C\n    \u2191\n  master  You can do this, leaving off the --hard :  git reset HEAD~1  In this case the result is:  (F)\nA-B-C\n  \u2191\nmaster  In both cases, HEAD is just a pointer to the latest commit.  When you do a git reset HEAD~1 , you tell Git to move the HEAD pointer back one commit.  But (unless you use --hard ) you leave your files as they were.  So now git status shows the changes you had checked into C.  You haven't lost a thing!  For the lightest touch, you can even undo your commit but leave your files and your index :  git reset --soft HEAD~1  This not only leaves your files alone, it even leaves your index alone.  When you do git status , you'll see that the same files are in the index as before.  In fact, right after this command, you could do git commit and you'd be redoing the same commit you just had.  One more thing: Suppose you destroy a commit as in the first example, but then discover you needed it after all ?  Tough luck, right?  Nope, there's still a way to get it back.  Type git reflog and you'll see a list of (partial) commit shas that you've moved around in.  Find the commit you destroyed, and do this:  git checkout -b someNewBranchName shaYouDestroyed  You've now resurrected that commit.  Commits don't actually get destroyed in Git for some 90 days, so you can usually go back and rescue one you didn't mean to get rid of. ", "question_id": 927358}, ""], [{"answer_votes": "1647", "answer_comments": [" I found this answer the clearest. git revert HEAD^ is not the previous, is the previous of the previous. I did : git revert HEAD and then push again and it worked :) \u2013 nacho4d  Jul 14 '11 at 8:32  ", " @riezebosch: your warning is in the wrong place. THIS answer doesn't mess up things, cause it correctly creates a new commit 102: \"restoring the file I removed on accident\" \u2013 rubo77  Jan 6 '14 at 8:37  ", " This was most helpful to me. I needed to know how to revert a public commit. Thanks! \u2013 FearlessFuture  Jan 25 at 22:25 "], "answer_body": " This took me a while to figure out, so maybe this will help someone...  There are two ways to \"undo\" your last commit, depending on whether or not you have already made your commit public (pushed to your remote repository):  How to undo a local commit  Let's say I committed locally, but now want to remove that commit.  git log\n    commit 101: bad commit    # latest commit, this would be called 'HEAD'\n    commit 100: good commit   # second to last commit, this is the one we want  To restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD :  git reset --soft HEAD^     # use --soft if you want to keep your changes\ngit reset --hard HEAD^     # use --hard if you don't care about keeping the changes you made  Now git log will show that our last commit has been removed.  How to undo a public commit  If you have already made your commits public, you will want to create a new commit which will \"revert\" the changes you made in your previous commit (current HEAD).  git revert HEAD  Your changes will now be reverted and ready for you to commit:  git commit -m 'restoring the file I removed by accident'\ngit log\n    commit 102: restoring the file I removed by accident\n    commit 101: removing a file we don't need\n    commit 100: adding a file that we need  For more info, check out Git Basics - Undoing Things ", "question_id": 927358}, ""], [{"answer_votes": "1590", "answer_comments": [" Does this work when I did a git commit --amend and what I really meant to do is a git commit ? \u2013 dbm  May 18 '11 at 13:07 ", " @dbm, if you accidentally amended, use git reset --soft <oldref> , where oldref is the commit ID before the amend. You can use git reflog to identify the old commit ID. This will undo the effects of the amend, but leave changes staged. Then just do git commit to commit as a regular commit. \u2013 bdonlan  May 18 '11 at 14:20 ", " @Dennis, git commit --amend turns the current tree (ie, staged changes) into a commit, overwriting current HEAD. After that point, they're not considered staged anymore because they're part of the commit (ie, git diff --cached is blank), but they're not \"removed\" or \"lost\". \u2013 bdonlan  Feb 1 '12 at 3:08 "], "answer_body": " Add/remove files to get things the way you want:  git rm classdir\ngit add sourcedir  Then amend the commit:  git commit --amend  The previous, erroneous commit will be edited to reflect the new index state - in other words, it'll be like you never made the mistake in the first place.  Note that you should only do this if you haven't pushed yet. If you have pushed, then you'll just have to commit a fix normally. ", "question_id": 927358}, ""], [{"answer_votes": "834", "answer_comments": [" \"--hard\" will get rid of the modified .java files in the working directory that he wanted to commit. \u2013 Esko Luontola  May 29 '09 at 18:26 ", " You can \"git stash save\" working copy changes, do a hard reset and then \"git stash pop\" to get them back, though I suppose a soft reset would be simpler. \u2013 Asad R.  Apr 15 '11 at 13:33 ", " git commit -a -m \"\" or git commit -am \"\" naturally! :] \u2013 trejder  Jun 21 '14 at 16:31 ", " Another 'shortcut' use of stash; if you want to unstage everything (undo git add), just git stash , then git stash pop \u2013 seanriordan08  Dec 8 '15 at 22:30 "], "answer_body": " git rm yourfiles/*.class\ngit commit -a -m \"deleted all class files in folder 'yourfiles'\"  or  git reset --hard HEAD~1  Warning: The above command will permanently remove the modifications to the .java files (and any other files) that you wanted to commit.  The hard reset to HEAD-1 will set your working copy to the state of the commit before your wrong commit. ", "question_id": 927358}, ""], [{"answer_votes": "655", "answer_comments": null, "answer_body": " To change the last commit  Replace the files in the index:  git rm --cached *.class\ngit add *.java  Then, if it's a private branch, amend the commit:  git commit --amend  Or, if it's a shared branch, make a new commit:  git commit -m 'Replace .class files with .java files'   ( to change a previous commit , use the awesome interactive rebase )   ProTip\u2122: \u00a0 Add *.class to a gitignore to stop this happening again.   To revert a commit  Amending a commit is the ideal solution if you need to change the last commit, but a more general solution is reset .  You can reset git to any commit with:  git reset @~N  Where N is the number of commits before HEAD , and @~ resets to the previous commit.  So, instead of amending the commit, you could use:  git reset @~\ngit add *.java\ngit commit -m \"Add .java files\"  Check out git help reset , specifically the sections on --soft  --mixed and --hard , for a better understanding of what this does.  Reflog  If you mess up, you can always use the reflog to find dropped commits:  $ git reset @~\n$ git reflog\nc4f708b HEAD@{0}: reset: moving to @~\n2c52489 HEAD@{1}: commit: added some .class files\n$ git reset 2c52489\n... and you're back where you started  ", "question_id": 927358}, ""], [{"answer_votes": "525", "answer_comments": [" If you committed to the wrong branch: once reverted, switch to the correct branch and cherry-pick the commit. \u2013 Kris  Jun 27 '12 at 11:02 ", " What does that mean, cherry pick the commit? In my case, I was on the wrong branch when I edited a file. I committed it then realized I was in the wrong branch. Using \"git reset --soft HEAD~1\" got me back to just before the commit, but now if I checkout the correct branch, how do I undo the changes to the file in wrong branch but instead make them (in the same named file) in the correct branch? \u2013 astronomerdave  Jan 13 '15 at 22:05 ", " I just utilized git revert commit-id worked like a charm.  Of course then you will need to push your changes. \u2013 Casey Robinson  Jan 25 '16 at 21:07  ", " I believe that would be git cherry-pick <<erroneous-commit-sha>> @astronomerdave. From, Mr. Almost-2-Years-Late-to-the-Party. \u2013 Tom Howard  Oct 20 '16 at 18:19 "], "answer_body": " Use git revert commit-id  To get the commit ID, just use git log ", "question_id": 927358}, ""], [{"answer_votes": "418", "answer_comments": [" @SMR, In your example, all are pointing into current HEAD only. HEAD^ = HEAD^1. As well as HEAD^1 = HEAD~1.  When you use HEAD~2, there is a difference between ~ and ^ symbols. If you use ~2 means \u201cthe first parent of the first parent,\u201d or \u201cthe grandparent\u201d. \u2013 Madhan Ayyasamy  Dec 14 '15 at 15:34  ", " clear and easy to understand, save my night ! \u2013 Vladimir Ch  Mar 14 at 19:10 ", " Apparently, I accidentally downvoted this answer, and it's too late for me to un-downvote it. Apologies. \u2013 Matt  Apr 9 at 17:20 "], "answer_body": " If you are planning undoing a local commit entirely, whatever you changes you did on the commit, and if you don't worry anything about that, just do the following command.  git reset --hard HEAD^1  (This command will ignore your entire commit and your changes will be lost completely from your local working tree). If you want to undo your commit, but you want your changes in the staging area (before commit just like after git add ) then do the following command.  git reset --soft HEAD^1  Now your committed files comes into the staging area. Suppose if you want to unstage the files, because you need to edit some wrong conent, then do the following command  git reset HEAD  Now committed files come from the staged area into the unstaged area. Now files are ready to edit, so whatever you changes, you want go edit and added it and make a fresh/new commit.  More ", "question_id": 927358}, ""], [{"answer_votes": "413", "answer_comments": null, "answer_body": " If you have Git Extras installed, you can run git undo to undo the latest commit. git undo 3 will undo the last 3 commits. ", "question_id": 927358}, ""], [{"answer_votes": "367", "answer_comments": null, "answer_body": " I prefer to use git rebase -i for this job, because a nice list pops up where I can choose the commits to get rid of. It might not be as direct as some other answers here, but it just feels right .  Choose how many commits you want to list, then invoke like this (to enlist last three)  git rebase -i HEAD~3  Sample list  pick aa28ba7 Sanity check for RtmpSrv port\npick c26c541 RtmpSrv version option\npick 58d6909 Better URL decoding support  Then git will remove commits for any line that you remove. ", "question_id": 927358}, ""], [{"answer_votes": "283", "answer_comments": [" I'm in the 2nd case, but when I do \"git revert HEAD\" it says \"error: Commit [ID] is a merge but no -m option was given.  fatal: revert failed\".  Any suggestions? \u2013 metaforge  Nov 12 '14 at 19:36 ", " Probably worth mentioning that instead of HEAD~1 you could use the actual hash as displayed by git log --stat or by git reflog - useful when you need to 'undo' more than one commit. \u2013 ccpizza  Dec 7 '14 at 0:38 "], "answer_body": " If you have committed junk but not pushed,  git reset --soft HEAD~1   HEAD~1 is a shorthand for the commit before head. Alternatively you can refer to the SHA-1 of the hash if you want to reset to. --soft option will delete the commit but it will leave all your changed files \"Changes to be committed\", as git status would put it.  If you want to get rid of any changes to tracked files in the working tree since the commit before head use \" --hard \" instead.   OR   If you already pushed and someone pulled which is usually my case, you can't use git reset . You can however do a git revert ,   git revert HEAD   This will create a new commit that reverses everything introduced by the accidental commit.  ", "question_id": 927358}, ""], [{"answer_votes": "238", "answer_comments": null, "answer_body": " On SourceTree (GUI for GitHub), you may right-click the commit and do a 'Reverse Commit'. This should undo your changes.  On the terminal:  You may alternatively use:  git revert  Or:  git reset --soft HEAD^ # Use --soft if you want to keep your changes.\ngit reset --hard HEAD^ # Use --hard if you don't care about keeping your changes. ", "question_id": 927358}, ""], [{"answer_votes": "224", "answer_comments": [" I needed to write git reset --soft \"HEAD^\" with double quotes, because I write it from Windows command prompt. \u2013 Ena  Apr 23 '14 at 9:13 ", " It should work without any quotes. \u2013 jkulak  Nov 10 '16 at 19:19 "], "answer_body": " A single command:  git reset --soft 'HEAD^'  It works great to undo the last local commit! ", "question_id": 927358}, ""], [{"answer_votes": "191", "answer_comments": null, "answer_body": " How to undo the last Git commit?  To restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD.   If you don't want to keep your changes that you made:  git reset --hard HEAD^  If you want to keep your changes:  git reset --soft HEAD^   Now check your git log. It will show that our last commit has been removed. ", "question_id": 927358}, ""], [{"answer_votes": "189", "answer_comments": null, "answer_body": " Just reset it doing the command below using git :  git reset --soft HEAD~1  Explain: what git reset does, it's basically reset to any commit you'd like to go back to, then if you combine it with --soft key, it will go back, but keep the  changes in your file(s), so you get back to the stage which the file was just added, HEAD is the head of the branch and if you combine with ~1 (in this case you also use HEAD^ ), it will go back only one commit which what you want...  I create the steps in the image below in more details for you, including all steps that may happens in real situations and committing the code:  ", "question_id": 927358}, ""], [{"answer_votes": "158", "answer_comments": null, "answer_body": " Use reflog to find a correct state  git reflog   REFLOG BEFORE RESET  Select the correct reflog (f3cb6e2 in my case) and type  git reset --hard f3cb6e2  After that the repo HEAD will be reset to that HEADid  LOG AFTER RESET  Finally the reflog looks like the picture below   REFLOG FINAL ", "question_id": 927358}, ""], [{"answer_votes": "145", "answer_comments": null, "answer_body": " \"Reset the working tree to the last commit\"  git reset --hard HEAD^  \"Clean unknown files from the working tree\"  git clean  see - Git Quick Reference  NOTE: This command will delete your previous commit, so use with caution! git reset --hard is safer \u2013 ", "question_id": 927358}, ""], [{"answer_votes": "142", "answer_comments": null, "answer_body": " First run:  git reflog  It will show you all the possible actions you have performed on your repository, for example, commit, merge, pull, etc.  Then do:  git reset --hard ActionIdFromRefLog ", "question_id": 927358}, ""], [{"answer_votes": "124", "answer_comments": null, "answer_body": " Undo last commit:  git reset --soft HEAD^ or git reset --soft HEAD~  This will undo the last commit.  Here --soft means reset into staging.  HEAD~ or HEAD^ means to move to commit before HEAD.   Replace last commit to new commit:  git commit --amend -m \"message\"  It will replace the last commit with the new commit. ", "question_id": 927358}, ""], [{"answer_votes": "122", "answer_comments": null, "answer_body": " Type git log and find the last commit hash code and then enter:  git reset <the previous co> ", "question_id": 927358}, ""], [{"answer_votes": "120", "answer_comments": null, "answer_body": " In my case I accidentally committed some files I did not want to. So I did the following and it worked:  git reset --soft HEAD^\ngit rm --cached [files you do not need]\ngit add [files you need]\ngit commit -c ORIG_HEAD  Verify the results with gitk or git log --stat ", "question_id": 927358}, ""], [{"answer_votes": "105", "answer_comments": null, "answer_body": " Use SourceTree (graphical tool for Git) to see your commits and tree. You can manually reset it directly by right clicking it. ", "question_id": 927358}, ""], [{"answer_votes": "92", "answer_comments": null, "answer_body": " Simple, run this in your command line:  git reset --soft HEAD~ ", "question_id": 927358}, ""], [{"answer_votes": "85", "answer_comments": [" Maybe you could at a note/warning that his command will throw away the commit and the changes in the working directory without asking any further. \u2013 cr7pt0gr4ph7  Nov 24 '14 at 22:35  ", " If you happen to do this by accident, not all is lost, though. See stackoverflow.com/questions/10099258/\u2026 , stackoverflow.com/questions/15479501/\u2026 and stackoverflow.com/questions/7374069/undo-git-reset-hard/7376959 . \u2013 cr7pt0gr4ph7  Nov 24 '14 at 22:40 ", " Use --soft to keep your changes as uncommitted changes , --hard to nuke the commit completely and revert back by one. Remember to do such operations only on changes, that are not pushed yet. \u2013 Yunus Nedim Mehel  Mar 9 '15 at 9:11 ", " @Zaz: You are right; maybe I should have clarified that. Only files/changes that have been either added to index (/staged) or have been committed can possibly be recovered. Uncommitted, unstaged changes are , as you said, completely thrown away by git reset --hard . \u2013 cr7pt0gr4ph7  Sep 13 '16 at 21:17 ", " As a sidenote: Everytime a file is staged, git stores its contents in its object database. The stored contents are only removed when garbage collection is executed. It is therefore possible to recover the last staged version of a file that was not currently staged when git reset --hard was executed (see the posts linked above for more information). \u2013 cr7pt0gr4ph7  Sep 13 '16 at 21:22  "], "answer_body": " To reset to the previous revision, permanently deleting all uncommitted changes:  git reset --hard HEAD~1 ", "question_id": 927358}, ""], [{"answer_votes": "73", "answer_comments": [" git reset --hard HEAD~1 is too dangerous ! This will not just 'cancel last commit', but will revert repo completely back to the previous commit. So you will LOOSE all changes committed in the last commit! \u2013 Arnis Juraga  Mar 21 '17 at 12:09  ", " You right, to undo this you can use git push -f <remote> HEAD@{1}:<branch> \u2013 Benny  Apr 24 '17 at 13:07 "], "answer_body": " There are many ways to do it:  Git command to undo the last commit/ previous commits:  Basic command to revert the commit in Git is:  $ git reset --hard <COMMIT -ID>  or  $ git reset --hard HEAD~<n>  COMMIT-ID : ID for the commit  n: is number of last commits you want to revert  You can get the commit id as shown below:  $ **git log --oneline**\n\nd81d3f1 function to subtract two numbers\n\nbe20eb8 function to add two numbers\n\nbedgfgg function to mulitply two numbers  where d81d3f1 and be20eb8 are commit id.  Now let's see some cases:  Suppose you want to revert the last commit 'd81d3f1'. Below are the ways:  $ git reset --hard d81d3f1  or  $ git reset --hard HEAD~1  Suppose you want to revert the commit 'be20eb8'. Below are the way:  $ git reset --hard be20eb8  For more detailed information you can refer and try out some other commands too for resetting head to a specified state:  $ git reset --help ", "question_id": 927358}, ""], [{"answer_votes": "69", "answer_comments": [" After git reset --soft HEAD~1 , if you need to unstage files, use: git reset \u2013 MKatleast3  Feb 23 '17 at 0:32 "], "answer_body": " If you want remove files in the last commit, you can use this:  git reset --hard HEAD~1  And if need files in the last commit, you can use this:  git reset --soft HEAD~1 ", "question_id": 927358}, ""], [{"answer_votes": "67", "answer_comments": null, "answer_body": " For a local commit  git reset --soft HEAD~1  or if you do not remember exactly in which commit it is, you might use  git rm --cached <file>  For a pushed commit  The proper way of removing files from the repository history is using git filter-branch . That is,  git filter-branch --index-filter 'git rm --cached <file>' HEAD  But I recomnend you use this command with care. Read more at git-filter-branch(1) Manual Page . ", "question_id": 927358}, ""], [{"answer_votes": "54", "answer_comments": null, "answer_body": " Usually, you want to undo a commit because you made a mistake and you want to fix it - essentially what the OP did when he asked the question. So really, you actually want to redo a commit.  Most of the answers here focus on the command line. While the command line is the best way to use Git when you're comfortable with it, its probably a bit alien to those coming from other version control systems to Git.  Here's how to do it using a GUI. If you have Git installed, you already have everything you need to follow these instructions.  NOTE: I will assume here that you realised the commit was wrong before you pushed it. If you don't know what pushing is, you probably haven't pushed, so carry on with the instructions. If you have pushed the faulty commit, the least risky way is just to follow up the faulty commit with a new commit that fixes things, the way you would do it in a version control system that does not allow you to rewrite history.  That said, here's how to fix your most recent fault commit using a GUI:   Navigate to your repository on the command line and start the gui with git gui  Choose \"Amend last commit\". You will see your last commit message, the files you staged and the files you didn't.  Now change things to how you want them to look and click Commit.  ", "question_id": 927358}, ""], [{"answer_votes": "53", "answer_comments": [" Or git reset @~ \u2013 Zaz  Aug 4 '16 at 8:36 "], "answer_body": " You can use:  git reset HEAD@{1}  This command will delete your wrong commit without a Git log. ", "question_id": 927358}, ""], [{"answer_votes": "49", "answer_comments": [" The very useful description about differences --soft VS --hard  atlassian.com/git/tutorials/\u2026 \u2013 Eugen Konkov  Dec 15 '16 at 16:29 ", " One doesn't really lose the commits on a --hard reset as they will be available in the ref log for 30 days git reflog . \u2013 Todd  Sep 11 '17 at 14:10 "], "answer_body": " WHAT TO USE, reset --soft or reset --hard ?  I am just adding two cents for @Kyralessa's answer:  If you are unsure what to use go for --soft (I used this convention to remember it -- s oft for safe).  Why ?  If you choose --hard by mistake you will LOSE your changes as it wasn't before.\nIf you choose --soft by mistake you can achieve the same results of --hard by applying additional commands  git reset HEAD file.html\ngit checkout -- file.html  Full example  echo \"some changes...\" > file.html\ngit add file.html\ngit commit -m \"wrong commit\"\n\n# I need to reset\ngit reset --hard HEAD~1 (cancel changes)\n# OR\ngit reset --soft HEAD~1 # Back to staging\ngit reset HEAD file.html # back to working directory\ngit checkout -- file.html # cancel changes  Credits goes to @Kyralessa. ", "question_id": 927358}, ""], [{"answer_votes": "46", "answer_comments": null, "answer_body": " If you are working with SourceTree , this will help you.  Right click on the commit then select \" Reset (current branch)/master to this commit \" and last select  \"Soft\" reset .  ", "question_id": 927358}, ""], [{"answer_votes": "44", "answer_comments": null, "answer_body": " Just undo the last commit:  git reset --soft HEAD~  Or undo the time before last time commit:  git reset --soft HEAD~2  Or undo any previous commit:  git reset --soft <commitID>  (you can get the commitID using git reflog )  When you undo a previous commit, remember to clean the workplace with  git clean  More details can be found in the docs: git-reset ", "question_id": 927358}, ""], [{"answer_votes": "42", "answer_comments": null, "answer_body": " Think we have code.txt file.\nWe make some changes on it and commit. We can undo this commit in three ways , but first you should know what is the staged file...\nAn staged file is a file that ready to commit and if you run git status this file will be shown with green color and if this is not staged for commit will be shown with red color:   It means if you commit your change, your changes on this file is not saved.\nYou can add this file in your stage with git add code.txt and then commit your change:   Undo last commit:   Now if we want just undo commit without any other changes, we can use  git reset --soft HEAD^    If we want undo commit and its changes ( THIS IS DANGEROUS, because your change will lost ), we can use  git reset --hard HEAD^   And if we want undo commit and remove changes from stage, we can use  git reset --mixed HEAD^ or in a short form git reset HEAD^   ", "question_id": 927358}, ""], [{"answer_votes": "41", "answer_comments": [" Be extra careful when reverting merge commits. You may lose your commits. Read about what Linus says about that: kernel.org/pub/software/scm/git/docs/howto/\u2026 \u2013 Eugen Konkov  Dec 15 '16 at 16:25  "], "answer_body": " To undo your local commit you use git reset <file> . Also that tutorial is very helpful to show you how it works.  Alternatively, you can use git revert <commit> : reverting should be used when you want to add another commit that rolls back the changes (but keeps them in the project history). ", "question_id": 927358}, ""], [{"answer_votes": "31", "answer_comments": null, "answer_body": " You need to do the easy and fast  git commit --amend  if it's a private branch or  git commit -m 'Replace .class files with .java files'  if it's a shared or public branch. ", "question_id": 927358}, ""], [{"answer_votes": "31", "answer_comments": [" \"Working copy\"? Is this a Git concept? Isn't it an SVN concept? \u2013 Peter Mortensen  Jan 28 at 21:36 "], "answer_body": " Undo the Last Commit  There are tons of situations where you really want to undo that last commit into your code. E.g. because you'd like to restructure it extensively - or even discard it altogether!  In these cases, the \"reset\" command is your best friend:  $ git reset --soft HEAD~1  The above command (reset) will rewind your current HEAD branch to the specified revision. In our example above, we'd like to return to the one before the current revision - effectively making our last commit undone.  Note the --soft flag: this makes sure that the changes in undone revisions are preserved. After running the command, you'll find the changes as uncommitted local modifications in your working copy.  If you don't want to keep these changes, simply use the --hard flag. Be sure to only do this when you're sure you don't need these changes any more.  $ git reset --hard HEAD~1  ", "question_id": 927358}, ""], [{"answer_votes": "30", "answer_comments": null, "answer_body": " I got the commit ID from bitbucket and then did:  git checkout commitID .  Example:  git checkout 7991072 .  And it reverted it back up to that working copy of that commit. ", "question_id": 927358}, ""], [{"answer_votes": "26", "answer_comments": null, "answer_body": " In my case I committed and pushed to the wrong branch, so what I wanted was to have all my changes back so I can commit them to a new correct branch, so I did this:  On the same branch that you committed and pushed, if you type \"git status\" you wont't see anything new because you committed and pushed, now type:  git reset --soft HEAD~1  This will get all your changes(files) back in the stage area, now to get them back in the working directory(unstage) you just type:  git reset FILE  Where \"File\" is the file that you want to commit again. Now this FILE should be in the working directory(unstaged) with all the changes that you did. Now you can change to whatever branch that you want and commit the changes in that branch. Hope this helps other people that made the same mistake I did. Of course the initial branch that you committed is still there with all changes, but in my case that was ok, if it is not for you you can look for ways to revert that commit in that branch. ", "question_id": 927358}, ""], [{"answer_votes": "25", "answer_comments": null, "answer_body": " Use this command  git checkout -b old-state 0d1d7fc32 ", "question_id": 927358}, ""], [{"answer_votes": "25", "answer_comments": null, "answer_body": " You have several options to undo your last commit. \nHere are some of your options summarize into a single answer with code snippets  First of all you need to figure which are the \"wrong\" commits which you wish to discard. We will use git reflog to find it.   git reflog  You can always use the reflog as well.  git reflog will display any change which updated the HEAD and checking out the desired reflog entry will set the HEAD back to this commit.  Every time the HEAD is modified there will be a new entry in the reflog . The reflog is similar to unix history command and is kept locally on your machine.  git reflog\ngit checkout HEAD@{...}\n# or\ngit checkout <sha-1>  Using the checkout you can go back to any desired commit and you can create branch or any other options that git checkout will allow you to do.    git reset HEAD --hard <commit_id>  \"Move\" your head back to the desired commit. Git reset will checkout the desired commit content to your staging area and/or to your working directory based upon the value --hard/--soft/--mixed you choose to pick. --hard will update both stage area and working directory with the given  content and will \"detach\" any other commits beyond this point on your local branch.  If those commits are not part of any other branch they will become \"dangle\". \"dangle\" content means that there is a un-reachable content in your local repository which is not part of any other branch and can be removed or will be removed by the gc .  # This will destroy any local modifications.\n# Don't do it if you have uncommitted work you want to keep.\ngit reset --hard 0d1d7fc32\n\n# Alternatively, if there's work to keep:\ngit stash\ngit reset --hard 0d1d7fc32\ngit stash pop\n# This saves the modifications, then reapplies that patch after resetting.\n# You could get merge conflicts, if you've modified things which were\n# changed since the commit you reset to.   This schema illustrate which command does what. As you can see there reset && checkout modify the HEAD .  ", "question_id": 927358}, ""], [{"answer_votes": "24", "answer_comments": null, "answer_body": " Use this command:  git checkout -b old-state number_commit ", "question_id": 927358}, ""], [{"answer_votes": "22", "answer_comments": null, "answer_body": " You can always do a git checkout (SHA code) of the previous version and then commit again with the new code. ", "question_id": 927358}, ""], [{"answer_votes": "21", "answer_comments": null, "answer_body": " In order to get rid of (all the changes in) last commit, last 2 commits and last n commits:  git reset --hard HEAD~1\ngit reset --hard HEAD~2\n...\ngit reset --hard HEAD~n  And, to get rid of anything after a specific commit:  git reset --hard <commit sha>  e.g.,  git reset --hard 0d12345   PS: 1- Be careful, because of \"hard\" option, it deletes the local changes\n  in your repo as well and reverts to the previous mentioned commit. You\n  should run this if you are sure you messed up in your last commit(s)\n  and would like to go back in time.  2- Usually 7 letters of \"commit sha\" is enough, but in bigger\n  projects, you may need up to 12 letters to guarantee be unique. You\n  also can mention the whole 40 letters sha.  3- The above commands work in Github for Windows as well.  ", "question_id": 927358}, ""], [{"answer_votes": "21", "answer_comments": null, "answer_body": " Use:  git reset HEAD~1 --soft  Make changes, add, and commit the changes. ", "question_id": 927358}, ""], [{"answer_votes": "18", "answer_comments": null, "answer_body": " You just have to use a single command:  git reset --soft 'HEAD^'  It works to undo the last local commit to your Git repository. ", "question_id": 927358}, ""], [{"answer_votes": "17", "answer_comments": null, "answer_body": " Reference: How to undo last commit in Git?  If you have Git Extensions installed you can easily undo/revert any commit (you can download git extensions from here ).  Open Git Extensions, right click on the commit you want to revert then select \"Revert commit\".   A popup will be opened (see the screenshot below)   Select \"Automatically create a commit\" if you want to directly commit the reverted changes or if you want to manually commit the reverted changes keep the box un-selected and click on \"Revert this commit\" button. ", "question_id": 927358}, ""], [{"answer_votes": "15", "answer_comments": null, "answer_body": " Just use git reset --hard <last good SHA> to reset your changes and give new commit. You can also use git checkout -- <bad filename> . ", "question_id": 927358}, ""], [{"answer_votes": "14", "answer_comments": null, "answer_body": " You can undo your git commits in two ways:-\nFirst is you can use git revert, if you want to keep your commit history.  git revert HEAD~3\ngit revert <hashcode of commit>  Second is you can use git reset, which would delete all your commit history and bring your head to commit where you want it.  git reset <hashcode of commit>\ngit reset HEAD~3  You can also use --hard keyword if any of it start behaving otherwise. But , I would recommend until it's extremely necessary. ", "question_id": 927358}, ""], [{"answer_votes": "10", "answer_comments": null, "answer_body": " In IntelliJ IDEA you can just open Git Repository Log by pressing Alt + 9 , then right mouse button click at some tag from commits list and select: \"Reset Current Branch to Here...\" ", "question_id": 927358}, ""], [{"answer_votes": "10", "answer_comments": null, "answer_body": " Undo last commit:  git reset --soft HEAD^ or git reset --soft HEAD~  This will undo the last commit.  Here --soft means reset into staging.  HEAD~ or HEAD^ means to move to commit before HEAD.  Replace last commit to new commit:  git commit --amend -m \"message\"  It will replace the last commit with the new commit. ", "question_id": 927358}, ""], [{"answer_votes": "9", "answer_comments": null, "answer_body": "  Assuming you're working in Visual Studio, if you go in to you branch history and look at all of your commits, simply select the event prior to the commit you want to undo, right-click it, and select Revert .  Easy as that. ", "question_id": 927358}, ""], [{"answer_votes": "9", "answer_comments": null, "answer_body": " I have found this site which describes how to undo things that you have committed into the repository.  Some commands:  git commit --amend        # Change last commit\ngit reset HEAD~ --soft    # Undo last commit ", "question_id": 927358}, ""], [{"answer_votes": "8", "answer_comments": null, "answer_body": " Find the last commit hash code by seeing the log by :  git log  Then  git reset <the previous co> ", "question_id": 927358}, ""], [{"answer_votes": "8", "answer_comments": null, "answer_body": " HEAD:  Before reset commit we should know about HEAD... HEAD is nothing but your current state in your working directory.. it is represented by commit number...  git commmit:  Each changes assigned under commit which is represented by unique tag.. Commits can't be deleted. so if you want your last commit you can simply dive into it using git reset  you can dive into last commit using 2 method,  Method 1: ( if you dont know commit number but want to move onto very first)  git reset HEAD~1  #it will move your head to last commit  Method 2: ( if you know commit you simply reset onto your known commit)  git reset 0xab3 # commit number  Note: if you want to know recent commit try this, git log -p -1   here is the graphical representation,  ", "question_id": 927358}, ""], [{"answer_votes": "8", "answer_comments": null, "answer_body": " Here is site: Oh shit, git! .  Here are many recipes how to undo things in git. Some of them:   Oh shit, I need to change the message on my last commit!   git commit --amend\n# follow prompts to change the commit message   Oh shit, I accidentally committed something to master that should have been on a brand new branch!   # create a new branch from the current state of master\ngit branch some-new-branch-name\n# remove the commit from the master branch\ngit reset HEAD~ --hard\ngit checkout some-new-branch-name\n# your commit lives in this branch now :) ", "question_id": 927358}, ""], [{"answer_votes": "4", "answer_comments": null, "answer_body": " You can undo your commits from the local repository, please follow the below scenario.  In below image I checkout test branch (using Git command git checkout -b test ) as a local and check status (using Git command git status ) of local branch there is nothing to commit.   In the next image image you can see here I made few changes in Filter1.txt and added that file to stage area than commit my changes with some message (using Git command git commit -m \"Doing commit to test revert back\" ).  \"-m is for commit message\"   In the next image you can see your commits log whatever you have made commits (Using Git command git log ).   So in above image you can see commit id with each commit and with your commit message now whatever commit you want to revert back or undo copy that commit id and hit below Git command. git revert {\"paste your commit id\"} . Example:  git revert 9ca304ed12b991f8251496b4ea452857b34353e7   I have reverted back my last commit. Now if you check your Git status. You can see the modified file which is Filter1.txt and yet to commit.  ", "question_id": 927358}, ""], [{"answer_votes": "0", "answer_comments": null, "answer_body": " Try this, hard reset to previous commit where those files were not added, then:  git reset --hard <commit_hash>  Make sure you have a backup of your changes just in case, as it's a hard reset, which means they'll be lost (unless you stashed earlier) ", "question_id": 927358}, ""]], "question": {"question_title": "How to undo the most recent commits in Git?", "question_code": ["commit", "push"], "question_body": " I accidentally -ed wrong files to Git , but I haven't -ed the commit to the server yet.  How can I undo those commits from the local repository? "}, "time_now": "2018-04-26 18:06:22", "nltk_title_analyze_title_result": [[{"answer_votes": "25", "answer_comments": null, "answer_body": " You have several options to undo your last commit. \nHere are some of your options summarize into a single answer with code snippets  First of all you need to figure which are the \"wrong\" commits which you wish to discard. We will use git reflog to find it.   git reflog  You can always use the reflog as well.  git reflog will display any change which updated the HEAD and checking out the desired reflog entry will set the HEAD back to this commit.  Every time the HEAD is modified there will be a new entry in the reflog . The reflog is similar to unix history command and is kept locally on your machine.  git reflog\ngit checkout HEAD@{...}\n# or\ngit checkout <sha-1>  Using the checkout you can go back to any desired commit and you can create branch or any other options that git checkout will allow you to do.    git reset HEAD --hard <commit_id>  \"Move\" your head back to the desired commit. Git reset will checkout the desired commit content to your staging area and/or to your working directory based upon the value --hard/--soft/--mixed you choose to pick. --hard will update both stage area and working directory with the given  content and will \"detach\" any other commits beyond this point on your local branch.  If those commits are not part of any other branch they will become \"dangle\". \"dangle\" content means that there is a un-reachable content in your local repository which is not part of any other branch and can be removed or will be removed by the gc .  # This will destroy any local modifications.\n# Don't do it if you have uncommitted work you want to keep.\ngit reset --hard 0d1d7fc32\n\n# Alternatively, if there's work to keep:\ngit stash\ngit reset --hard 0d1d7fc32\ngit stash pop\n# This saves the modifications, then reapplies that patch after resetting.\n# You could get merge conflicts, if you've modified things which were\n# changed since the commit you reset to.   This schema illustrate which command does what. As you can see there reset && checkout modify the HEAD .  ", "question_id": 927358}, 38], [{"answer_votes": "338", "answer_comments": [" gitk --all $(git reflog | cut -c1-7)& may be helpful for finding the previous revision if you want to undo an '--amend' commit. \u2013 nobar  Oct 18 '14 at 23:38  ", " It should be noted that if you're attempting to remove secret information before pushing to a shared repository, doing a revert won't help you, because the information will still be in the history in the previous commit.  If you want to ensure the change is never visible to others you need to use git reset \u2013 Jherico  Sep 4 '15 at 4:52 ", " See also: stackoverflow.com/a/30598953 \u2013 nobar  Apr 5 '16 at 4:20 ", " I think 'private'/'public' would more correctly be 'local'/'remote'. \u2013 nobar  Mar 28 at 14:59 "], "answer_body": " How to fix the previous local commit  Use git-gui (or similar) to perform a git commit --amend . From the GUI you can add or remove individual files from the commit. You can also modify the commit message.  How to undo the previous local commit  Just reset your branch to the previous location (for example, using gitk or git rebase ). Then reapply your changes from a saved copy. After garbage collection in your local repository, it will be like the unwanted commit never happened. To do all of that in a single command, use git reset HEAD~1 .  Word of warning : Careless use of git reset is a good way to get your working copy into a confusing state. I recommend that Git novices avoid this if they can.  How to undo a public commit  Perform a reverse cherry pick ( git-revert ) to undo the changes.  If you haven't yet pulled other changes onto your branch, you can simply do...  git revert --no-edit HEAD  Then push your updated branch to the shared repository.  The commit history will show both commits, separately .   Advanced: Correction of private branch in public repository  This can be dangerous -- be sure you have a local copy of the branch to repush.  Also note: You don't want to do this if someone else may be working on the branch.  git push --delete (branch_name) ## remove public version of branch  Cleanup your branch locally then repush...  git push origin (branch_name)  In the normal case, you probably needn't worry about your private-branch commit history being pristine.  Just push a followup commit (see 'How to undo a public commit' above), and later, do a squash-merge to hide the history. ", "question_id": 927358}, 37], [{"answer_votes": "54", "answer_comments": null, "answer_body": " Usually, you want to undo a commit because you made a mistake and you want to fix it - essentially what the OP did when he asked the question. So really, you actually want to redo a commit.  Most of the answers here focus on the command line. While the command line is the best way to use Git when you're comfortable with it, its probably a bit alien to those coming from other version control systems to Git.  Here's how to do it using a GUI. If you have Git installed, you already have everything you need to follow these instructions.  NOTE: I will assume here that you realised the commit was wrong before you pushed it. If you don't know what pushing is, you probably haven't pushed, so carry on with the instructions. If you have pushed the faulty commit, the least risky way is just to follow up the faulty commit with a new commit that fixes things, the way you would do it in a version control system that does not allow you to rewrite history.  That said, here's how to fix your most recent fault commit using a GUI:   Navigate to your repository on the command line and start the gui with git gui  Choose \"Amend last commit\". You will see your last commit message, the files you staged and the files you didn't.  Now change things to how you want them to look and click Commit.  ", "question_id": 927358}, 37], [{"answer_votes": "18320", "answer_comments": [" And if the commit was to the wrong branch, you may git checkout theRightBranch with all the changes stages. As I just had to do. \u2013 Frank Shearar  Oct 5 '10 at 15:44 ", " If you're working in DOS, instead of git reset --soft HEAD^ you'll need to use git reset --soft HEAD~1 .  The ^ is a continuation character in DOS so it won't work properly.  Also, --soft is the default, so you can omit it if you like and just say git reset HEAD~1 . \u2013 Ryan Lundy  Apr 13 '11 at 14:15 ", " Also, in zsh you have to quote ^, so git reset --soft 'HEAD^' ... at least I did \u2013 jberryman  Oct 27 '11 at 18:24 ", " (Correction to what I wrote above; --mixed is the default. --mixed means to keep the changed files, but not keep them in the index. --soft would keep the changed files and keep them in the index as they were just before the changed commit.  Sorry for the confusion.) \u2013 Ryan Lundy  Nov 17 '11 at 2:40 ", " zsh users might get: zsh: no matches found: HEAD^ - you need to escape ^ i.e. git reset --soft HEAD\\^ \u2013 tnajdek  Feb 21 '13 at 17:47  "], "answer_body": " Undo a commit and redo  $ git commit -m \"Something terribly misguided\"              (1)\n$ git reset HEAD~                                           (2)\n<< edit files as necessary >>                               (3)\n$ git add ...                                               (4)\n$ git commit -c ORIG_HEAD                                   (5)   This is what you want to undo  This leaves your working tree (the state of your files on disk) unchanged but undoes the commit and leaves the changes you committed unstaged (so they'll appear as \"Changes not staged for commit\" in git status , and you'll need to add them again before committing). If you only want to add more changes to the previous commit, or change the commit message 1 , you could use git reset --soft HEAD~ instead, which is like git reset HEAD~ (where HEAD~ is the same as HEAD~1 ) but leaves your existing changes staged.  Make corrections to working tree files.  git add anything that you want to include in your new commit.  Commit the changes, reusing the old commit message. reset copied the old head to .git/ORIG_HEAD ; commit with -c ORIG_HEAD will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the -C option.    1 Note, however, that you don't need to reset to an earlier commit if you just made a mistake in your commit message . The easier option is to git reset (to upstage any changes you've made since) and then git commit --amend , which will open your default commit message editor pre-populated with the last commit message.  Beware however that if you have added any new changes to the index, using commit --amend will add them to your previous commit.  ---- Edit by Frank R. 2018-3-9  If pushed,  git push origin master --force ", "question_id": 927358}, 34], [{"answer_votes": "9502", "answer_comments": [" @dma_k, yes.  Or you could do git reset --hard HEAD^^ once.  I use the tilde (~) notation because the caret (^) notation doesn't work in DOS. \u2013 Ryan Lundy  Feb 25 '12 at 15:02 ", " Another nice tip: You can re-attach the branch to the commit that you removed it from with git branch -f <branch> <commit-id> . Saves having to re-create commits! \u2013 naught101  Jun 22 '12 at 13:11  ", " For a git beginner, it isn't obvious what the difference is between the last two options (--soft and the one above it). Mentioning the index doesn't help, we don't really know what that means yet. @nessur's connection between soft and Ctrl-Z really helped! But I still don't quite understand the difference between the two options. \u2013 Stomp  Jun 26 '12 at 15:56 ", " It's much better to be told 'why' something works, than just to be told the answer. Kudos to this description - it helped be 'get' git. \u2013 Chris Nash  Jul 3 '12 at 19:13 ", " Missing a crucial point: If the said commit was previously 'pushed' to the remote, any 'undo' operation, no matter how simple, will cause enormous pain and suffering to the rest of the users who have this commit in their local copy, when they do a 'git pull' in the future.  So, if the commit was already 'pushed', do this instead:      git revert <bad-commit-sha1-id>     git push origin : \u2013 FractalSpace  Nov 8 '13 at 23:43  "], "answer_body": " Undoing a commit is a little scary if you don't know how it works.  But it's actually amazingly easy if you do understand.  Say you have this, where C is your HEAD and (F) is the state of your files.  (F)\nA-B-C\n    \u2191\n  master  You want to nuke commit C and never see it again .  You do this:  git reset --hard HEAD~1  The result is:  (F)\nA-B\n  \u2191\nmaster  Now B is the HEAD.  Because you used --hard , your files are reset to their state at commit B.  Ah, but suppose commit C wasn't a disaster, but just a bit off.  You want to undo the commit but keep your changes for a bit of editing before you do a better commit.  Starting again from here, with C as your HEAD:  (F)\nA-B-C\n    \u2191\n  master  You can do this, leaving off the --hard :  git reset HEAD~1  In this case the result is:  (F)\nA-B-C\n  \u2191\nmaster  In both cases, HEAD is just a pointer to the latest commit.  When you do a git reset HEAD~1 , you tell Git to move the HEAD pointer back one commit.  But (unless you use --hard ) you leave your files as they were.  So now git status shows the changes you had checked into C.  You haven't lost a thing!  For the lightest touch, you can even undo your commit but leave your files and your index :  git reset --soft HEAD~1  This not only leaves your files alone, it even leaves your index alone.  When you do git status , you'll see that the same files are in the index as before.  In fact, right after this command, you could do git commit and you'd be redoing the same commit you just had.  One more thing: Suppose you destroy a commit as in the first example, but then discover you needed it after all ?  Tough luck, right?  Nope, there's still a way to get it back.  Type git reflog and you'll see a list of (partial) commit shas that you've moved around in.  Find the commit you destroyed, and do this:  git checkout -b someNewBranchName shaYouDestroyed  You've now resurrected that commit.  Commits don't actually get destroyed in Git for some 90 days, so you can usually go back and rescue one you didn't mean to get rid of. ", "question_id": 927358}, 31], [{"answer_votes": "1647", "answer_comments": [" I found this answer the clearest. git revert HEAD^ is not the previous, is the previous of the previous. I did : git revert HEAD and then push again and it worked :) \u2013 nacho4d  Jul 14 '11 at 8:32  ", " @riezebosch: your warning is in the wrong place. THIS answer doesn't mess up things, cause it correctly creates a new commit 102: \"restoring the file I removed on accident\" \u2013 rubo77  Jan 6 '14 at 8:37  ", " This was most helpful to me. I needed to know how to revert a public commit. Thanks! \u2013 FearlessFuture  Jan 25 at 22:25 "], "answer_body": " This took me a while to figure out, so maybe this will help someone...  There are two ways to \"undo\" your last commit, depending on whether or not you have already made your commit public (pushed to your remote repository):  How to undo a local commit  Let's say I committed locally, but now want to remove that commit.  git log\n    commit 101: bad commit    # latest commit, this would be called 'HEAD'\n    commit 100: good commit   # second to last commit, this is the one we want  To restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD :  git reset --soft HEAD^     # use --soft if you want to keep your changes\ngit reset --hard HEAD^     # use --hard if you don't care about keeping the changes you made  Now git log will show that our last commit has been removed.  How to undo a public commit  If you have already made your commits public, you will want to create a new commit which will \"revert\" the changes you made in your previous commit (current HEAD).  git revert HEAD  Your changes will now be reverted and ready for you to commit:  git commit -m 'restoring the file I removed by accident'\ngit log\n    commit 102: restoring the file I removed by accident\n    commit 101: removing a file we don't need\n    commit 100: adding a file that we need  For more info, check out Git Basics - Undoing Things ", "question_id": 927358}, 30], [{"answer_votes": "73", "answer_comments": [" git reset --hard HEAD~1 is too dangerous ! This will not just 'cancel last commit', but will revert repo completely back to the previous commit. So you will LOOSE all changes committed in the last commit! \u2013 Arnis Juraga  Mar 21 '17 at 12:09  ", " You right, to undo this you can use git push -f <remote> HEAD@{1}:<branch> \u2013 Benny  Apr 24 '17 at 13:07 "], "answer_body": " There are many ways to do it:  Git command to undo the last commit/ previous commits:  Basic command to revert the commit in Git is:  $ git reset --hard <COMMIT -ID>  or  $ git reset --hard HEAD~<n>  COMMIT-ID : ID for the commit  n: is number of last commits you want to revert  You can get the commit id as shown below:  $ **git log --oneline**\n\nd81d3f1 function to subtract two numbers\n\nbe20eb8 function to add two numbers\n\nbedgfgg function to mulitply two numbers  where d81d3f1 and be20eb8 are commit id.  Now let's see some cases:  Suppose you want to revert the last commit 'd81d3f1'. Below are the ways:  $ git reset --hard d81d3f1  or  $ git reset --hard HEAD~1  Suppose you want to revert the commit 'be20eb8'. Below are the way:  $ git reset --hard be20eb8  For more detailed information you can refer and try out some other commands too for resetting head to a specified state:  $ git reset --help ", "question_id": 927358}, 24], [{"answer_votes": "655", "answer_comments": null, "answer_body": " To change the last commit  Replace the files in the index:  git rm --cached *.class\ngit add *.java  Then, if it's a private branch, amend the commit:  git commit --amend  Or, if it's a shared branch, make a new commit:  git commit -m 'Replace .class files with .java files'   ( to change a previous commit , use the awesome interactive rebase )   ProTip\u2122: \u00a0 Add *.class to a gitignore to stop this happening again.   To revert a commit  Amending a commit is the ideal solution if you need to change the last commit, but a more general solution is reset .  You can reset git to any commit with:  git reset @~N  Where N is the number of commits before HEAD , and @~ resets to the previous commit.  So, instead of amending the commit, you could use:  git reset @~\ngit add *.java\ngit commit -m \"Add .java files\"  Check out git help reset , specifically the sections on --soft  --mixed and --hard , for a better understanding of what this does.  Reflog  If you mess up, you can always use the reflog to find dropped commits:  $ git reset @~\n$ git reflog\nc4f708b HEAD@{0}: reset: moving to @~\n2c52489 HEAD@{1}: commit: added some .class files\n$ git reset 2c52489\n... and you're back where you started  ", "question_id": 927358}, 23], [{"answer_votes": "26", "answer_comments": null, "answer_body": " In my case I committed and pushed to the wrong branch, so what I wanted was to have all my changes back so I can commit them to a new correct branch, so I did this:  On the same branch that you committed and pushed, if you type \"git status\" you wont't see anything new because you committed and pushed, now type:  git reset --soft HEAD~1  This will get all your changes(files) back in the stage area, now to get them back in the working directory(unstage) you just type:  git reset FILE  Where \"File\" is the file that you want to commit again. Now this FILE should be in the working directory(unstaged) with all the changes that you did. Now you can change to whatever branch that you want and commit the changes in that branch. Hope this helps other people that made the same mistake I did. Of course the initial branch that you committed is still there with all changes, but in my case that was ok, if it is not for you you can look for ways to revert that commit in that branch. ", "question_id": 927358}, 23], [{"answer_votes": "4", "answer_comments": null, "answer_body": " You can undo your commits from the local repository, please follow the below scenario.  In below image I checkout test branch (using Git command git checkout -b test ) as a local and check status (using Git command git status ) of local branch there is nothing to commit.   In the next image image you can see here I made few changes in Filter1.txt and added that file to stage area than commit my changes with some message (using Git command git commit -m \"Doing commit to test revert back\" ).  \"-m is for commit message\"   In the next image you can see your commits log whatever you have made commits (Using Git command git log ).   So in above image you can see commit id with each commit and with your commit message now whatever commit you want to revert back or undo copy that commit id and hit below Git command. git revert {\"paste your commit id\"} . Example:  git revert 9ca304ed12b991f8251496b4ea452857b34353e7   I have reverted back my last commit. Now if you check your Git status. You can see the modified file which is Filter1.txt and yet to commit.  ", "question_id": 927358}, 23], [{"answer_votes": "31", "answer_comments": [" \"Working copy\"? Is this a Git concept? Isn't it an SVN concept? \u2013 Peter Mortensen  Jan 28 at 21:36 "], "answer_body": " Undo the Last Commit  There are tons of situations where you really want to undo that last commit into your code. E.g. because you'd like to restructure it extensively - or even discard it altogether!  In these cases, the \"reset\" command is your best friend:  $ git reset --soft HEAD~1  The above command (reset) will rewind your current HEAD branch to the specified revision. In our example above, we'd like to return to the one before the current revision - effectively making our last commit undone.  Note the --soft flag: this makes sure that the changes in undone revisions are preserved. After running the command, you'll find the changes as uncommitted local modifications in your working copy.  If you don't want to keep these changes, simply use the --hard flag. Be sure to only do this when you're sure you don't need these changes any more.  $ git reset --hard HEAD~1  ", "question_id": 927358}, 20], [{"answer_votes": "189", "answer_comments": null, "answer_body": " Just reset it doing the command below using git :  git reset --soft HEAD~1  Explain: what git reset does, it's basically reset to any commit you'd like to go back to, then if you combine it with --soft key, it will go back, but keep the  changes in your file(s), so you get back to the stage which the file was just added, HEAD is the head of the branch and if you combine with ~1 (in this case you also use HEAD^ ), it will go back only one commit which what you want...  I create the steps in the image below in more details for you, including all steps that may happens in real situations and committing the code:  ", "question_id": 927358}, 18], [{"answer_votes": "21", "answer_comments": null, "answer_body": " In order to get rid of (all the changes in) last commit, last 2 commits and last n commits:  git reset --hard HEAD~1\ngit reset --hard HEAD~2\n...\ngit reset --hard HEAD~n  And, to get rid of anything after a specific commit:  git reset --hard <commit sha>  e.g.,  git reset --hard 0d12345   PS: 1- Be careful, because of \"hard\" option, it deletes the local changes\n  in your repo as well and reverts to the previous mentioned commit. You\n  should run this if you are sure you messed up in your last commit(s)\n  and would like to go back in time.  2- Usually 7 letters of \"commit sha\" is enough, but in bigger\n  projects, you may need up to 12 letters to guarantee be unique. You\n  also can mention the whole 40 letters sha.  3- The above commands work in Github for Windows as well.  ", "question_id": 927358}, 18], [{"answer_votes": "106", "answer_comments": null, "answer_body": " There are two main scenarios  You haven't pushed the commit yet  If the problem was extra files you commited (and you don't want those on repository), you can remove them using git rm and then commiting with --amend  git rm <pathToFile>  You can also remove entire directories with -r , or even combine with other Bash commands  git rm -r <pathToDirectory>\ngit rm $(find -name '*.class')  After removing the files, you can commit, with --amend option  git commit --amend -C HEAD # the -C option is to use the same commit message  This will rewrite your recent local commit removing the extra files, so, these files will never be sent on push and also will be removed from your local .git repository by GC.  You already pushed the commit  You can apply the same solution of the other scenario and then doing git push with the -f option, but it is not recommended since it overwrites the remote history with a divergent change (it can mess your repository).  Instead, you have to do the commit without --amend (remember this about -amend`: That option rewrites the history on the last commit). ", "question_id": 927358}, 17], [{"answer_votes": "17", "answer_comments": null, "answer_body": " Reference: How to undo last commit in Git?  If you have Git Extensions installed you can easily undo/revert any commit (you can download git extensions from here ).  Open Git Extensions, right click on the commit you want to revert then select \"Revert commit\".   A popup will be opened (see the screenshot below)   Select \"Automatically create a commit\" if you want to directly commit the reverted changes or if you want to manually commit the reverted changes keep the box un-selected and click on \"Revert this commit\" button. ", "question_id": 927358}, 16], [{"answer_votes": "418", "answer_comments": [" @SMR, In your example, all are pointing into current HEAD only. HEAD^ = HEAD^1. As well as HEAD^1 = HEAD~1.  When you use HEAD~2, there is a difference between ~ and ^ symbols. If you use ~2 means \u201cthe first parent of the first parent,\u201d or \u201cthe grandparent\u201d. \u2013 Madhan Ayyasamy  Dec 14 '15 at 15:34  ", " clear and easy to understand, save my night ! \u2013 Vladimir Ch  Mar 14 at 19:10 ", " Apparently, I accidentally downvoted this answer, and it's too late for me to un-downvote it. Apologies. \u2013 Matt  Apr 9 at 17:20 "], "answer_body": " If you are planning undoing a local commit entirely, whatever you changes you did on the commit, and if you don't worry anything about that, just do the following command.  git reset --hard HEAD^1  (This command will ignore your entire commit and your changes will be lost completely from your local working tree). If you want to undo your commit, but you want your changes in the staging area (before commit just like after git add ) then do the following command.  git reset --soft HEAD^1  Now your committed files comes into the staging area. Suppose if you want to unstage the files, because you need to edit some wrong conent, then do the following command  git reset HEAD  Now committed files come from the staged area into the unstaged area. Now files are ready to edit, so whatever you changes, you want go edit and added it and make a fresh/new commit.  More ", "question_id": 927358}, 15], [{"answer_votes": "191", "answer_comments": null, "answer_body": " How to undo the last Git commit?  To restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD.   If you don't want to keep your changes that you made:  git reset --hard HEAD^  If you want to keep your changes:  git reset --soft HEAD^   Now check your git log. It will show that our last commit has been removed. ", "question_id": 927358}, 15], [{"answer_votes": "283", "answer_comments": [" I'm in the 2nd case, but when I do \"git revert HEAD\" it says \"error: Commit [ID] is a merge but no -m option was given.  fatal: revert failed\".  Any suggestions? \u2013 metaforge  Nov 12 '14 at 19:36 ", " Probably worth mentioning that instead of HEAD~1 you could use the actual hash as displayed by git log --stat or by git reflog - useful when you need to 'undo' more than one commit. \u2013 ccpizza  Dec 7 '14 at 0:38 "], "answer_body": " If you have committed junk but not pushed,  git reset --soft HEAD~1   HEAD~1 is a shorthand for the commit before head. Alternatively you can refer to the SHA-1 of the hash if you want to reset to. --soft option will delete the commit but it will leave all your changed files \"Changes to be committed\", as git status would put it.  If you want to get rid of any changes to tracked files in the working tree since the commit before head use \" --hard \" instead.   OR   If you already pushed and someone pulled which is usually my case, you can't use git reset . You can however do a git revert ,   git revert HEAD   This will create a new commit that reverses everything introduced by the accidental commit.  ", "question_id": 927358}, 14], [{"answer_votes": "128", "answer_comments": null, "answer_body": " Another way:  Checkout the branch you want to revert, then reset your local working copy back to the commit that you want to be the latest one on the remote server (everything after it will go bye-bye). To do this, in SourceTree I right-clicked on the and selected \"Reset BRANCHNAME to this commit\".  Then navigate to your repository's local directory and run this command:  git -c diff.mnemonicprefix=false -c core.quotepath=false push -v -f --tags REPOSITORY_NAME BRANCHNAME:BRANCHNAME  This will erase all commits after the current one in your local repository but only for that one branch. ", "question_id": 927358}, 14], [{"answer_votes": "36", "answer_comments": null, "answer_body": " VISUAL STUDIO USERS (2015, etc.)  If you cannot synchronise in Visual Studio as you are not allowed to push to a branch like \"development\" then as much as I tried, in Visual Studio NEITHER the REVERT NOR the RESET (hard or soft) would work.  Per the answer with TONS OF VOTES:  Use this at the command prompt of root of your project to nuke anything that will attempt to get pushed:  git reset --hard HEAD~1  Backup or zip your files just in case you don't wish to lose any work, etc... ", "question_id": 927358}, 12], [{"answer_votes": "8", "answer_comments": null, "answer_body": " Here is site: Oh shit, git! .  Here are many recipes how to undo things in git. Some of them:   Oh shit, I need to change the message on my last commit!   git commit --amend\n# follow prompts to change the commit message   Oh shit, I accidentally committed something to master that should have been on a brand new branch!   # create a new branch from the current state of master\ngit branch some-new-branch-name\n# remove the commit from the master branch\ngit reset HEAD~ --hard\ngit checkout some-new-branch-name\n# your commit lives in this branch now :) ", "question_id": 927358}, 12], [{"answer_votes": "382", "answer_comments": [" Rewriting history on a shared repository is generally a very bad idea.  I assume you know what you're doing, I just hope future readers do too. \u2013 Brad Koch  Dec 7 '12 at 16:02  ", " Yes rollback is dangerous. Make sure that your working copy is in the desired state before you push. When pushing then the unwanted commits gets deleted permanently. \u2013 neoneye  Dec 8 '12 at 14:14 ", " \"Just like in the real world, if you want to rewrite history, you need a conspiracy: everybody has to be 'in' on the conspiracy (at least everybody who knows about the history, i.e. everybody who has ever pulled from the branch).\" Source: stackoverflow.com/a/2046748/334451 \u2013 Mikko Rantalainen  Aug 7 '13 at 10:10 ", " fantastic. This worked like a charm. There should be a git option for independently working developers - where one can use GitX, or a delete button next to a commit, and a confirmation - so this process is not so enigmatic :) \u2013 zero_cool  Jun 20 '14 at 15:31 "], "answer_body": " I wanted to undo the lastest 5 commits in our shared repository. I looked up the revision id that I wanted to rollback to. Then I typed in the following.  prompt> git reset --hard 5a7404742c85\nHEAD is now at 5a74047 Added one more page to catalogue\nprompt> git push origin master --force\nTotal 0 (delta 0), reused 0 (delta 0)\nremote: bb/acl: neoneye is allowed. accepted payload.\nTo git@bitbucket.org:thecompany/prometheus.git\n + 09a6480...5a74047 master -> master (forced update)\nprompt> ", "question_id": 927358}, 11], [{"answer_votes": "44", "answer_comments": null, "answer_body": " Just undo the last commit:  git reset --soft HEAD~  Or undo the time before last time commit:  git reset --soft HEAD~2  Or undo any previous commit:  git reset --soft <commitID>  (you can get the commitID using git reflog )  When you undo a previous commit, remember to clean the workplace with  git clean  More details can be found in the docs: git-reset ", "question_id": 927358}, 11], [{"answer_votes": "1590", "answer_comments": [" Does this work when I did a git commit --amend and what I really meant to do is a git commit ? \u2013 dbm  May 18 '11 at 13:07 ", " @dbm, if you accidentally amended, use git reset --soft <oldref> , where oldref is the commit ID before the amend. You can use git reflog to identify the old commit ID. This will undo the effects of the amend, but leave changes staged. Then just do git commit to commit as a regular commit. \u2013 bdonlan  May 18 '11 at 14:20 ", " @Dennis, git commit --amend turns the current tree (ie, staged changes) into a commit, overwriting current HEAD. After that point, they're not considered staged anymore because they're part of the commit (ie, git diff --cached is blank), but they're not \"removed\" or \"lost\". \u2013 bdonlan  Feb 1 '12 at 3:08 "], "answer_body": " Add/remove files to get things the way you want:  git rm classdir\ngit add sourcedir  Then amend the commit:  git commit --amend  The previous, erroneous commit will be edited to reflect the new index state - in other words, it'll be like you never made the mistake in the first place.  Note that you should only do this if you haven't pushed yet. If you have pushed, then you'll just have to commit a fix normally. ", "question_id": 927358}, 10], [{"answer_votes": "38", "answer_comments": null, "answer_body": " A Typical Git Cycle  In speaking of Git-related commands in the previous answers, I would like to share my typical Git cycles with all readers which may helpful. Here is how I work with Git,   Cloning the first time from the remote server  git clone $project  Pulling from remote (when I don't have a pending local commit to push)  git pull  Adding a new local file1 into $to_be_committed_list (just imagine $to_be_committed_list means staged area)  git add $file1  Removing mistakenly added file2 from $to_be_committed_list (assume that file2 is added like step 3, which I didn't want)  git reset $file2  Committing file1 which is in $to_be_committed_list  git commit -m \"commit message description\"  Syncing local commit with remote repository before pushing  git pull --rebase  Resolving when conflict occurs prerequisite configure mergetool  git mergetool #resolve merging here, also can manually merge  Adding conflict-resolved files, let's say file1 :  git add $file1  Continuing my previous rebase command  git rebase --continue  Pushing ready and already synced last local commit  git push origin head:refs/for/$branch # branch = master, dev, etc.  ", "question_id": 927358}, 10], [{"answer_votes": "27", "answer_comments": null, "answer_body": " Suppose you made a wrong commit locally and pushed it to remote repo. You can undo the mess with these two commands.  First we need to correct our local repo by going back to the commit that we desire:  git reset --hard <previous good commit id where you want local repo to go>  Now we forcefully push this good commit on the remote repo by using this command:  git push --force-with-lease  The 'with-lease' version of the force option will prevent accidental deletion of new commits you do not know about (i.e. coming from another source since your last pull). ", "question_id": 927358}, 10], [{"answer_votes": "834", "answer_comments": [" \"--hard\" will get rid of the modified .java files in the working directory that he wanted to commit. \u2013 Esko Luontola  May 29 '09 at 18:26 ", " You can \"git stash save\" working copy changes, do a hard reset and then \"git stash pop\" to get them back, though I suppose a soft reset would be simpler. \u2013 Asad R.  Apr 15 '11 at 13:33 ", " git commit -a -m \"\" or git commit -am \"\" naturally! :] \u2013 trejder  Jun 21 '14 at 16:31 ", " Another 'shortcut' use of stash; if you want to unstage everything (undo git add), just git stash , then git stash pop \u2013 seanriordan08  Dec 8 '15 at 22:30 "], "answer_body": " git rm yourfiles/*.class\ngit commit -a -m \"deleted all class files in folder 'yourfiles'\"  or  git reset --hard HEAD~1  Warning: The above command will permanently remove the modifications to the .java files (and any other files) that you wanted to commit.  The hard reset to HEAD-1 will set your working copy to the state of the commit before your wrong commit. ", "question_id": 927358}, 9], [{"answer_votes": "413", "answer_comments": null, "answer_body": " If you have Git Extras installed, you can run git undo to undo the latest commit. git undo 3 will undo the last 3 commits. ", "question_id": 927358}, 9], [{"answer_votes": "49", "answer_comments": [" The very useful description about differences --soft VS --hard  atlassian.com/git/tutorials/\u2026 \u2013 Eugen Konkov  Dec 15 '16 at 16:29 ", " One doesn't really lose the commits on a --hard reset as they will be available in the ref log for 30 days git reflog . \u2013 Todd  Sep 11 '17 at 14:10 "], "answer_body": " WHAT TO USE, reset --soft or reset --hard ?  I am just adding two cents for @Kyralessa's answer:  If you are unsure what to use go for --soft (I used this convention to remember it -- s oft for safe).  Why ?  If you choose --hard by mistake you will LOSE your changes as it wasn't before.\nIf you choose --soft by mistake you can achieve the same results of --hard by applying additional commands  git reset HEAD file.html\ngit checkout -- file.html  Full example  echo \"some changes...\" > file.html\ngit add file.html\ngit commit -m \"wrong commit\"\n\n# I need to reset\ngit reset --hard HEAD~1 (cancel changes)\n# OR\ngit reset --soft HEAD~1 # Back to staging\ngit reset HEAD file.html # back to working directory\ngit checkout -- file.html # cancel changes  Credits goes to @Kyralessa. ", "question_id": 927358}, 9], [{"answer_votes": "42", "answer_comments": null, "answer_body": " Think we have code.txt file.\nWe make some changes on it and commit. We can undo this commit in three ways , but first you should know what is the staged file...\nAn staged file is a file that ready to commit and if you run git status this file will be shown with green color and if this is not staged for commit will be shown with red color:   It means if you commit your change, your changes on this file is not saved.\nYou can add this file in your stage with git add code.txt and then commit your change:   Undo last commit:   Now if we want just undo commit without any other changes, we can use  git reset --soft HEAD^    If we want undo commit and its changes ( THIS IS DANGEROUS, because your change will lost ), we can use  git reset --hard HEAD^   And if we want undo commit and remove changes from stage, we can use  git reset --mixed HEAD^ or in a short form git reset HEAD^   ", "question_id": 927358}, 9], [{"answer_votes": "9", "answer_comments": null, "answer_body": "  Assuming you're working in Visual Studio, if you go in to you branch history and look at all of your commits, simply select the event prior to the commit you want to undo, right-click it, and select Revert .  Easy as that. ", "question_id": 927358}, 9], [{"answer_votes": "9", "answer_comments": null, "answer_body": " For the sake of completeness, I will give the one glaringly obvious method that was overlooked by the previous answers.  Since the commit was not pushed, the remote was unchanged, so:   Delete the local repo.  Clone the remote repo.   This is sometimes necessary if your fancy git client goes bye-bye. Don't forget to re-commit your saved changes since the last push. ", "question_id": 927358}, 9], [{"answer_votes": "367", "answer_comments": null, "answer_body": " I prefer to use git rebase -i for this job, because a nice list pops up where I can choose the commits to get rid of. It might not be as direct as some other answers here, but it just feels right .  Choose how many commits you want to list, then invoke like this (to enlist last three)  git rebase -i HEAD~3  Sample list  pick aa28ba7 Sanity check for RtmpSrv port\npick c26c541 RtmpSrv version option\npick 58d6909 Better URL decoding support  Then git will remove commits for any line that you remove. ", "question_id": 927358}, 8], [{"answer_votes": "158", "answer_comments": null, "answer_body": " Use reflog to find a correct state  git reflog   REFLOG BEFORE RESET  Select the correct reflog (f3cb6e2 in my case) and type  git reset --hard f3cb6e2  After that the repo HEAD will be reset to that HEADid  LOG AFTER RESET  Finally the reflog looks like the picture below   REFLOG FINAL ", "question_id": 927358}, 7], [{"answer_votes": "124", "answer_comments": null, "answer_body": " Undo last commit:  git reset --soft HEAD^ or git reset --soft HEAD~  This will undo the last commit.  Here --soft means reset into staging.  HEAD~ or HEAD^ means to move to commit before HEAD.   Replace last commit to new commit:  git commit --amend -m \"message\"  It will replace the last commit with the new commit. ", "question_id": 927358}, 7], [{"answer_votes": "79", "answer_comments": null, "answer_body": " This article has an excellent explanation as to how to go about various scenarios (where a commit has been done as well as the push OR just a commit, before the push):  http://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit.html  From the article, the easiest command I saw to revert a previous commit by its commit id , was:  git revert dd61ab32 ", "question_id": 927358}, 7], [{"answer_votes": "10", "answer_comments": null, "answer_body": " Undo last commit:  git reset --soft HEAD^ or git reset --soft HEAD~  This will undo the last commit.  Here --soft means reset into staging.  HEAD~ or HEAD^ means to move to commit before HEAD.  Replace last commit to new commit:  git commit --amend -m \"message\"  It will replace the last commit with the new commit. ", "question_id": 927358}, 7], [{"answer_votes": "41", "answer_comments": [" Be extra careful when reverting merge commits. You may lose your commits. Read about what Linus says about that: kernel.org/pub/software/scm/git/docs/howto/\u2026 \u2013 Eugen Konkov  Dec 15 '16 at 16:25  "], "answer_body": " To undo your local commit you use git reset <file> . Also that tutorial is very helpful to show you how it works.  Alternatively, you can use git revert <commit> : reverting should be used when you want to add another commit that rolls back the changes (but keeps them in the project history). ", "question_id": 927358}, 6], [{"answer_votes": "22", "answer_comments": null, "answer_body": " Remove a wrong commit that is already pushed to Github  git push origin +(previous good commit id):(branch name)  Please specify the last good commit id you would like to reset back in Github.  For example. If latest commit id is wrong then specify the previous commit id in above git command with branch name.  You can get previous commit id using git log ", "question_id": 927358}, 6], [{"answer_votes": "18", "answer_comments": null, "answer_body": " You just have to use a single command:  git reset --soft 'HEAD^'  It works to undo the last local commit to your Git repository. ", "question_id": 927358}, 6], [{"answer_votes": "8", "answer_comments": null, "answer_body": " HEAD:  Before reset commit we should know about HEAD... HEAD is nothing but your current state in your working directory.. it is represented by commit number...  git commmit:  Each changes assigned under commit which is represented by unique tag.. Commits can't be deleted. so if you want your last commit you can simply dive into it using git reset  you can dive into last commit using 2 method,  Method 1: ( if you dont know commit number but want to move onto very first)  git reset HEAD~1  #it will move your head to last commit  Method 2: ( if you know commit you simply reset onto your known commit)  git reset 0xab3 # commit number  Note: if you want to know recent commit try this, git log -p -1   here is the graphical representation,  ", "question_id": 927358}, 6], [{"answer_votes": "145", "answer_comments": null, "answer_body": " \"Reset the working tree to the last commit\"  git reset --hard HEAD^  \"Clean unknown files from the working tree\"  git clean  see - Git Quick Reference  NOTE: This command will delete your previous commit, so use with caution! git reset --hard is safer \u2013 ", "question_id": 927358}, 5], [{"answer_votes": "14", "answer_comments": null, "answer_body": " You can undo your git commits in two ways:-\nFirst is you can use git revert, if you want to keep your commit history.  git revert HEAD~3\ngit revert <hashcode of commit>  Second is you can use git reset, which would delete all your commit history and bring your head to commit where you want it.  git reset <hashcode of commit>\ngit reset HEAD~3  You can also use --hard keyword if any of it start behaving otherwise. But , I would recommend until it's extremely necessary. ", "question_id": 927358}, 5], [{"answer_votes": "238", "answer_comments": null, "answer_body": " On SourceTree (GUI for GitHub), you may right-click the commit and do a 'Reverse Commit'. This should undo your changes.  On the terminal:  You may alternatively use:  git revert  Or:  git reset --soft HEAD^ # Use --soft if you want to keep your changes.\ngit reset --hard HEAD^ # Use --hard if you don't care about keeping your changes. ", "question_id": 927358}, 4], [{"answer_votes": "69", "answer_comments": [" After git reset --soft HEAD~1 , if you need to unstage files, use: git reset \u2013 MKatleast3  Feb 23 '17 at 0:32 "], "answer_body": " If you want remove files in the last commit, you can use this:  git reset --hard HEAD~1  And if need files in the last commit, you can use this:  git reset --soft HEAD~1 ", "question_id": 927358}, 4], [{"answer_votes": "224", "answer_comments": [" I needed to write git reset --soft \"HEAD^\" with double quotes, because I write it from Windows command prompt. \u2013 Ena  Apr 23 '14 at 9:13 ", " It should work without any quotes. \u2013 jkulak  Nov 10 '16 at 19:19 "], "answer_body": " A single command:  git reset --soft 'HEAD^'  It works great to undo the last local commit! ", "question_id": 927358}, 3], [{"answer_votes": "120", "answer_comments": null, "answer_body": " In my case I accidentally committed some files I did not want to. So I did the following and it worked:  git reset --soft HEAD^\ngit rm --cached [files you do not need]\ngit add [files you need]\ngit commit -c ORIG_HEAD  Verify the results with gitk or git log --stat ", "question_id": 927358}, 3], [{"answer_votes": "105", "answer_comments": null, "answer_body": " Use SourceTree (graphical tool for Git) to see your commits and tree. You can manually reset it directly by right clicking it. ", "question_id": 927358}, 3], [{"answer_votes": "10", "answer_comments": null, "answer_body": " In IntelliJ IDEA you can just open Git Repository Log by pressing Alt + 9 , then right mouse button click at some tag from commits list and select: \"Reset Current Branch to Here...\" ", "question_id": 927358}, 3], [{"answer_votes": "9", "answer_comments": null, "answer_body": " I have found this site which describes how to undo things that you have committed into the repository.  Some commands:  git commit --amend        # Change last commit\ngit reset HEAD~ --soft    # Undo last commit ", "question_id": 927358}, 3], [{"answer_votes": "8", "answer_comments": null, "answer_body": " Find the last commit hash code by seeing the log by :  git log  Then  git reset <the previous co> ", "question_id": 927358}, 3], [{"answer_votes": "281", "answer_comments": [" Should be marked as answer, because you can specify which SHA you want. \u2013 Belfield  Jul 28 '17 at 10:49 ", " What if you do not use \"<commit_id>\" and simply use \"git reset --hard\"? I typically just want to get rid of my latest updates that I have not committed yet and got back to the latest commit I made, and I always use \"git reset --hard\". \u2013 Jaime Montoya  Sep 27 '17 at 23:30 ", " @JaimeMontoya To undo latest changes you can use git reset --hard , but if you have to hard remove last \"n\" commits you specify a SHA \u2013 poorva  Sep 28 '17 at 13:10 ", " Really like -f . This is what other answers lack \u2013 FreeLightman  Mar 1 at 8:58 "], "answer_body": " If you want to permanently undo it and you have cloned some repository  The commit id can be seen by  git log  Then you can do -  git reset --hard <commit_id>\n\ngit push origin <branch_name> -f ", "question_id": 927358}, 2], [{"answer_votes": "122", "answer_comments": null, "answer_body": " Type git log and find the last commit hash code and then enter:  git reset <the previous co> ", "question_id": 927358}, 2], [{"answer_votes": "85", "answer_comments": [" Maybe you could at a note/warning that his command will throw away the commit and the changes in the working directory without asking any further. \u2013 cr7pt0gr4ph7  Nov 24 '14 at 22:35  ", " If you happen to do this by accident, not all is lost, though. See stackoverflow.com/questions/10099258/\u2026 , stackoverflow.com/questions/15479501/\u2026 and stackoverflow.com/questions/7374069/undo-git-reset-hard/7376959 . \u2013 cr7pt0gr4ph7  Nov 24 '14 at 22:40 ", " Use --soft to keep your changes as uncommitted changes , --hard to nuke the commit completely and revert back by one. Remember to do such operations only on changes, that are not pushed yet. \u2013 Yunus Nedim Mehel  Mar 9 '15 at 9:11 ", " @Zaz: You are right; maybe I should have clarified that. Only files/changes that have been either added to index (/staged) or have been committed can possibly be recovered. Uncommitted, unstaged changes are , as you said, completely thrown away by git reset --hard . \u2013 cr7pt0gr4ph7  Sep 13 '16 at 21:17 ", " As a sidenote: Everytime a file is staged, git stores its contents in its object database. The stored contents are only removed when garbage collection is executed. It is therefore possible to recover the last staged version of a file that was not currently staged when git reset --hard was executed (see the posts linked above for more information). \u2013 cr7pt0gr4ph7  Sep 13 '16 at 21:22  "], "answer_body": " To reset to the previous revision, permanently deleting all uncommitted changes:  git reset --hard HEAD~1 ", "question_id": 927358}, 2], [{"answer_votes": "67", "answer_comments": null, "answer_body": " For a local commit  git reset --soft HEAD~1  or if you do not remember exactly in which commit it is, you might use  git rm --cached <file>  For a pushed commit  The proper way of removing files from the repository history is using git filter-branch . That is,  git filter-branch --index-filter 'git rm --cached <file>' HEAD  But I recomnend you use this command with care. Read more at git-filter-branch(1) Manual Page . ", "question_id": 927358}, 2], [{"answer_votes": "46", "answer_comments": null, "answer_body": " If you are working with SourceTree , this will help you.  Right click on the commit then select \" Reset (current branch)/master to this commit \" and last select  \"Soft\" reset .  ", "question_id": 927358}, 2], [{"answer_votes": "31", "answer_comments": null, "answer_body": " You need to do the easy and fast  git commit --amend  if it's a private branch or  git commit -m 'Replace .class files with .java files'  if it's a shared or public branch. ", "question_id": 927358}, 2], [{"answer_votes": "30", "answer_comments": null, "answer_body": " I got the commit ID from bitbucket and then did:  git checkout commitID .  Example:  git checkout 7991072 .  And it reverted it back up to that working copy of that commit. ", "question_id": 927358}, 2], [{"answer_votes": "22", "answer_comments": null, "answer_body": " You can always do a git checkout (SHA code) of the previous version and then commit again with the new code. ", "question_id": 927358}, 2], [{"answer_votes": "0", "answer_comments": null, "answer_body": " Try this, hard reset to previous commit where those files were not added, then:  git reset --hard <commit_hash>  Make sure you have a backup of your changes just in case, as it's a hard reset, which means they'll be lost (unless you stashed earlier) ", "question_id": 927358}, 2], [{"answer_votes": "525", "answer_comments": [" If you committed to the wrong branch: once reverted, switch to the correct branch and cherry-pick the commit. \u2013 Kris  Jun 27 '12 at 11:02 ", " What does that mean, cherry pick the commit? In my case, I was on the wrong branch when I edited a file. I committed it then realized I was in the wrong branch. Using \"git reset --soft HEAD~1\" got me back to just before the commit, but now if I checkout the correct branch, how do I undo the changes to the file in wrong branch but instead make them (in the same named file) in the correct branch? \u2013 astronomerdave  Jan 13 '15 at 22:05 ", " I just utilized git revert commit-id worked like a charm.  Of course then you will need to push your changes. \u2013 Casey Robinson  Jan 25 '16 at 21:07  ", " I believe that would be git cherry-pick <<erroneous-commit-sha>> @astronomerdave. From, Mr. Almost-2-Years-Late-to-the-Party. \u2013 Tom Howard  Oct 20 '16 at 18:19 "], "answer_body": " Use git revert commit-id  To get the commit ID, just use git log ", "question_id": 927358}, 1], [{"answer_votes": "142", "answer_comments": null, "answer_body": " First run:  git reflog  It will show you all the possible actions you have performed on your repository, for example, commit, merge, pull, etc.  Then do:  git reset --hard ActionIdFromRefLog ", "question_id": 927358}, 1], [{"answer_votes": "92", "answer_comments": null, "answer_body": " Simple, run this in your command line:  git reset --soft HEAD~ ", "question_id": 927358}, 1], [{"answer_votes": "53", "answer_comments": [" Or git reset @~ \u2013 Zaz  Aug 4 '16 at 8:36 "], "answer_body": " You can use:  git reset HEAD@{1}  This command will delete your wrong commit without a Git log. ", "question_id": 927358}, 1], [{"answer_votes": "21", "answer_comments": null, "answer_body": " Use:  git reset HEAD~1 --soft  Make changes, add, and commit the changes. ", "question_id": 927358}, 1], [{"answer_votes": "15", "answer_comments": null, "answer_body": " Just use git reset --hard <last good SHA> to reset your changes and give new commit. You can also use git checkout -- <bad filename> . ", "question_id": 927358}, 1], [{"answer_votes": "25", "answer_comments": null, "answer_body": " Use this command  git checkout -b old-state 0d1d7fc32 ", "question_id": 927358}, 0], [{"answer_votes": "24", "answer_comments": null, "answer_body": " Use this command:  git checkout -b old-state number_commit ", "question_id": 927358}, 0], [{"answer_votes": "4", "answer_comments": null, "answer_body": " git reset --hard your_last_good_commit_hash_here\n\ngit push --force origin master ", "question_id": 927358}, 0]], "question_id": 927358}